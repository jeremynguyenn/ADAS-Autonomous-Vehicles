
Lane_Detection.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058cc  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08005a64  08005a64  00015a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a8c  08005a8c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08005a8c  08005a8c  00015a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a94  08005a94  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a94  08005a94  00015a94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a98  08005a98  00015a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005a9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  2000005c  08005af8  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000022c  08005af8  0002022c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001280c  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002675  00000000  00000000  000328db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011c8  00000000  00000000  00034f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e0a  00000000  00000000  00036118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000174ab  00000000  00000000  00036f22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001593e  00000000  00000000  0004e3cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00091238  00000000  00000000  00063d0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004c58  00000000  00000000  000f4f44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000f9b9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000005c 	.word	0x2000005c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005a4c 	.word	0x08005a4c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000060 	.word	0x20000060
 80001d4:	08005a4c 	.word	0x08005a4c

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	; 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	3c01      	subs	r4, #1
 8000324:	bf28      	it	cs
 8000326:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800032a:	d2e9      	bcs.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__aeabi_d2uiz>:
 8000984:	004a      	lsls	r2, r1, #1
 8000986:	d211      	bcs.n	80009ac <__aeabi_d2uiz+0x28>
 8000988:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800098c:	d211      	bcs.n	80009b2 <__aeabi_d2uiz+0x2e>
 800098e:	d50d      	bpl.n	80009ac <__aeabi_d2uiz+0x28>
 8000990:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000994:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000998:	d40e      	bmi.n	80009b8 <__aeabi_d2uiz+0x34>
 800099a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800099e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009a2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009a6:	fa23 f002 	lsr.w	r0, r3, r2
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009b6:	d102      	bne.n	80009be <__aeabi_d2uiz+0x3a>
 80009b8:	f04f 30ff 	mov.w	r0, #4294967295
 80009bc:	4770      	bx	lr
 80009be:	f04f 0000 	mov.w	r0, #0
 80009c2:	4770      	bx	lr

080009c4 <__aeabi_uldivmod>:
 80009c4:	b953      	cbnz	r3, 80009dc <__aeabi_uldivmod+0x18>
 80009c6:	b94a      	cbnz	r2, 80009dc <__aeabi_uldivmod+0x18>
 80009c8:	2900      	cmp	r1, #0
 80009ca:	bf08      	it	eq
 80009cc:	2800      	cmpeq	r0, #0
 80009ce:	bf1c      	itt	ne
 80009d0:	f04f 31ff 	movne.w	r1, #4294967295
 80009d4:	f04f 30ff 	movne.w	r0, #4294967295
 80009d8:	f000 b970 	b.w	8000cbc <__aeabi_idiv0>
 80009dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009e4:	f000 f806 	bl	80009f4 <__udivmoddi4>
 80009e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009f0:	b004      	add	sp, #16
 80009f2:	4770      	bx	lr

080009f4 <__udivmoddi4>:
 80009f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009f8:	9e08      	ldr	r6, [sp, #32]
 80009fa:	460d      	mov	r5, r1
 80009fc:	4604      	mov	r4, r0
 80009fe:	460f      	mov	r7, r1
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d14a      	bne.n	8000a9a <__udivmoddi4+0xa6>
 8000a04:	428a      	cmp	r2, r1
 8000a06:	4694      	mov	ip, r2
 8000a08:	d965      	bls.n	8000ad6 <__udivmoddi4+0xe2>
 8000a0a:	fab2 f382 	clz	r3, r2
 8000a0e:	b143      	cbz	r3, 8000a22 <__udivmoddi4+0x2e>
 8000a10:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a14:	f1c3 0220 	rsb	r2, r3, #32
 8000a18:	409f      	lsls	r7, r3
 8000a1a:	fa20 f202 	lsr.w	r2, r0, r2
 8000a1e:	4317      	orrs	r7, r2
 8000a20:	409c      	lsls	r4, r3
 8000a22:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a26:	fa1f f58c 	uxth.w	r5, ip
 8000a2a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a2e:	0c22      	lsrs	r2, r4, #16
 8000a30:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a34:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a38:	fb01 f005 	mul.w	r0, r1, r5
 8000a3c:	4290      	cmp	r0, r2
 8000a3e:	d90a      	bls.n	8000a56 <__udivmoddi4+0x62>
 8000a40:	eb1c 0202 	adds.w	r2, ip, r2
 8000a44:	f101 37ff 	add.w	r7, r1, #4294967295
 8000a48:	f080 811c 	bcs.w	8000c84 <__udivmoddi4+0x290>
 8000a4c:	4290      	cmp	r0, r2
 8000a4e:	f240 8119 	bls.w	8000c84 <__udivmoddi4+0x290>
 8000a52:	3902      	subs	r1, #2
 8000a54:	4462      	add	r2, ip
 8000a56:	1a12      	subs	r2, r2, r0
 8000a58:	b2a4      	uxth	r4, r4
 8000a5a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a5e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a62:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a66:	fb00 f505 	mul.w	r5, r0, r5
 8000a6a:	42a5      	cmp	r5, r4
 8000a6c:	d90a      	bls.n	8000a84 <__udivmoddi4+0x90>
 8000a6e:	eb1c 0404 	adds.w	r4, ip, r4
 8000a72:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a76:	f080 8107 	bcs.w	8000c88 <__udivmoddi4+0x294>
 8000a7a:	42a5      	cmp	r5, r4
 8000a7c:	f240 8104 	bls.w	8000c88 <__udivmoddi4+0x294>
 8000a80:	4464      	add	r4, ip
 8000a82:	3802      	subs	r0, #2
 8000a84:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a88:	1b64      	subs	r4, r4, r5
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	b11e      	cbz	r6, 8000a96 <__udivmoddi4+0xa2>
 8000a8e:	40dc      	lsrs	r4, r3
 8000a90:	2300      	movs	r3, #0
 8000a92:	e9c6 4300 	strd	r4, r3, [r6]
 8000a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a9a:	428b      	cmp	r3, r1
 8000a9c:	d908      	bls.n	8000ab0 <__udivmoddi4+0xbc>
 8000a9e:	2e00      	cmp	r6, #0
 8000aa0:	f000 80ed 	beq.w	8000c7e <__udivmoddi4+0x28a>
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	e9c6 0500 	strd	r0, r5, [r6]
 8000aaa:	4608      	mov	r0, r1
 8000aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ab0:	fab3 f183 	clz	r1, r3
 8000ab4:	2900      	cmp	r1, #0
 8000ab6:	d149      	bne.n	8000b4c <__udivmoddi4+0x158>
 8000ab8:	42ab      	cmp	r3, r5
 8000aba:	d302      	bcc.n	8000ac2 <__udivmoddi4+0xce>
 8000abc:	4282      	cmp	r2, r0
 8000abe:	f200 80f8 	bhi.w	8000cb2 <__udivmoddi4+0x2be>
 8000ac2:	1a84      	subs	r4, r0, r2
 8000ac4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ac8:	2001      	movs	r0, #1
 8000aca:	4617      	mov	r7, r2
 8000acc:	2e00      	cmp	r6, #0
 8000ace:	d0e2      	beq.n	8000a96 <__udivmoddi4+0xa2>
 8000ad0:	e9c6 4700 	strd	r4, r7, [r6]
 8000ad4:	e7df      	b.n	8000a96 <__udivmoddi4+0xa2>
 8000ad6:	b902      	cbnz	r2, 8000ada <__udivmoddi4+0xe6>
 8000ad8:	deff      	udf	#255	; 0xff
 8000ada:	fab2 f382 	clz	r3, r2
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	f040 8090 	bne.w	8000c04 <__udivmoddi4+0x210>
 8000ae4:	1a8a      	subs	r2, r1, r2
 8000ae6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aea:	fa1f fe8c 	uxth.w	lr, ip
 8000aee:	2101      	movs	r1, #1
 8000af0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000af4:	fb07 2015 	mls	r0, r7, r5, r2
 8000af8:	0c22      	lsrs	r2, r4, #16
 8000afa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000afe:	fb0e f005 	mul.w	r0, lr, r5
 8000b02:	4290      	cmp	r0, r2
 8000b04:	d908      	bls.n	8000b18 <__udivmoddi4+0x124>
 8000b06:	eb1c 0202 	adds.w	r2, ip, r2
 8000b0a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b0e:	d202      	bcs.n	8000b16 <__udivmoddi4+0x122>
 8000b10:	4290      	cmp	r0, r2
 8000b12:	f200 80cb 	bhi.w	8000cac <__udivmoddi4+0x2b8>
 8000b16:	4645      	mov	r5, r8
 8000b18:	1a12      	subs	r2, r2, r0
 8000b1a:	b2a4      	uxth	r4, r4
 8000b1c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b20:	fb07 2210 	mls	r2, r7, r0, r2
 8000b24:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b28:	fb0e fe00 	mul.w	lr, lr, r0
 8000b2c:	45a6      	cmp	lr, r4
 8000b2e:	d908      	bls.n	8000b42 <__udivmoddi4+0x14e>
 8000b30:	eb1c 0404 	adds.w	r4, ip, r4
 8000b34:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b38:	d202      	bcs.n	8000b40 <__udivmoddi4+0x14c>
 8000b3a:	45a6      	cmp	lr, r4
 8000b3c:	f200 80bb 	bhi.w	8000cb6 <__udivmoddi4+0x2c2>
 8000b40:	4610      	mov	r0, r2
 8000b42:	eba4 040e 	sub.w	r4, r4, lr
 8000b46:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b4a:	e79f      	b.n	8000a8c <__udivmoddi4+0x98>
 8000b4c:	f1c1 0720 	rsb	r7, r1, #32
 8000b50:	408b      	lsls	r3, r1
 8000b52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b5a:	fa05 f401 	lsl.w	r4, r5, r1
 8000b5e:	fa20 f307 	lsr.w	r3, r0, r7
 8000b62:	40fd      	lsrs	r5, r7
 8000b64:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b68:	4323      	orrs	r3, r4
 8000b6a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000b6e:	fa1f fe8c 	uxth.w	lr, ip
 8000b72:	fb09 5518 	mls	r5, r9, r8, r5
 8000b76:	0c1c      	lsrs	r4, r3, #16
 8000b78:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b7c:	fb08 f50e 	mul.w	r5, r8, lr
 8000b80:	42a5      	cmp	r5, r4
 8000b82:	fa02 f201 	lsl.w	r2, r2, r1
 8000b86:	fa00 f001 	lsl.w	r0, r0, r1
 8000b8a:	d90b      	bls.n	8000ba4 <__udivmoddi4+0x1b0>
 8000b8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000b90:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b94:	f080 8088 	bcs.w	8000ca8 <__udivmoddi4+0x2b4>
 8000b98:	42a5      	cmp	r5, r4
 8000b9a:	f240 8085 	bls.w	8000ca8 <__udivmoddi4+0x2b4>
 8000b9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000ba2:	4464      	add	r4, ip
 8000ba4:	1b64      	subs	r4, r4, r5
 8000ba6:	b29d      	uxth	r5, r3
 8000ba8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000bac:	fb09 4413 	mls	r4, r9, r3, r4
 8000bb0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000bb4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000bb8:	45a6      	cmp	lr, r4
 8000bba:	d908      	bls.n	8000bce <__udivmoddi4+0x1da>
 8000bbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000bc0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000bc4:	d26c      	bcs.n	8000ca0 <__udivmoddi4+0x2ac>
 8000bc6:	45a6      	cmp	lr, r4
 8000bc8:	d96a      	bls.n	8000ca0 <__udivmoddi4+0x2ac>
 8000bca:	3b02      	subs	r3, #2
 8000bcc:	4464      	add	r4, ip
 8000bce:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bd2:	fba3 9502 	umull	r9, r5, r3, r2
 8000bd6:	eba4 040e 	sub.w	r4, r4, lr
 8000bda:	42ac      	cmp	r4, r5
 8000bdc:	46c8      	mov	r8, r9
 8000bde:	46ae      	mov	lr, r5
 8000be0:	d356      	bcc.n	8000c90 <__udivmoddi4+0x29c>
 8000be2:	d053      	beq.n	8000c8c <__udivmoddi4+0x298>
 8000be4:	b156      	cbz	r6, 8000bfc <__udivmoddi4+0x208>
 8000be6:	ebb0 0208 	subs.w	r2, r0, r8
 8000bea:	eb64 040e 	sbc.w	r4, r4, lr
 8000bee:	fa04 f707 	lsl.w	r7, r4, r7
 8000bf2:	40ca      	lsrs	r2, r1
 8000bf4:	40cc      	lsrs	r4, r1
 8000bf6:	4317      	orrs	r7, r2
 8000bf8:	e9c6 7400 	strd	r7, r4, [r6]
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	2100      	movs	r1, #0
 8000c00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c04:	f1c3 0120 	rsb	r1, r3, #32
 8000c08:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c0c:	fa20 f201 	lsr.w	r2, r0, r1
 8000c10:	fa25 f101 	lsr.w	r1, r5, r1
 8000c14:	409d      	lsls	r5, r3
 8000c16:	432a      	orrs	r2, r5
 8000c18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1c:	fa1f fe8c 	uxth.w	lr, ip
 8000c20:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c24:	fb07 1510 	mls	r5, r7, r0, r1
 8000c28:	0c11      	lsrs	r1, r2, #16
 8000c2a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c2e:	fb00 f50e 	mul.w	r5, r0, lr
 8000c32:	428d      	cmp	r5, r1
 8000c34:	fa04 f403 	lsl.w	r4, r4, r3
 8000c38:	d908      	bls.n	8000c4c <__udivmoddi4+0x258>
 8000c3a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c3e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c42:	d22f      	bcs.n	8000ca4 <__udivmoddi4+0x2b0>
 8000c44:	428d      	cmp	r5, r1
 8000c46:	d92d      	bls.n	8000ca4 <__udivmoddi4+0x2b0>
 8000c48:	3802      	subs	r0, #2
 8000c4a:	4461      	add	r1, ip
 8000c4c:	1b49      	subs	r1, r1, r5
 8000c4e:	b292      	uxth	r2, r2
 8000c50:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c54:	fb07 1115 	mls	r1, r7, r5, r1
 8000c58:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c5c:	fb05 f10e 	mul.w	r1, r5, lr
 8000c60:	4291      	cmp	r1, r2
 8000c62:	d908      	bls.n	8000c76 <__udivmoddi4+0x282>
 8000c64:	eb1c 0202 	adds.w	r2, ip, r2
 8000c68:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c6c:	d216      	bcs.n	8000c9c <__udivmoddi4+0x2a8>
 8000c6e:	4291      	cmp	r1, r2
 8000c70:	d914      	bls.n	8000c9c <__udivmoddi4+0x2a8>
 8000c72:	3d02      	subs	r5, #2
 8000c74:	4462      	add	r2, ip
 8000c76:	1a52      	subs	r2, r2, r1
 8000c78:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000c7c:	e738      	b.n	8000af0 <__udivmoddi4+0xfc>
 8000c7e:	4631      	mov	r1, r6
 8000c80:	4630      	mov	r0, r6
 8000c82:	e708      	b.n	8000a96 <__udivmoddi4+0xa2>
 8000c84:	4639      	mov	r1, r7
 8000c86:	e6e6      	b.n	8000a56 <__udivmoddi4+0x62>
 8000c88:	4610      	mov	r0, r2
 8000c8a:	e6fb      	b.n	8000a84 <__udivmoddi4+0x90>
 8000c8c:	4548      	cmp	r0, r9
 8000c8e:	d2a9      	bcs.n	8000be4 <__udivmoddi4+0x1f0>
 8000c90:	ebb9 0802 	subs.w	r8, r9, r2
 8000c94:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000c98:	3b01      	subs	r3, #1
 8000c9a:	e7a3      	b.n	8000be4 <__udivmoddi4+0x1f0>
 8000c9c:	4645      	mov	r5, r8
 8000c9e:	e7ea      	b.n	8000c76 <__udivmoddi4+0x282>
 8000ca0:	462b      	mov	r3, r5
 8000ca2:	e794      	b.n	8000bce <__udivmoddi4+0x1da>
 8000ca4:	4640      	mov	r0, r8
 8000ca6:	e7d1      	b.n	8000c4c <__udivmoddi4+0x258>
 8000ca8:	46d0      	mov	r8, sl
 8000caa:	e77b      	b.n	8000ba4 <__udivmoddi4+0x1b0>
 8000cac:	3d02      	subs	r5, #2
 8000cae:	4462      	add	r2, ip
 8000cb0:	e732      	b.n	8000b18 <__udivmoddi4+0x124>
 8000cb2:	4608      	mov	r0, r1
 8000cb4:	e70a      	b.n	8000acc <__udivmoddi4+0xd8>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	e742      	b.n	8000b42 <__udivmoddi4+0x14e>

08000cbc <__aeabi_idiv0>:
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop

08000cc0 <Lane_Detection>:
#include "Motion.h"

extern int8_t R1, L1;

void Lane_Detection(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
	/*Forward Moving*/
	if (R1==Black && L1==Black)
 8000cc4:	4b19      	ldr	r3, [pc, #100]	; (8000d2c <Lane_Detection+0x6c>)
 8000cc6:	f993 3000 	ldrsb.w	r3, [r3]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d109      	bne.n	8000ce2 <Lane_Detection+0x22>
 8000cce:	4b18      	ldr	r3, [pc, #96]	; (8000d30 <Lane_Detection+0x70>)
 8000cd0:	f993 3000 	ldrsb.w	r3, [r3]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d104      	bne.n	8000ce2 <Lane_Detection+0x22>
	{
		QUARTER_SPEED();
 8000cd8:	f000 f8c6 	bl	8000e68 <QUARTER_SPEED>
		Forward_Moving();
 8000cdc:	f000 f82a 	bl	8000d34 <Forward_Moving>
 8000ce0:	e022      	b.n	8000d28 <Lane_Detection+0x68>
	}
	/*Left Moving*/
	else if (R1==Black && L1==White)
 8000ce2:	4b12      	ldr	r3, [pc, #72]	; (8000d2c <Lane_Detection+0x6c>)
 8000ce4:	f993 3000 	ldrsb.w	r3, [r3]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d109      	bne.n	8000d00 <Lane_Detection+0x40>
 8000cec:	4b10      	ldr	r3, [pc, #64]	; (8000d30 <Lane_Detection+0x70>)
 8000cee:	f993 3000 	ldrsb.w	r3, [r3]
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d104      	bne.n	8000d00 <Lane_Detection+0x40>
	{
		QUARTER_SPEED();
 8000cf6:	f000 f8b7 	bl	8000e68 <QUARTER_SPEED>
		Left_Moving();
 8000cfa:	f000 f83d 	bl	8000d78 <Left_Moving>
 8000cfe:	e013      	b.n	8000d28 <Lane_Detection+0x68>
	}
	/*Right Moving*/
	else if (R1==White && L1==Black)
 8000d00:	4b0a      	ldr	r3, [pc, #40]	; (8000d2c <Lane_Detection+0x6c>)
 8000d02:	f993 3000 	ldrsb.w	r3, [r3]
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d109      	bne.n	8000d1e <Lane_Detection+0x5e>
 8000d0a:	4b09      	ldr	r3, [pc, #36]	; (8000d30 <Lane_Detection+0x70>)
 8000d0c:	f993 3000 	ldrsb.w	r3, [r3]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d104      	bne.n	8000d1e <Lane_Detection+0x5e>
	{
		QUARTER_SPEED();
 8000d14:	f000 f8a8 	bl	8000e68 <QUARTER_SPEED>
		Right_Moving();
 8000d18:	f000 f850 	bl	8000dbc <Right_Moving>
 8000d1c:	e004      	b.n	8000d28 <Lane_Detection+0x68>
	}
	/*Stop Moving*/
	else
	{
		NO_SPEED();
 8000d1e:	f000 f8b5 	bl	8000e8c <NO_SPEED>
		Stop_Moving();
 8000d22:	f000 f86d 	bl	8000e00 <Stop_Moving>

	}
}
 8000d26:	bf00      	nop
 8000d28:	bf00      	nop
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20000082 	.word	0x20000082
 8000d30:	20000083 	.word	0x20000083

08000d34 <Forward_Moving>:
extern char fullSpeed ;
extern char halfSpeed[] ;
extern char quarterSpeed[];
extern char zeroSpeed[];
void Forward_Moving(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Backward_Right_GPIO_Port, Backward_Right_Pin, Motor_High);
 8000d38:	2201      	movs	r2, #1
 8000d3a:	2180      	movs	r1, #128	; 0x80
 8000d3c:	480b      	ldr	r0, [pc, #44]	; (8000d6c <Forward_Moving+0x38>)
 8000d3e:	f002 f86f 	bl	8002e20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Forward_Right_GPIO_Port, Forward_Right_Pin, Motor_Low);
 8000d42:	2200      	movs	r2, #0
 8000d44:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d48:	4809      	ldr	r0, [pc, #36]	; (8000d70 <Forward_Moving+0x3c>)
 8000d4a:	f002 f869 	bl	8002e20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Backward_Left_GPIO_Port, Backward_Left_Pin, Motor_Low);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d54:	4807      	ldr	r0, [pc, #28]	; (8000d74 <Forward_Moving+0x40>)
 8000d56:	f002 f863 	bl	8002e20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Forward_Left_GPIO_Port, Forward_Left_Pin, Motor_High);
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d60:	4803      	ldr	r0, [pc, #12]	; (8000d70 <Forward_Moving+0x3c>)
 8000d62:	f002 f85d 	bl	8002e20 <HAL_GPIO_WritePin>
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40020000 	.word	0x40020000
 8000d70:	40020800 	.word	0x40020800
 8000d74:	40020400 	.word	0x40020400

08000d78 <Left_Moving>:

void Left_Moving(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Backward_Right_GPIO_Port, Backward_Right_Pin, Motor_High);
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	2180      	movs	r1, #128	; 0x80
 8000d80:	480b      	ldr	r0, [pc, #44]	; (8000db0 <Left_Moving+0x38>)
 8000d82:	f002 f84d 	bl	8002e20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Forward_Right_GPIO_Port, Forward_Right_Pin, Motor_Low);
 8000d86:	2200      	movs	r2, #0
 8000d88:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d8c:	4809      	ldr	r0, [pc, #36]	; (8000db4 <Left_Moving+0x3c>)
 8000d8e:	f002 f847 	bl	8002e20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Backward_Left_GPIO_Port, Backward_Left_Pin, Motor_High);
 8000d92:	2201      	movs	r2, #1
 8000d94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d98:	4807      	ldr	r0, [pc, #28]	; (8000db8 <Left_Moving+0x40>)
 8000d9a:	f002 f841 	bl	8002e20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Forward_Left_GPIO_Port, Forward_Left_Pin, Motor_Low);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000da4:	4803      	ldr	r0, [pc, #12]	; (8000db4 <Left_Moving+0x3c>)
 8000da6:	f002 f83b 	bl	8002e20 <HAL_GPIO_WritePin>
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40020000 	.word	0x40020000
 8000db4:	40020800 	.word	0x40020800
 8000db8:	40020400 	.word	0x40020400

08000dbc <Right_Moving>:

void Right_Moving(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Backward_Right_GPIO_Port, Backward_Right_Pin, Motor_Low);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	2180      	movs	r1, #128	; 0x80
 8000dc4:	480b      	ldr	r0, [pc, #44]	; (8000df4 <Right_Moving+0x38>)
 8000dc6:	f002 f82b 	bl	8002e20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Forward_Right_GPIO_Port, Forward_Right_Pin, Motor_High);
 8000dca:	2201      	movs	r2, #1
 8000dcc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dd0:	4809      	ldr	r0, [pc, #36]	; (8000df8 <Right_Moving+0x3c>)
 8000dd2:	f002 f825 	bl	8002e20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Backward_Left_GPIO_Port, Backward_Left_Pin, Motor_Low);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ddc:	4807      	ldr	r0, [pc, #28]	; (8000dfc <Right_Moving+0x40>)
 8000dde:	f002 f81f 	bl	8002e20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Forward_Left_GPIO_Port, Forward_Left_Pin, Motor_Low);
 8000de2:	2200      	movs	r2, #0
 8000de4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000de8:	4803      	ldr	r0, [pc, #12]	; (8000df8 <Right_Moving+0x3c>)
 8000dea:	f002 f819 	bl	8002e20 <HAL_GPIO_WritePin>
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40020000 	.word	0x40020000
 8000df8:	40020800 	.word	0x40020800
 8000dfc:	40020400 	.word	0x40020400

08000e00 <Stop_Moving>:

void Stop_Moving(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Backward_Right_GPIO_Port, Backward_Right_Pin, Motor_Low);
 8000e04:	2200      	movs	r2, #0
 8000e06:	2180      	movs	r1, #128	; 0x80
 8000e08:	480b      	ldr	r0, [pc, #44]	; (8000e38 <Stop_Moving+0x38>)
 8000e0a:	f002 f809 	bl	8002e20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Forward_Right_GPIO_Port, Forward_Right_Pin, Motor_Low);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e14:	4809      	ldr	r0, [pc, #36]	; (8000e3c <Stop_Moving+0x3c>)
 8000e16:	f002 f803 	bl	8002e20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Backward_Left_GPIO_Port, Backward_Left_Pin, Motor_Low);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e20:	4807      	ldr	r0, [pc, #28]	; (8000e40 <Stop_Moving+0x40>)
 8000e22:	f001 fffd 	bl	8002e20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Forward_Left_GPIO_Port, Forward_Left_Pin, Motor_Low);
 8000e26:	2200      	movs	r2, #0
 8000e28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e2c:	4803      	ldr	r0, [pc, #12]	; (8000e3c <Stop_Moving+0x3c>)
 8000e2e:	f001 fff7 	bl	8002e20 <HAL_GPIO_WritePin>
}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40020000 	.word	0x40020000
 8000e3c:	40020800 	.word	0x40020800
 8000e40:	40020400 	.word	0x40020400

08000e44 <HALF_SPEED>:
	TIM1->CCR2=65535;
	//HAL_UART_Transmit(&huart6, (uint8_t*)fullSpeed, strlen(fullSpeed), HAL_MAX_DELAY);
	//HAL_Delay(1000);
}
void HALF_SPEED (void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
	TIM1->CCR1=32767;
 8000e48:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <HALF_SPEED+0x20>)
 8000e4a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000e4e:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2=32767;
 8000e50:	4b04      	ldr	r3, [pc, #16]	; (8000e64 <HALF_SPEED+0x20>)
 8000e52:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000e56:	639a      	str	r2, [r3, #56]	; 0x38
	//HAL_UART_Transmit(&huart6, (uint8_t*)halfSpeed, strlen(halfSpeed), HAL_MAX_DELAY);
	//HAL_Delay(1000);
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	40010000 	.word	0x40010000

08000e68 <QUARTER_SPEED>:

void QUARTER_SPEED (void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
	TIM1->CCR1=22000;
 8000e6c:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <QUARTER_SPEED+0x20>)
 8000e6e:	f245 52f0 	movw	r2, #22000	; 0x55f0
 8000e72:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2=22000;
 8000e74:	4b04      	ldr	r3, [pc, #16]	; (8000e88 <QUARTER_SPEED+0x20>)
 8000e76:	f245 52f0 	movw	r2, #22000	; 0x55f0
 8000e7a:	639a      	str	r2, [r3, #56]	; 0x38
	//HAL_UART_Transmit(&huart6, (uint8_t*)quarterSpeed, strlen(quarterSpeed), HAL_MAX_DELAY);
	//HAL_Delay(1000);
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	40010000 	.word	0x40010000

08000e8c <NO_SPEED>:
void NO_SPEED (void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
	TIM1->CCR1=0;
 8000e90:	4b0b      	ldr	r3, [pc, #44]	; (8000ec0 <NO_SPEED+0x34>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2=0;
 8000e96:	4b0a      	ldr	r3, [pc, #40]	; (8000ec0 <NO_SPEED+0x34>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_UART_Transmit(&huart6, (uint8_t*)zeroSpeed, strlen(zeroSpeed), HAL_MAX_DELAY);
 8000e9c:	4809      	ldr	r0, [pc, #36]	; (8000ec4 <NO_SPEED+0x38>)
 8000e9e:	f7ff f99b 	bl	80001d8 <strlen>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	b29a      	uxth	r2, r3
 8000ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eaa:	4906      	ldr	r1, [pc, #24]	; (8000ec4 <NO_SPEED+0x38>)
 8000eac:	4806      	ldr	r0, [pc, #24]	; (8000ec8 <NO_SPEED+0x3c>)
 8000eae:	f004 fa2c 	bl	800530a <HAL_UART_Transmit>
	HAL_Delay(1000);
 8000eb2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000eb6:	f001 fd0d 	bl	80028d4 <HAL_Delay>
}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40010000 	.word	0x40010000
 8000ec4:	20000000 	.word	0x20000000
 8000ec8:	200001e4 	.word	0x200001e4

08000ecc <CS_Select>:

extern SPI_HandleTypeDef hspi2;
#define NRF24_SPI &hspi2

void CS_Select (void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_RESET);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2104      	movs	r1, #4
 8000ed4:	4802      	ldr	r0, [pc, #8]	; (8000ee0 <CS_Select+0x14>)
 8000ed6:	f001 ffa3 	bl	8002e20 <HAL_GPIO_WritePin>
}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40020400 	.word	0x40020400

08000ee4 <CS_UnSelect>:

void CS_UnSelect (void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_SET);
 8000ee8:	2201      	movs	r2, #1
 8000eea:	2104      	movs	r1, #4
 8000eec:	4802      	ldr	r0, [pc, #8]	; (8000ef8 <CS_UnSelect+0x14>)
 8000eee:	f001 ff97 	bl	8002e20 <HAL_GPIO_WritePin>
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40020400 	.word	0x40020400

08000efc <CE_Enable>:


void CE_Enable (void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_SET);
 8000f00:	2201      	movs	r2, #1
 8000f02:	2102      	movs	r1, #2
 8000f04:	4802      	ldr	r0, [pc, #8]	; (8000f10 <CE_Enable+0x14>)
 8000f06:	f001 ff8b 	bl	8002e20 <HAL_GPIO_WritePin>
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40020400 	.word	0x40020400

08000f14 <CE_Disable>:

void CE_Disable (void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2102      	movs	r1, #2
 8000f1c:	4802      	ldr	r0, [pc, #8]	; (8000f28 <CE_Disable+0x14>)
 8000f1e:	f001 ff7f 	bl	8002e20 <HAL_GPIO_WritePin>
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40020400 	.word	0x40020400

08000f2c <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	460a      	mov	r2, r1
 8000f36:	71fb      	strb	r3, [r7, #7]
 8000f38:	4613      	mov	r3, r2
 8000f3a:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];		//buffer with 2 bytes
	buf[0] = Reg|1<<5;	//the 0 position is the w_register and writing 1 at the fifth position
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	f043 0320 	orr.w	r3, r3, #32
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;		//the 1 position is for the data byte
 8000f46:	79bb      	ldrb	r3, [r7, #6]
 8000f48:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000f4a:	f7ff ffbf 	bl	8000ecc <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 8000f4e:	f107 010c 	add.w	r1, r7, #12
 8000f52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f56:	2202      	movs	r2, #2
 8000f58:	4804      	ldr	r0, [pc, #16]	; (8000f6c <nrf24_WriteReg+0x40>)
 8000f5a:	f002 fda0 	bl	8003a9e <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000f5e:	f7ff ffc1 	bl	8000ee4 <CS_UnSelect>
}
 8000f62:	bf00      	nop
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	200000fc 	.word	0x200000fc

08000f70 <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	607a      	str	r2, [r7, #4]
 8000f7c:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;	//the 0 position is write to register and writing 1 at the fifth position
 8000f7e:	7bfb      	ldrb	r3, [r7, #15]
 8000f80:	f043 0320 	orr.w	r3, r3, #32
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	753b      	strb	r3, [r7, #20]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000f88:	f7ff ffa0 	bl	8000ecc <CS_Select>

	//start sending all data at once
	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 8000f8c:	f107 0114 	add.w	r1, r7, #20
 8000f90:	2364      	movs	r3, #100	; 0x64
 8000f92:	2201      	movs	r2, #1
 8000f94:	4808      	ldr	r0, [pc, #32]	; (8000fb8 <nrf24_WriteRegMulti+0x48>)
 8000f96:	f002 fd82 	bl	8003a9e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	b29a      	uxth	r2, r3
 8000f9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fa2:	68b9      	ldr	r1, [r7, #8]
 8000fa4:	4804      	ldr	r0, [pc, #16]	; (8000fb8 <nrf24_WriteRegMulti+0x48>)
 8000fa6:	f002 fd7a 	bl	8003a9e <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000faa:	f7ff ff9b 	bl	8000ee4 <CS_UnSelect>
}
 8000fae:	bf00      	nop
 8000fb0:	3718      	adds	r7, #24
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	200000fc 	.word	0x200000fc

08000fbc <nrf24_ReadReg>:

//read 1 byte data from a register
uint8_t nrf24_ReadReg (uint8_t Reg)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000fca:	f7ff ff7f 	bl	8000ecc <CS_Select>

	//send the register address to read data from
	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 8000fce:	1df9      	adds	r1, r7, #7
 8000fd0:	2364      	movs	r3, #100	; 0x64
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	4808      	ldr	r0, [pc, #32]	; (8000ff8 <nrf24_ReadReg+0x3c>)
 8000fd6:	f002 fd62 	bl	8003a9e <HAL_SPI_Transmit>

	//read 1 byte data from the register
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 8000fda:	f107 010f 	add.w	r1, r7, #15
 8000fde:	2364      	movs	r3, #100	; 0x64
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	4805      	ldr	r0, [pc, #20]	; (8000ff8 <nrf24_ReadReg+0x3c>)
 8000fe4:	f002 fe97 	bl	8003d16 <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000fe8:	f7ff ff7c 	bl	8000ee4 <CS_UnSelect>

	return data;
 8000fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3710      	adds	r7, #16
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	200000fc 	.word	0x200000fc

08000ffc <nrfsendCmd>:
}


// send the command to the NRF
void nrfsendCmd (uint8_t cmd)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	71fb      	strb	r3, [r7, #7]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 8001006:	f7ff ff61 	bl	8000ecc <CS_Select>

	//send the command
	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 800100a:	1df9      	adds	r1, r7, #7
 800100c:	2364      	movs	r3, #100	; 0x64
 800100e:	2201      	movs	r2, #1
 8001010:	4804      	ldr	r0, [pc, #16]	; (8001024 <nrfsendCmd+0x28>)
 8001012:	f002 fd44 	bl	8003a9e <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8001016:	f7ff ff65 	bl	8000ee4 <CS_UnSelect>
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	200000fc 	.word	0x200000fc

08001028 <nrf24_reset>:

void nrf24_reset(uint8_t REG)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b088      	sub	sp, #32
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	2b07      	cmp	r3, #7
 8001036:	d104      	bne.n	8001042 <nrf24_reset+0x1a>
	{
		nrf24_WriteReg(STATUS, 0x00);
 8001038:	2100      	movs	r1, #0
 800103a:	2007      	movs	r0, #7
 800103c:	f7ff ff76 	bl	8000f2c <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 8001040:	e090      	b.n	8001164 <nrf24_reset+0x13c>
	else if (REG == FIFO_STATUS)
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	2b17      	cmp	r3, #23
 8001046:	d104      	bne.n	8001052 <nrf24_reset+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 8001048:	2111      	movs	r1, #17
 800104a:	2017      	movs	r0, #23
 800104c:	f7ff ff6e 	bl	8000f2c <nrf24_WriteReg>
}
 8001050:	e088      	b.n	8001164 <nrf24_reset+0x13c>
	nrf24_WriteReg(CONFIG, 0x08);
 8001052:	2108      	movs	r1, #8
 8001054:	2000      	movs	r0, #0
 8001056:	f7ff ff69 	bl	8000f2c <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 800105a:	213f      	movs	r1, #63	; 0x3f
 800105c:	2001      	movs	r0, #1
 800105e:	f7ff ff65 	bl	8000f2c <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 8001062:	2103      	movs	r1, #3
 8001064:	2002      	movs	r0, #2
 8001066:	f7ff ff61 	bl	8000f2c <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 800106a:	2103      	movs	r1, #3
 800106c:	2003      	movs	r0, #3
 800106e:	f7ff ff5d 	bl	8000f2c <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 8001072:	2103      	movs	r1, #3
 8001074:	2004      	movs	r0, #4
 8001076:	f7ff ff59 	bl	8000f2c <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 800107a:	2102      	movs	r1, #2
 800107c:	2005      	movs	r0, #5
 800107e:	f7ff ff55 	bl	8000f2c <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 8001082:	210e      	movs	r1, #14
 8001084:	2006      	movs	r0, #6
 8001086:	f7ff ff51 	bl	8000f2c <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 800108a:	2100      	movs	r1, #0
 800108c:	2007      	movs	r0, #7
 800108e:	f7ff ff4d 	bl	8000f2c <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 8001092:	2100      	movs	r1, #0
 8001094:	2008      	movs	r0, #8
 8001096:	f7ff ff49 	bl	8000f2c <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 800109a:	2100      	movs	r1, #0
 800109c:	2009      	movs	r0, #9
 800109e:	f7ff ff45 	bl	8000f2c <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 80010a2:	4a32      	ldr	r2, [pc, #200]	; (800116c <nrf24_reset+0x144>)
 80010a4:	f107 0318 	add.w	r3, r7, #24
 80010a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010ac:	6018      	str	r0, [r3, #0]
 80010ae:	3304      	adds	r3, #4
 80010b0:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 80010b2:	f107 0318 	add.w	r3, r7, #24
 80010b6:	2205      	movs	r2, #5
 80010b8:	4619      	mov	r1, r3
 80010ba:	200a      	movs	r0, #10
 80010bc:	f7ff ff58 	bl	8000f70 <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 80010c0:	4a2b      	ldr	r2, [pc, #172]	; (8001170 <nrf24_reset+0x148>)
 80010c2:	f107 0310 	add.w	r3, r7, #16
 80010c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010ca:	6018      	str	r0, [r3, #0]
 80010cc:	3304      	adds	r3, #4
 80010ce:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 80010d0:	f107 0310 	add.w	r3, r7, #16
 80010d4:	2205      	movs	r2, #5
 80010d6:	4619      	mov	r1, r3
 80010d8:	200b      	movs	r0, #11
 80010da:	f7ff ff49 	bl	8000f70 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 80010de:	21c3      	movs	r1, #195	; 0xc3
 80010e0:	200c      	movs	r0, #12
 80010e2:	f7ff ff23 	bl	8000f2c <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 80010e6:	21c4      	movs	r1, #196	; 0xc4
 80010e8:	200d      	movs	r0, #13
 80010ea:	f7ff ff1f 	bl	8000f2c <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 80010ee:	21c5      	movs	r1, #197	; 0xc5
 80010f0:	200e      	movs	r0, #14
 80010f2:	f7ff ff1b 	bl	8000f2c <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 80010f6:	21c6      	movs	r1, #198	; 0xc6
 80010f8:	200f      	movs	r0, #15
 80010fa:	f7ff ff17 	bl	8000f2c <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 80010fe:	4a1b      	ldr	r2, [pc, #108]	; (800116c <nrf24_reset+0x144>)
 8001100:	f107 0308 	add.w	r3, r7, #8
 8001104:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001108:	6018      	str	r0, [r3, #0]
 800110a:	3304      	adds	r3, #4
 800110c:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 800110e:	f107 0308 	add.w	r3, r7, #8
 8001112:	2205      	movs	r2, #5
 8001114:	4619      	mov	r1, r3
 8001116:	2010      	movs	r0, #16
 8001118:	f7ff ff2a 	bl	8000f70 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 800111c:	2100      	movs	r1, #0
 800111e:	2011      	movs	r0, #17
 8001120:	f7ff ff04 	bl	8000f2c <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 8001124:	2100      	movs	r1, #0
 8001126:	2012      	movs	r0, #18
 8001128:	f7ff ff00 	bl	8000f2c <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 800112c:	2100      	movs	r1, #0
 800112e:	2013      	movs	r0, #19
 8001130:	f7ff fefc 	bl	8000f2c <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 8001134:	2100      	movs	r1, #0
 8001136:	2014      	movs	r0, #20
 8001138:	f7ff fef8 	bl	8000f2c <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 800113c:	2100      	movs	r1, #0
 800113e:	2015      	movs	r0, #21
 8001140:	f7ff fef4 	bl	8000f2c <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 8001144:	2100      	movs	r1, #0
 8001146:	2016      	movs	r0, #22
 8001148:	f7ff fef0 	bl	8000f2c <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 800114c:	2111      	movs	r1, #17
 800114e:	2017      	movs	r0, #23
 8001150:	f7ff feec 	bl	8000f2c <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 8001154:	2100      	movs	r1, #0
 8001156:	201c      	movs	r0, #28
 8001158:	f7ff fee8 	bl	8000f2c <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 800115c:	2100      	movs	r1, #0
 800115e:	201d      	movs	r0, #29
 8001160:	f7ff fee4 	bl	8000f2c <nrf24_WriteReg>
}
 8001164:	bf00      	nop
 8001166:	3720      	adds	r7, #32
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	08005a64 	.word	0x08005a64
 8001170:	08005a6c 	.word	0x08005a6c

08001174 <NRF24_Init>:

void NRF24_Init (void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 8001178:	f7ff fecc 	bl	8000f14 <CE_Disable>


	// reset everything
	nrf24_reset (0);
 800117c:	2000      	movs	r0, #0
 800117e:	f7ff ff53 	bl	8001028 <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 8001182:	2100      	movs	r1, #0
 8001184:	2000      	movs	r0, #0
 8001186:	f7ff fed1 	bl	8000f2c <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);  // No Auto ACK
 800118a:	2100      	movs	r1, #0
 800118c:	2001      	movs	r0, #1
 800118e:	f7ff fecd 	bl	8000f2c <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 8001192:	2100      	movs	r1, #0
 8001194:	2002      	movs	r0, #2
 8001196:	f7ff fec9 	bl	8000f2c <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 800119a:	2103      	movs	r1, #3
 800119c:	2003      	movs	r0, #3
 800119e:	f7ff fec5 	bl	8000f2c <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0);   // No retransmission
 80011a2:	2100      	movs	r1, #0
 80011a4:	2004      	movs	r0, #4
 80011a6:	f7ff fec1 	bl	8000f2c <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 80011aa:	2100      	movs	r1, #0
 80011ac:	2005      	movs	r0, #5
 80011ae:	f7ff febd 	bl	8000f2c <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x0E);   // Power= 0db, data rate = 2Mbps
 80011b2:	210e      	movs	r1, #14
 80011b4:	2006      	movs	r0, #6
 80011b6:	f7ff feb9 	bl	8000f2c <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 80011ba:	f7ff fe9f 	bl	8000efc <CE_Enable>

}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
	...

080011c4 <NRF24_Transmit>:
	CE_Enable();
}

// transmit the data
uint8_t NRF24_Transmit (uint8_t *data)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 80011cc:	2300      	movs	r3, #0
 80011ce:	73bb      	strb	r3, [r7, #14]

	// select the device
	CS_Select();
 80011d0:	f7ff fe7c 	bl	8000ecc <CS_Select>

	// payload command
	cmdtosend = W_TX_PAYLOAD;
 80011d4:	23a0      	movs	r3, #160	; 0xa0
 80011d6:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 80011d8:	f107 010e 	add.w	r1, r7, #14
 80011dc:	2364      	movs	r3, #100	; 0x64
 80011de:	2201      	movs	r2, #1
 80011e0:	4816      	ldr	r0, [pc, #88]	; (800123c <NRF24_Transmit+0x78>)
 80011e2:	f002 fc5c 	bl	8003a9e <HAL_SPI_Transmit>

	// send the payload of size 32 bytes
	HAL_SPI_Transmit(NRF24_SPI, data, 32, 1000);
 80011e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ea:	2220      	movs	r2, #32
 80011ec:	6879      	ldr	r1, [r7, #4]
 80011ee:	4813      	ldr	r0, [pc, #76]	; (800123c <NRF24_Transmit+0x78>)
 80011f0:	f002 fc55 	bl	8003a9e <HAL_SPI_Transmit>

	// Unselect the device
	CS_UnSelect();
 80011f4:	f7ff fe76 	bl	8000ee4 <CS_UnSelect>

	//delay for 1ms
	HAL_Delay(1);
 80011f8:	2001      	movs	r0, #1
 80011fa:	f001 fb6b 	bl	80028d4 <HAL_Delay>

	//read the fifo status register to check if it is empty
	uint8_t fifostatus = nrf24_ReadReg(FIFO_STATUS);
 80011fe:	2017      	movs	r0, #23
 8001200:	f7ff fedc 	bl	8000fbc <nrf24_ReadReg>
 8001204:	4603      	mov	r3, r0
 8001206:	73fb      	strb	r3, [r7, #15]

	// check the fourth bit of FIFO_STATUS to know if the TX fifo is empty
	if ((fifostatus&(1<<4)) && (!(fifostatus&(1<<3))))	//if the fourth bit is set and the device not removed
 8001208:	7bfb      	ldrb	r3, [r7, #15]
 800120a:	f003 0310 	and.w	r3, r3, #16
 800120e:	2b00      	cmp	r3, #0
 8001210:	d00f      	beq.n	8001232 <NRF24_Transmit+0x6e>
 8001212:	7bfb      	ldrb	r3, [r7, #15]
 8001214:	f003 0308 	and.w	r3, r3, #8
 8001218:	2b00      	cmp	r3, #0
 800121a:	d10a      	bne.n	8001232 <NRF24_Transmit+0x6e>
	{
		//clear the fifo
		cmdtosend = FLUSH_TX;
 800121c:	23e1      	movs	r3, #225	; 0xe1
 800121e:	73bb      	strb	r3, [r7, #14]
		nrfsendCmd(cmdtosend);
 8001220:	7bbb      	ldrb	r3, [r7, #14]
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff feea 	bl	8000ffc <nrfsendCmd>

		// reset FIFO_STATUS
		nrf24_reset (FIFO_STATUS);
 8001228:	2017      	movs	r0, #23
 800122a:	f7ff fefd 	bl	8001028 <nrf24_reset>

		//successful transmission
		return 1;
 800122e:	2301      	movs	r3, #1
 8001230:	e000      	b.n	8001234 <NRF24_Transmit+0x70>
	}
	return 0;
 8001232:	2300      	movs	r3, #0
}
 8001234:	4618      	mov	r0, r3
 8001236:	3710      	adds	r7, #16
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	200000fc 	.word	0x200000fc

08001240 <NRF24_RxMode>:


void NRF24_RxMode (uint8_t *Address, uint8_t channel)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	460b      	mov	r3, r1
 800124a:	70fb      	strb	r3, [r7, #3]
	// disable the chip before configuring the device
	CE_Disable();
 800124c:	f7ff fe62 	bl	8000f14 <CE_Disable>

	nrf24_reset (STATUS);
 8001250:	2007      	movs	r0, #7
 8001252:	f7ff fee9 	bl	8001028 <nrf24_reset>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 8001256:	78fb      	ldrb	r3, [r7, #3]
 8001258:	4619      	mov	r1, r3
 800125a:	2005      	movs	r0, #5
 800125c:	f7ff fe66 	bl	8000f2c <nrf24_WriteReg>

	// select data pipe 1 without disabling remaining pipes
	uint8_t en_rxaddr = nrf24_ReadReg(EN_RXADDR);
 8001260:	2002      	movs	r0, #2
 8001262:	f7ff feab 	bl	8000fbc <nrf24_ReadReg>
 8001266:	4603      	mov	r3, r0
 8001268:	73fb      	strb	r3, [r7, #15]
	en_rxaddr = en_rxaddr | (1<<2);	//select data pipe 2
 800126a:	7bfb      	ldrb	r3, [r7, #15]
 800126c:	f043 0304 	orr.w	r3, r3, #4
 8001270:	73fb      	strb	r3, [r7, #15]
	/*en_rxaddr = en_rxaddr | (1<<1);	//select data pipe 1*/
	nrf24_WriteReg (EN_RXADDR, en_rxaddr);	//write the RX address
 8001272:	7bfb      	ldrb	r3, [r7, #15]
 8001274:	4619      	mov	r1, r3
 8001276:	2002      	movs	r0, #2
 8001278:	f7ff fe58 	bl	8000f2c <nrf24_WriteReg>
	 * Pipe 1 ADDR = 0xAABBCCDD11
	 * Pipe 2 ADDR = 0xAABBCCDD22
	 * Pipe 3 ADDR = 0xAABBCCDD33
	 *
	 */
	nrf24_WriteRegMulti(RX_ADDR_P1, Address, 5);  // Write the Pipe1 address
 800127c:	2205      	movs	r2, #5
 800127e:	6879      	ldr	r1, [r7, #4]
 8001280:	200b      	movs	r0, #11
 8001282:	f7ff fe75 	bl	8000f70 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xEE);  // Write the Pipe2 LSB address
 8001286:	21ee      	movs	r1, #238	; 0xee
 8001288:	200c      	movs	r0, #12
 800128a:	f7ff fe4f 	bl	8000f2c <nrf24_WriteReg>

	nrf24_WriteReg (RX_PW_P2, 32);   // 32 bit payload size for pipe 2
 800128e:	2120      	movs	r1, #32
 8001290:	2013      	movs	r0, #19
 8001292:	f7ff fe4b 	bl	8000f2c <nrf24_WriteReg>

	// power up the device in Rx mode
	uint8_t config = nrf24_ReadReg(CONFIG);
 8001296:	2000      	movs	r0, #0
 8001298:	f7ff fe90 	bl	8000fbc <nrf24_ReadReg>
 800129c:	4603      	mov	r3, r0
 800129e:	73bb      	strb	r3, [r7, #14]
	config = config | (1<<1) | (1<<0);
 80012a0:	7bbb      	ldrb	r3, [r7, #14]
 80012a2:	f043 0303 	orr.w	r3, r3, #3
 80012a6:	73bb      	strb	r3, [r7, #14]
	nrf24_WriteReg (CONFIG, config);
 80012a8:	7bbb      	ldrb	r3, [r7, #14]
 80012aa:	4619      	mov	r1, r3
 80012ac:	2000      	movs	r0, #0
 80012ae:	f7ff fe3d 	bl	8000f2c <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 80012b2:	f7ff fe23 	bl	8000efc <CE_Enable>
}
 80012b6:	bf00      	nop
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
	...

080012c0 <Parking_Right>:

state_t STATUS_Parking = FIRST_OBJECT_DETECTED;
state_t STATUS2_Parking=FIRST_OBJECT_DETECTED;

void Parking_Right(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
	switch(STATUS_Parking)/*LEFT SENSOR*/
 80012c4:	4b2c      	ldr	r3, [pc, #176]	; (8001378 <Parking_Right+0xb8>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	3b01      	subs	r3, #1
 80012ca:	2b03      	cmp	r3, #3
 80012cc:	d848      	bhi.n	8001360 <Parking_Right+0xa0>
 80012ce:	a201      	add	r2, pc, #4	; (adr r2, 80012d4 <Parking_Right+0x14>)
 80012d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012d4:	080012e5 	.word	0x080012e5
 80012d8:	080012fb 	.word	0x080012fb
 80012dc:	08001311 	.word	0x08001311
 80012e0:	08001327 	.word	0x08001327
	{
	case FIRST_OBJECT_DETECTED:
		if(Right_Distance>30)
 80012e4:	4b25      	ldr	r3, [pc, #148]	; (800137c <Parking_Right+0xbc>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b1e      	cmp	r3, #30
 80012ea:	d93b      	bls.n	8001364 <Parking_Right+0xa4>
		{
			object1detected=0;
 80012ec:	4b24      	ldr	r3, [pc, #144]	; (8001380 <Parking_Right+0xc0>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
			STATUS_Parking = WAIT_FOR_CLEAR;
 80012f2:	4b21      	ldr	r3, [pc, #132]	; (8001378 <Parking_Right+0xb8>)
 80012f4:	2202      	movs	r2, #2
 80012f6:	701a      	strb	r2, [r3, #0]
		}
		break;
 80012f8:	e034      	b.n	8001364 <Parking_Right+0xa4>

	case WAIT_FOR_CLEAR:
		if(Right_Distance<=30)
 80012fa:	4b20      	ldr	r3, [pc, #128]	; (800137c <Parking_Right+0xbc>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	2b1e      	cmp	r3, #30
 8001300:	d832      	bhi.n	8001368 <Parking_Right+0xa8>
		{
			object2detected=1;
 8001302:	4b20      	ldr	r3, [pc, #128]	; (8001384 <Parking_Right+0xc4>)
 8001304:	2201      	movs	r2, #1
 8001306:	601a      	str	r2, [r3, #0]
			STATUS_Parking = SECOND_OBJECT_DETECTED;
 8001308:	4b1b      	ldr	r3, [pc, #108]	; (8001378 <Parking_Right+0xb8>)
 800130a:	2203      	movs	r2, #3
 800130c:	701a      	strb	r2, [r3, #0]
		}
		break;
 800130e:	e02b      	b.n	8001368 <Parking_Right+0xa8>

	case SECOND_OBJECT_DETECTED:
		if(Right_Distance>30)
 8001310:	4b1a      	ldr	r3, [pc, #104]	; (800137c <Parking_Right+0xbc>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	2b1e      	cmp	r3, #30
 8001316:	d929      	bls.n	800136c <Parking_Right+0xac>
		{
			object2detected=0;
 8001318:	4b1a      	ldr	r3, [pc, #104]	; (8001384 <Parking_Right+0xc4>)
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]

			STATUS_Parking = ACTION_TRIGGERED;
 800131e:	4b16      	ldr	r3, [pc, #88]	; (8001378 <Parking_Right+0xb8>)
 8001320:	2204      	movs	r2, #4
 8001322:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001324:	e022      	b.n	800136c <Parking_Right+0xac>
	case ACTION_TRIGGERED:
		NO_SPEED();
 8001326:	f7ff fdb1 	bl	8000e8c <NO_SPEED>
		Stop_Moving();
 800132a:	f7ff fd69 	bl	8000e00 <Stop_Moving>
		HAL_Delay(10);
 800132e:	200a      	movs	r0, #10
 8001330:	f001 fad0 	bl	80028d4 <HAL_Delay>
		QUARTER_SPEED();
 8001334:	f7ff fd98 	bl	8000e68 <QUARTER_SPEED>
		Right_Parking();
 8001338:	f000 f900 	bl	800153c <Right_Parking>
		HAL_UART_Transmit(&huart6, (uint8_t*)parkingMode, strlen(parkingMode), HAL_MAX_DELAY);
 800133c:	4812      	ldr	r0, [pc, #72]	; (8001388 <Parking_Right+0xc8>)
 800133e:	f7fe ff4b 	bl	80001d8 <strlen>
 8001342:	4603      	mov	r3, r0
 8001344:	b29a      	uxth	r2, r3
 8001346:	f04f 33ff 	mov.w	r3, #4294967295
 800134a:	490f      	ldr	r1, [pc, #60]	; (8001388 <Parking_Right+0xc8>)
 800134c:	480f      	ldr	r0, [pc, #60]	; (800138c <Parking_Right+0xcc>)
 800134e:	f003 ffdc 	bl	800530a <HAL_UART_Transmit>
		HAL_Delay(1000);
 8001352:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001356:	f001 fabd 	bl	80028d4 <HAL_Delay>
		STATUS_Parking = IDEL;
 800135a:	4b07      	ldr	r3, [pc, #28]	; (8001378 <Parking_Right+0xb8>)
 800135c:	2200      	movs	r2, #0
 800135e:	701a      	strb	r2, [r3, #0]
	default:break;
 8001360:	bf00      	nop
 8001362:	e004      	b.n	800136e <Parking_Right+0xae>
		break;
 8001364:	bf00      	nop
 8001366:	e002      	b.n	800136e <Parking_Right+0xae>
		break;
 8001368:	bf00      	nop
 800136a:	e000      	b.n	800136e <Parking_Right+0xae>
		break;
 800136c:	bf00      	nop
	break;
	}
	HAL_Delay(10);
 800136e:	200a      	movs	r0, #10
 8001370:	f001 fab0 	bl	80028d4 <HAL_Delay>
}
 8001374:	bf00      	nop
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20000030 	.word	0x20000030
 800137c:	2000007e 	.word	0x2000007e
 8001380:	200000a4 	.word	0x200000a4
 8001384:	20000078 	.word	0x20000078
 8001388:	20000018 	.word	0x20000018
 800138c:	200001e4 	.word	0x200001e4

08001390 <Parking_Left>:

void Parking_Left(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
	switch(STATUS_Parking)/*LEFT SENSOR*/
 8001394:	4b34      	ldr	r3, [pc, #208]	; (8001468 <Parking_Left+0xd8>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b04      	cmp	r3, #4
 800139a:	d856      	bhi.n	800144a <Parking_Left+0xba>
 800139c:	a201      	add	r2, pc, #4	; (adr r2, 80013a4 <Parking_Left+0x14>)
 800139e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013a2:	bf00      	nop
 80013a4:	080013b9 	.word	0x080013b9
 80013a8:	080013cf 	.word	0x080013cf
 80013ac:	080013e5 	.word	0x080013e5
 80013b0:	080013fb 	.word	0x080013fb
 80013b4:	08001411 	.word	0x08001411
	{
	case IDEL:
		if(Left_Distance<=30)
 80013b8:	4b2c      	ldr	r3, [pc, #176]	; (800146c <Parking_Left+0xdc>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b1e      	cmp	r3, #30
 80013be:	d846      	bhi.n	800144e <Parking_Left+0xbe>
		{
			object1detected=1;
 80013c0:	4b2b      	ldr	r3, [pc, #172]	; (8001470 <Parking_Left+0xe0>)
 80013c2:	2201      	movs	r2, #1
 80013c4:	601a      	str	r2, [r3, #0]
			STATUS_Parking = FIRST_OBJECT_DETECTED;
 80013c6:	4b28      	ldr	r3, [pc, #160]	; (8001468 <Parking_Left+0xd8>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	701a      	strb	r2, [r3, #0]
		}
		break;
 80013cc:	e03f      	b.n	800144e <Parking_Left+0xbe>
	case FIRST_OBJECT_DETECTED:
		if(Left_Distance>30)
 80013ce:	4b27      	ldr	r3, [pc, #156]	; (800146c <Parking_Left+0xdc>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	2b1e      	cmp	r3, #30
 80013d4:	d93d      	bls.n	8001452 <Parking_Left+0xc2>
		{
			object1detected=0;
 80013d6:	4b26      	ldr	r3, [pc, #152]	; (8001470 <Parking_Left+0xe0>)
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
			STATUS_Parking = WAIT_FOR_CLEAR;
 80013dc:	4b22      	ldr	r3, [pc, #136]	; (8001468 <Parking_Left+0xd8>)
 80013de:	2202      	movs	r2, #2
 80013e0:	701a      	strb	r2, [r3, #0]
		}
		break;
 80013e2:	e036      	b.n	8001452 <Parking_Left+0xc2>

	case WAIT_FOR_CLEAR:
		if(Left_Distance<=30)
 80013e4:	4b21      	ldr	r3, [pc, #132]	; (800146c <Parking_Left+0xdc>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2b1e      	cmp	r3, #30
 80013ea:	d834      	bhi.n	8001456 <Parking_Left+0xc6>
		{
			object2detected=1;
 80013ec:	4b21      	ldr	r3, [pc, #132]	; (8001474 <Parking_Left+0xe4>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	601a      	str	r2, [r3, #0]
			STATUS_Parking = SECOND_OBJECT_DETECTED;
 80013f2:	4b1d      	ldr	r3, [pc, #116]	; (8001468 <Parking_Left+0xd8>)
 80013f4:	2203      	movs	r2, #3
 80013f6:	701a      	strb	r2, [r3, #0]
		}
		break;
 80013f8:	e02d      	b.n	8001456 <Parking_Left+0xc6>

	case SECOND_OBJECT_DETECTED:
		if(Left_Distance>30)
 80013fa:	4b1c      	ldr	r3, [pc, #112]	; (800146c <Parking_Left+0xdc>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2b1e      	cmp	r3, #30
 8001400:	d92b      	bls.n	800145a <Parking_Left+0xca>
		{
			object2detected=0;
 8001402:	4b1c      	ldr	r3, [pc, #112]	; (8001474 <Parking_Left+0xe4>)
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]

			STATUS_Parking = ACTION_TRIGGERED;
 8001408:	4b17      	ldr	r3, [pc, #92]	; (8001468 <Parking_Left+0xd8>)
 800140a:	2204      	movs	r2, #4
 800140c:	701a      	strb	r2, [r3, #0]
		}
		break;
 800140e:	e024      	b.n	800145a <Parking_Left+0xca>
	case ACTION_TRIGGERED:
		NO_SPEED();
 8001410:	f7ff fd3c 	bl	8000e8c <NO_SPEED>
		Stop_Moving();
 8001414:	f7ff fcf4 	bl	8000e00 <Stop_Moving>
		HAL_Delay(10);
 8001418:	200a      	movs	r0, #10
 800141a:	f001 fa5b 	bl	80028d4 <HAL_Delay>
		QUARTER_SPEED();
 800141e:	f7ff fd23 	bl	8000e68 <QUARTER_SPEED>
		Left_Parking();
 8001422:	f000 f8df 	bl	80015e4 <Left_Parking>
		HAL_UART_Transmit(&huart6, (uint8_t*)parkingMode, strlen(parkingMode), HAL_MAX_DELAY);
 8001426:	4814      	ldr	r0, [pc, #80]	; (8001478 <Parking_Left+0xe8>)
 8001428:	f7fe fed6 	bl	80001d8 <strlen>
 800142c:	4603      	mov	r3, r0
 800142e:	b29a      	uxth	r2, r3
 8001430:	f04f 33ff 	mov.w	r3, #4294967295
 8001434:	4910      	ldr	r1, [pc, #64]	; (8001478 <Parking_Left+0xe8>)
 8001436:	4811      	ldr	r0, [pc, #68]	; (800147c <Parking_Left+0xec>)
 8001438:	f003 ff67 	bl	800530a <HAL_UART_Transmit>
		HAL_Delay(1000);
 800143c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001440:	f001 fa48 	bl	80028d4 <HAL_Delay>
		STATUS_Parking = IDEL;
 8001444:	4b08      	ldr	r3, [pc, #32]	; (8001468 <Parking_Left+0xd8>)
 8001446:	2200      	movs	r2, #0
 8001448:	701a      	strb	r2, [r3, #0]
	default:break;
 800144a:	bf00      	nop
 800144c:	e006      	b.n	800145c <Parking_Left+0xcc>
		break;
 800144e:	bf00      	nop
 8001450:	e004      	b.n	800145c <Parking_Left+0xcc>
		break;
 8001452:	bf00      	nop
 8001454:	e002      	b.n	800145c <Parking_Left+0xcc>
		break;
 8001456:	bf00      	nop
 8001458:	e000      	b.n	800145c <Parking_Left+0xcc>
		break;
 800145a:	bf00      	nop
	break;
	}
	HAL_Delay(10);
 800145c:	200a      	movs	r0, #10
 800145e:	f001 fa39 	bl	80028d4 <HAL_Delay>
}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000030 	.word	0x20000030
 800146c:	2000007f 	.word	0x2000007f
 8001470:	200000a4 	.word	0x200000a4
 8001474:	20000078 	.word	0x20000078
 8001478:	20000018 	.word	0x20000018
 800147c:	200001e4 	.word	0x200001e4

08001480 <ACCIDENT>:

void ACCIDENT (void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
	NO_SPEED();
 8001484:	f7ff fd02 	bl	8000e8c <NO_SPEED>
	Stop_Moving();
 8001488:	f7ff fcba 	bl	8000e00 <Stop_Moving>
	NRF24_Transmit(Accident);
 800148c:	4802      	ldr	r0, [pc, #8]	; (8001498 <ACCIDENT+0x18>)
 800148e:	f7ff fe99 	bl	80011c4 <NRF24_Transmit>
	//HAL_UART_Transmit(&huart6, (uint8_t*)AccidentMode, strlen(AccidentMode), HAL_MAX_DELAY);
	//HAL_Delay(1000);
}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	2000003c 	.word	0x2000003c

0800149c <Right_BLIND_MODE>:

void Right_BLIND_MODE (void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0

	NRF24_Transmit(Blind);
 80014a0:	4810      	ldr	r0, [pc, #64]	; (80014e4 <Right_BLIND_MODE+0x48>)
 80014a2:	f7ff fe8f 	bl	80011c4 <NRF24_Transmit>
	QUARTER_SPEED();
 80014a6:	f7ff fcdf 	bl	8000e68 <QUARTER_SPEED>
	Right_Moving();
 80014aa:	f7ff fc87 	bl	8000dbc <Right_Moving>
	HAL_Delay(500);
 80014ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014b2:	f001 fa0f 	bl	80028d4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,GPIO_PIN_SET);
 80014b6:	2201      	movs	r2, #1
 80014b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014bc:	480a      	ldr	r0, [pc, #40]	; (80014e8 <Right_BLIND_MODE+0x4c>)
 80014be:	f001 fcaf 	bl	8002e20 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80014c2:	20c8      	movs	r0, #200	; 0xc8
 80014c4:	f001 fa06 	bl	80028d4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,GPIO_PIN_RESET);
 80014c8:	2200      	movs	r2, #0
 80014ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014ce:	4806      	ldr	r0, [pc, #24]	; (80014e8 <Right_BLIND_MODE+0x4c>)
 80014d0:	f001 fca6 	bl	8002e20 <HAL_GPIO_WritePin>
	Forward_Moving();
 80014d4:	f7ff fc2e 	bl	8000d34 <Forward_Moving>
	HAL_Delay(2000);
 80014d8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80014dc:	f001 f9fa 	bl	80028d4 <HAL_Delay>
	/*	HAL_UART_Transmit(&huart6, (uint8_t*)BlindMode, strlen(BlindMode), HAL_MAX_DELAY);
		HAL_Delay(1000);*/

}
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	20000048 	.word	0x20000048
 80014e8:	40020400 	.word	0x40020400

080014ec <Left_BLIND_MODE>:

void Left_BLIND_MODE (void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0

	NRF24_Transmit(Blind);
 80014f0:	4810      	ldr	r0, [pc, #64]	; (8001534 <Left_BLIND_MODE+0x48>)
 80014f2:	f7ff fe67 	bl	80011c4 <NRF24_Transmit>
	QUARTER_SPEED();
 80014f6:	f7ff fcb7 	bl	8000e68 <QUARTER_SPEED>
	Left_Moving();
 80014fa:	f7ff fc3d 	bl	8000d78 <Left_Moving>
	HAL_Delay(500);
 80014fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001502:	f001 f9e7 	bl	80028d4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,GPIO_PIN_SET);
 8001506:	2201      	movs	r2, #1
 8001508:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800150c:	480a      	ldr	r0, [pc, #40]	; (8001538 <Left_BLIND_MODE+0x4c>)
 800150e:	f001 fc87 	bl	8002e20 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001512:	20c8      	movs	r0, #200	; 0xc8
 8001514:	f001 f9de 	bl	80028d4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,GPIO_PIN_RESET);
 8001518:	2200      	movs	r2, #0
 800151a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800151e:	4806      	ldr	r0, [pc, #24]	; (8001538 <Left_BLIND_MODE+0x4c>)
 8001520:	f001 fc7e 	bl	8002e20 <HAL_GPIO_WritePin>
	Forward_Moving();
 8001524:	f7ff fc06 	bl	8000d34 <Forward_Moving>
	HAL_Delay(2000);
 8001528:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800152c:	f001 f9d2 	bl	80028d4 <HAL_Delay>
	/*	HAL_UART_Transmit(&huart6, (uint8_t*)BlindMode, strlen(BlindMode), HAL_MAX_DELAY);
		HAL_Delay(1000);*/

}
 8001530:	bf00      	nop
 8001532:	bd80      	pop	{r7, pc}
 8001534:	20000048 	.word	0x20000048
 8001538:	40020400 	.word	0x40020400

0800153c <Right_Parking>:

void Right_Parking(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
	 * pin C15 left_forward
	 * pin A7 right_backword
	 * pin B13 left_backword
	 */
	/*Backward Left*/
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7,GPIO_PIN_SET);
 8001540:	2201      	movs	r2, #1
 8001542:	2180      	movs	r1, #128	; 0x80
 8001544:	4824      	ldr	r0, [pc, #144]	; (80015d8 <Right_Parking+0x9c>)
 8001546:	f001 fc6b 	bl	8002e20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,GPIO_PIN_SET);
 800154a:	2201      	movs	r2, #1
 800154c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001550:	4822      	ldr	r0, [pc, #136]	; (80015dc <Right_Parking+0xa0>)
 8001552:	f001 fc65 	bl	8002e20 <HAL_GPIO_WritePin>
	HAL_Delay(1500);
 8001556:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800155a:	f001 f9bb 	bl	80028d4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14,GPIO_PIN_RESET);
 800155e:	2200      	movs	r2, #0
 8001560:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001564:	481e      	ldr	r0, [pc, #120]	; (80015e0 <Right_Parking+0xa4>)
 8001566:	f001 fc5b 	bl	8002e20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15,GPIO_PIN_RESET);
 800156a:	2200      	movs	r2, #0
 800156c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001570:	481b      	ldr	r0, [pc, #108]	; (80015e0 <Right_Parking+0xa4>)
 8001572:	f001 fc55 	bl	8002e20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7,GPIO_PIN_RESET);
 8001576:	2200      	movs	r2, #0
 8001578:	2180      	movs	r1, #128	; 0x80
 800157a:	4817      	ldr	r0, [pc, #92]	; (80015d8 <Right_Parking+0x9c>)
 800157c:	f001 fc50 	bl	8002e20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,GPIO_PIN_SET);
 8001580:	2201      	movs	r2, #1
 8001582:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001586:	4815      	ldr	r0, [pc, #84]	; (80015dc <Right_Parking+0xa0>)
 8001588:	f001 fc4a 	bl	8002e20 <HAL_GPIO_WritePin>
	HAL_Delay(1300);
 800158c:	f240 5014 	movw	r0, #1300	; 0x514
 8001590:	f001 f9a0 	bl	80028d4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,GPIO_PIN_RESET);
 8001594:	2200      	movs	r2, #0
 8001596:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800159a:	4810      	ldr	r0, [pc, #64]	; (80015dc <Right_Parking+0xa0>)
 800159c:	f001 fc40 	bl	8002e20 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80015a0:	200a      	movs	r0, #10
 80015a2:	f001 f997 	bl	80028d4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7,GPIO_PIN_SET);
 80015a6:	2201      	movs	r2, #1
 80015a8:	2180      	movs	r1, #128	; 0x80
 80015aa:	480b      	ldr	r0, [pc, #44]	; (80015d8 <Right_Parking+0x9c>)
 80015ac:	f001 fc38 	bl	8002e20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,GPIO_PIN_SET);
 80015b0:	2201      	movs	r2, #1
 80015b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015b6:	4809      	ldr	r0, [pc, #36]	; (80015dc <Right_Parking+0xa0>)
 80015b8:	f001 fc32 	bl	8002e20 <HAL_GPIO_WritePin>
	HAL_Delay(600);
 80015bc:	f44f 7016 	mov.w	r0, #600	; 0x258
 80015c0:	f001 f988 	bl	80028d4 <HAL_Delay>
	NO_SPEED();
 80015c4:	f7ff fc62 	bl	8000e8c <NO_SPEED>
	Stop_Moving();
 80015c8:	f7ff fc1a 	bl	8000e00 <Stop_Moving>
	HAL_Delay(5);
 80015cc:	2005      	movs	r0, #5
 80015ce:	f001 f981 	bl	80028d4 <HAL_Delay>

	/*Backward*/

}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40020000 	.word	0x40020000
 80015dc:	40020400 	.word	0x40020400
 80015e0:	40020800 	.word	0x40020800

080015e4 <Left_Parking>:

void Left_Parking(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
	 * pin C15 left_forward
	 * pin A7 right_backword
	 * pin B13 left_backword
	 */
	/*Backward Left*/
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7,GPIO_PIN_SET);
 80015e8:	2201      	movs	r2, #1
 80015ea:	2180      	movs	r1, #128	; 0x80
 80015ec:	4824      	ldr	r0, [pc, #144]	; (8001680 <Left_Parking+0x9c>)
 80015ee:	f001 fc17 	bl	8002e20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,GPIO_PIN_SET);
 80015f2:	2201      	movs	r2, #1
 80015f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015f8:	4822      	ldr	r0, [pc, #136]	; (8001684 <Left_Parking+0xa0>)
 80015fa:	f001 fc11 	bl	8002e20 <HAL_GPIO_WritePin>
	HAL_Delay(1500);
 80015fe:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001602:	f001 f967 	bl	80028d4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14,GPIO_PIN_RESET);
 8001606:	2200      	movs	r2, #0
 8001608:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800160c:	481e      	ldr	r0, [pc, #120]	; (8001688 <Left_Parking+0xa4>)
 800160e:	f001 fc07 	bl	8002e20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15,GPIO_PIN_RESET);
 8001612:	2200      	movs	r2, #0
 8001614:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001618:	481b      	ldr	r0, [pc, #108]	; (8001688 <Left_Parking+0xa4>)
 800161a:	f001 fc01 	bl	8002e20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13,GPIO_PIN_RESET);
 800161e:	2200      	movs	r2, #0
 8001620:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001624:	4816      	ldr	r0, [pc, #88]	; (8001680 <Left_Parking+0x9c>)
 8001626:	f001 fbfb 	bl	8002e20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,GPIO_PIN_SET);
 800162a:	2201      	movs	r2, #1
 800162c:	2180      	movs	r1, #128	; 0x80
 800162e:	4815      	ldr	r0, [pc, #84]	; (8001684 <Left_Parking+0xa0>)
 8001630:	f001 fbf6 	bl	8002e20 <HAL_GPIO_WritePin>
	HAL_Delay(1300);
 8001634:	f240 5014 	movw	r0, #1300	; 0x514
 8001638:	f001 f94c 	bl	80028d4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,GPIO_PIN_RESET);
 800163c:	2200      	movs	r2, #0
 800163e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001642:	4810      	ldr	r0, [pc, #64]	; (8001684 <Left_Parking+0xa0>)
 8001644:	f001 fbec 	bl	8002e20 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001648:	200a      	movs	r0, #10
 800164a:	f001 f943 	bl	80028d4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7,GPIO_PIN_SET);
 800164e:	2201      	movs	r2, #1
 8001650:	2180      	movs	r1, #128	; 0x80
 8001652:	480b      	ldr	r0, [pc, #44]	; (8001680 <Left_Parking+0x9c>)
 8001654:	f001 fbe4 	bl	8002e20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,GPIO_PIN_SET);
 8001658:	2201      	movs	r2, #1
 800165a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800165e:	4809      	ldr	r0, [pc, #36]	; (8001684 <Left_Parking+0xa0>)
 8001660:	f001 fbde 	bl	8002e20 <HAL_GPIO_WritePin>
	HAL_Delay(600);
 8001664:	f44f 7016 	mov.w	r0, #600	; 0x258
 8001668:	f001 f934 	bl	80028d4 <HAL_Delay>
	NO_SPEED();
 800166c:	f7ff fc0e 	bl	8000e8c <NO_SPEED>
	Stop_Moving();
 8001670:	f7ff fbc6 	bl	8000e00 <Stop_Moving>
	HAL_Delay(5);
 8001674:	2005      	movs	r0, #5
 8001676:	f001 f92d 	bl	80028d4 <HAL_Delay>
	/*Backward*/
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40020000 	.word	0x40020000
 8001684:	40020400 	.word	0x40020400
 8001688:	40020800 	.word	0x40020800

0800168c <delay>:

extern TIM_HandleTypeDef htim3;

//microsecond delay function
void delay(uint8_t time)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001696:	4b09      	ldr	r3, [pc, #36]	; (80016bc <delay+0x30>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2200      	movs	r2, #0
 800169c:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim3) < time);
 800169e:	bf00      	nop
 80016a0:	4b06      	ldr	r3, [pc, #24]	; (80016bc <delay+0x30>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016a6:	79fb      	ldrb	r3, [r7, #7]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d3f9      	bcc.n	80016a0 <delay+0x14>
}
 80016ac:	bf00      	nop
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	2000019c 	.word	0x2000019c

080016c0 <Front_Sensor_Read>:

void Front_Sensor_Read(uint8_t *Front_Distance)
{
 80016c0:	b590      	push	{r4, r7, lr}
 80016c2:	b087      	sub	sp, #28
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
	uint32_t pMillis;
	uint32_t value1 = 0;
 80016c8:	2300      	movs	r3, #0
 80016ca:	617b      	str	r3, [r7, #20]
	uint32_t value2 = 0;
 80016cc:	2300      	movs	r3, #0
 80016ce:	613b      	str	r3, [r7, #16]

	HAL_GPIO_WritePin(Front_Ultrasonic_GPIO_Port, Front_Ultrasonic_Pin, GPIO_PIN_SET); //pull the trig pin high
 80016d0:	2201      	movs	r2, #1
 80016d2:	2101      	movs	r1, #1
 80016d4:	4830      	ldr	r0, [pc, #192]	; (8001798 <Front_Sensor_Read+0xd8>)
 80016d6:	f001 fba3 	bl	8002e20 <HAL_GPIO_WritePin>
	delay(10); //wait for 10us
 80016da:	200a      	movs	r0, #10
 80016dc:	f7ff ffd6 	bl	800168c <delay>
	HAL_GPIO_WritePin(Front_Ultrasonic_GPIO_Port, Front_Ultrasonic_Pin, GPIO_PIN_RESET);	//pull the trig pin low
 80016e0:	2200      	movs	r2, #0
 80016e2:	2101      	movs	r1, #1
 80016e4:	482c      	ldr	r0, [pc, #176]	; (8001798 <Front_Sensor_Read+0xd8>)
 80016e6:	f001 fb9b 	bl	8002e20 <HAL_GPIO_WritePin>

	pMillis = HAL_GetTick(); //used this to avoid infinite while loop (for timeout)
 80016ea:	f001 f8e7 	bl	80028bc <HAL_GetTick>
 80016ee:	60f8      	str	r0, [r7, #12]
	//wait for the echo pin to get high
	while(!(HAL_GPIO_ReadPin(Echo_Port, Echo_Pin)) && (pMillis + 10 > HAL_GetTick()));
 80016f0:	bf00      	nop
 80016f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016f6:	4828      	ldr	r0, [pc, #160]	; (8001798 <Front_Sensor_Read+0xd8>)
 80016f8:	f001 fb7a 	bl	8002df0 <HAL_GPIO_ReadPin>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d107      	bne.n	8001712 <Front_Sensor_Read+0x52>
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	f103 040a 	add.w	r4, r3, #10
 8001708:	f001 f8d8 	bl	80028bc <HAL_GetTick>
 800170c:	4603      	mov	r3, r0
 800170e:	429c      	cmp	r4, r3
 8001710:	d8ef      	bhi.n	80016f2 <Front_Sensor_Read+0x32>
	value1 = __HAL_TIM_GET_COUNTER(&htim3); //save the first reading
 8001712:	4b22      	ldr	r3, [pc, #136]	; (800179c <Front_Sensor_Read+0xdc>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001718:	617b      	str	r3, [r7, #20]

	pMillis = HAL_GetTick(); //used this to avoid infinite while loop (for timeout)
 800171a:	f001 f8cf 	bl	80028bc <HAL_GetTick>
 800171e:	60f8      	str	r0, [r7, #12]
	//wait for the echo pin to get low
	while((HAL_GPIO_ReadPin(Echo_Port, Echo_Pin)) && (pMillis + 50 > HAL_GetTick()));
 8001720:	bf00      	nop
 8001722:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001726:	481c      	ldr	r0, [pc, #112]	; (8001798 <Front_Sensor_Read+0xd8>)
 8001728:	f001 fb62 	bl	8002df0 <HAL_GPIO_ReadPin>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d007      	beq.n	8001742 <Front_Sensor_Read+0x82>
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8001738:	f001 f8c0 	bl	80028bc <HAL_GetTick>
 800173c:	4603      	mov	r3, r0
 800173e:	429c      	cmp	r4, r3
 8001740:	d8ef      	bhi.n	8001722 <Front_Sensor_Read+0x62>
	value2 = __HAL_TIM_GET_COUNTER(&htim3); //save the second reading
 8001742:	4b16      	ldr	r3, [pc, #88]	; (800179c <Front_Sensor_Read+0xdc>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001748:	613b      	str	r3, [r7, #16]

	*Front_Distance = (value2 - value1)*0.034/2;
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	4618      	mov	r0, r3
 8001752:	f7fe fe8b 	bl	800046c <__aeabi_ui2d>
 8001756:	a30e      	add	r3, pc, #56	; (adr r3, 8001790 <Front_Sensor_Read+0xd0>)
 8001758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175c:	f7fe ff00 	bl	8000560 <__aeabi_dmul>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	4610      	mov	r0, r2
 8001766:	4619      	mov	r1, r3
 8001768:	f04f 0200 	mov.w	r2, #0
 800176c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001770:	f7ff f820 	bl	80007b4 <__aeabi_ddiv>
 8001774:	4602      	mov	r2, r0
 8001776:	460b      	mov	r3, r1
 8001778:	4610      	mov	r0, r2
 800177a:	4619      	mov	r1, r3
 800177c:	f7ff f902 	bl	8000984 <__aeabi_d2uiz>
 8001780:	4603      	mov	r3, r0
 8001782:	b2da      	uxtb	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	701a      	strb	r2, [r3, #0]
}
 8001788:	bf00      	nop
 800178a:	371c      	adds	r7, #28
 800178c:	46bd      	mov	sp, r7
 800178e:	bd90      	pop	{r4, r7, pc}
 8001790:	b020c49c 	.word	0xb020c49c
 8001794:	3fa16872 	.word	0x3fa16872
 8001798:	40020000 	.word	0x40020000
 800179c:	2000019c 	.word	0x2000019c

080017a0 <Back_Sensor_Read>:

void Back_Sensor_Read(uint8_t *Back_Distance)
{
 80017a0:	b590      	push	{r4, r7, lr}
 80017a2:	b087      	sub	sp, #28
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
	uint32_t pMillis;
	uint32_t value1 = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]
	uint32_t value2 = 0;
 80017ac:	2300      	movs	r3, #0
 80017ae:	613b      	str	r3, [r7, #16]

	HAL_GPIO_WritePin(Back_Ultrasonic_GPIO_Port, Back_Ultrasonic_Pin, GPIO_PIN_SET); //pull the trig pin high
 80017b0:	2201      	movs	r2, #1
 80017b2:	2102      	movs	r1, #2
 80017b4:	4830      	ldr	r0, [pc, #192]	; (8001878 <Back_Sensor_Read+0xd8>)
 80017b6:	f001 fb33 	bl	8002e20 <HAL_GPIO_WritePin>
	delay(10); //wait for 10us
 80017ba:	200a      	movs	r0, #10
 80017bc:	f7ff ff66 	bl	800168c <delay>
	HAL_GPIO_WritePin(Back_Ultrasonic_GPIO_Port, Back_Ultrasonic_Pin, GPIO_PIN_RESET);	//pull the trig pin low
 80017c0:	2200      	movs	r2, #0
 80017c2:	2102      	movs	r1, #2
 80017c4:	482c      	ldr	r0, [pc, #176]	; (8001878 <Back_Sensor_Read+0xd8>)
 80017c6:	f001 fb2b 	bl	8002e20 <HAL_GPIO_WritePin>

	pMillis = HAL_GetTick(); //used this to avoid infinite while loop (for timeout)
 80017ca:	f001 f877 	bl	80028bc <HAL_GetTick>
 80017ce:	60f8      	str	r0, [r7, #12]
	//wait for the echo pin to get high
	while(!(HAL_GPIO_ReadPin(Echo_Port, Echo_Pin)) && (pMillis + 10 > HAL_GetTick()));
 80017d0:	bf00      	nop
 80017d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017d6:	4828      	ldr	r0, [pc, #160]	; (8001878 <Back_Sensor_Read+0xd8>)
 80017d8:	f001 fb0a 	bl	8002df0 <HAL_GPIO_ReadPin>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d107      	bne.n	80017f2 <Back_Sensor_Read+0x52>
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	f103 040a 	add.w	r4, r3, #10
 80017e8:	f001 f868 	bl	80028bc <HAL_GetTick>
 80017ec:	4603      	mov	r3, r0
 80017ee:	429c      	cmp	r4, r3
 80017f0:	d8ef      	bhi.n	80017d2 <Back_Sensor_Read+0x32>
	value1 = __HAL_TIM_GET_COUNTER(&htim3); //save the first reading
 80017f2:	4b22      	ldr	r3, [pc, #136]	; (800187c <Back_Sensor_Read+0xdc>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f8:	617b      	str	r3, [r7, #20]

	pMillis = HAL_GetTick(); //used this to avoid infinite while loop (for timeout)
 80017fa:	f001 f85f 	bl	80028bc <HAL_GetTick>
 80017fe:	60f8      	str	r0, [r7, #12]
	//wait for the echo pin to get low
	while((HAL_GPIO_ReadPin(Echo_Port, Echo_Pin)) && (pMillis + 50 > HAL_GetTick()));
 8001800:	bf00      	nop
 8001802:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001806:	481c      	ldr	r0, [pc, #112]	; (8001878 <Back_Sensor_Read+0xd8>)
 8001808:	f001 faf2 	bl	8002df0 <HAL_GPIO_ReadPin>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d007      	beq.n	8001822 <Back_Sensor_Read+0x82>
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8001818:	f001 f850 	bl	80028bc <HAL_GetTick>
 800181c:	4603      	mov	r3, r0
 800181e:	429c      	cmp	r4, r3
 8001820:	d8ef      	bhi.n	8001802 <Back_Sensor_Read+0x62>
	value2 = __HAL_TIM_GET_COUNTER(&htim3); //save the second reading
 8001822:	4b16      	ldr	r3, [pc, #88]	; (800187c <Back_Sensor_Read+0xdc>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001828:	613b      	str	r3, [r7, #16]

	*Back_Distance = (value2 - value1)*0.034/2;
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	4618      	mov	r0, r3
 8001832:	f7fe fe1b 	bl	800046c <__aeabi_ui2d>
 8001836:	a30e      	add	r3, pc, #56	; (adr r3, 8001870 <Back_Sensor_Read+0xd0>)
 8001838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183c:	f7fe fe90 	bl	8000560 <__aeabi_dmul>
 8001840:	4602      	mov	r2, r0
 8001842:	460b      	mov	r3, r1
 8001844:	4610      	mov	r0, r2
 8001846:	4619      	mov	r1, r3
 8001848:	f04f 0200 	mov.w	r2, #0
 800184c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001850:	f7fe ffb0 	bl	80007b4 <__aeabi_ddiv>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	4610      	mov	r0, r2
 800185a:	4619      	mov	r1, r3
 800185c:	f7ff f892 	bl	8000984 <__aeabi_d2uiz>
 8001860:	4603      	mov	r3, r0
 8001862:	b2da      	uxtb	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	701a      	strb	r2, [r3, #0]
}
 8001868:	bf00      	nop
 800186a:	371c      	adds	r7, #28
 800186c:	46bd      	mov	sp, r7
 800186e:	bd90      	pop	{r4, r7, pc}
 8001870:	b020c49c 	.word	0xb020c49c
 8001874:	3fa16872 	.word	0x3fa16872
 8001878:	40020000 	.word	0x40020000
 800187c:	2000019c 	.word	0x2000019c

08001880 <Right_Sensor_Read>:

void Right_Sensor_Read(uint8_t *Right_Distance)
{
 8001880:	b590      	push	{r4, r7, lr}
 8001882:	b087      	sub	sp, #28
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
	uint32_t pMillis;
	uint32_t value1 = 0;
 8001888:	2300      	movs	r3, #0
 800188a:	617b      	str	r3, [r7, #20]
	uint32_t value2 = 0;
 800188c:	2300      	movs	r3, #0
 800188e:	613b      	str	r3, [r7, #16]

	HAL_GPIO_WritePin(Right_Ultrasonic_GPIO_Port, Right_Ultrasonic_Pin, GPIO_PIN_SET); //pull the trig pin high
 8001890:	2201      	movs	r2, #1
 8001892:	2104      	movs	r1, #4
 8001894:	4830      	ldr	r0, [pc, #192]	; (8001958 <Right_Sensor_Read+0xd8>)
 8001896:	f001 fac3 	bl	8002e20 <HAL_GPIO_WritePin>
	delay(10); //wait for 10us
 800189a:	200a      	movs	r0, #10
 800189c:	f7ff fef6 	bl	800168c <delay>
	HAL_GPIO_WritePin(Right_Ultrasonic_GPIO_Port, Right_Ultrasonic_Pin, GPIO_PIN_RESET);	//pull the trig pin low
 80018a0:	2200      	movs	r2, #0
 80018a2:	2104      	movs	r1, #4
 80018a4:	482c      	ldr	r0, [pc, #176]	; (8001958 <Right_Sensor_Read+0xd8>)
 80018a6:	f001 fabb 	bl	8002e20 <HAL_GPIO_WritePin>

	pMillis = HAL_GetTick(); //used this to avoid infinite while loop (for timeout)
 80018aa:	f001 f807 	bl	80028bc <HAL_GetTick>
 80018ae:	60f8      	str	r0, [r7, #12]
	//wait for the echo pin to get high
	while(!(HAL_GPIO_ReadPin(Echo_Port, Echo_Pin)) && (pMillis + 10 > HAL_GetTick()));
 80018b0:	bf00      	nop
 80018b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018b6:	4828      	ldr	r0, [pc, #160]	; (8001958 <Right_Sensor_Read+0xd8>)
 80018b8:	f001 fa9a 	bl	8002df0 <HAL_GPIO_ReadPin>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d107      	bne.n	80018d2 <Right_Sensor_Read+0x52>
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	f103 040a 	add.w	r4, r3, #10
 80018c8:	f000 fff8 	bl	80028bc <HAL_GetTick>
 80018cc:	4603      	mov	r3, r0
 80018ce:	429c      	cmp	r4, r3
 80018d0:	d8ef      	bhi.n	80018b2 <Right_Sensor_Read+0x32>
	value1 = __HAL_TIM_GET_COUNTER(&htim3); //save the first reading
 80018d2:	4b22      	ldr	r3, [pc, #136]	; (800195c <Right_Sensor_Read+0xdc>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d8:	617b      	str	r3, [r7, #20]

	pMillis = HAL_GetTick(); //used this to avoid infinite while loop (for timeout)
 80018da:	f000 ffef 	bl	80028bc <HAL_GetTick>
 80018de:	60f8      	str	r0, [r7, #12]
	//wait for the echo pin to get low
	while((HAL_GPIO_ReadPin(Echo_Port, Echo_Pin)) && (pMillis + 50 > HAL_GetTick()));
 80018e0:	bf00      	nop
 80018e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018e6:	481c      	ldr	r0, [pc, #112]	; (8001958 <Right_Sensor_Read+0xd8>)
 80018e8:	f001 fa82 	bl	8002df0 <HAL_GPIO_ReadPin>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d007      	beq.n	8001902 <Right_Sensor_Read+0x82>
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	f103 0432 	add.w	r4, r3, #50	; 0x32
 80018f8:	f000 ffe0 	bl	80028bc <HAL_GetTick>
 80018fc:	4603      	mov	r3, r0
 80018fe:	429c      	cmp	r4, r3
 8001900:	d8ef      	bhi.n	80018e2 <Right_Sensor_Read+0x62>
	value2 = __HAL_TIM_GET_COUNTER(&htim3); //save the second reading
 8001902:	4b16      	ldr	r3, [pc, #88]	; (800195c <Right_Sensor_Read+0xdc>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001908:	613b      	str	r3, [r7, #16]

	*Right_Distance = (value2 - value1)*0.034/2;
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	4618      	mov	r0, r3
 8001912:	f7fe fdab 	bl	800046c <__aeabi_ui2d>
 8001916:	a30e      	add	r3, pc, #56	; (adr r3, 8001950 <Right_Sensor_Read+0xd0>)
 8001918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800191c:	f7fe fe20 	bl	8000560 <__aeabi_dmul>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	4610      	mov	r0, r2
 8001926:	4619      	mov	r1, r3
 8001928:	f04f 0200 	mov.w	r2, #0
 800192c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001930:	f7fe ff40 	bl	80007b4 <__aeabi_ddiv>
 8001934:	4602      	mov	r2, r0
 8001936:	460b      	mov	r3, r1
 8001938:	4610      	mov	r0, r2
 800193a:	4619      	mov	r1, r3
 800193c:	f7ff f822 	bl	8000984 <__aeabi_d2uiz>
 8001940:	4603      	mov	r3, r0
 8001942:	b2da      	uxtb	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	701a      	strb	r2, [r3, #0]
}
 8001948:	bf00      	nop
 800194a:	371c      	adds	r7, #28
 800194c:	46bd      	mov	sp, r7
 800194e:	bd90      	pop	{r4, r7, pc}
 8001950:	b020c49c 	.word	0xb020c49c
 8001954:	3fa16872 	.word	0x3fa16872
 8001958:	40020000 	.word	0x40020000
 800195c:	2000019c 	.word	0x2000019c

08001960 <Left_Sensor_Read>:

void Left_Sensor_Read(uint8_t *Left_Distance)
{
 8001960:	b590      	push	{r4, r7, lr}
 8001962:	b087      	sub	sp, #28
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
	uint32_t pMillis;
	uint32_t value1 = 0;
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]
	uint32_t value2 = 0;
 800196c:	2300      	movs	r3, #0
 800196e:	613b      	str	r3, [r7, #16]

	HAL_GPIO_WritePin(Left_Ultrasonic_GPIO_Port, Left_Ultrasonic_Pin, GPIO_PIN_SET); //pull the trig pin high
 8001970:	2201      	movs	r2, #1
 8001972:	2108      	movs	r1, #8
 8001974:	4830      	ldr	r0, [pc, #192]	; (8001a38 <Left_Sensor_Read+0xd8>)
 8001976:	f001 fa53 	bl	8002e20 <HAL_GPIO_WritePin>
	delay(10); //wait for 10us
 800197a:	200a      	movs	r0, #10
 800197c:	f7ff fe86 	bl	800168c <delay>
	HAL_GPIO_WritePin(Left_Ultrasonic_GPIO_Port, Left_Ultrasonic_Pin, GPIO_PIN_RESET);	//pull the trig pin low
 8001980:	2200      	movs	r2, #0
 8001982:	2108      	movs	r1, #8
 8001984:	482c      	ldr	r0, [pc, #176]	; (8001a38 <Left_Sensor_Read+0xd8>)
 8001986:	f001 fa4b 	bl	8002e20 <HAL_GPIO_WritePin>

	pMillis = HAL_GetTick(); //used this to avoid infinite while loop (for timeout)
 800198a:	f000 ff97 	bl	80028bc <HAL_GetTick>
 800198e:	60f8      	str	r0, [r7, #12]
	//wait for the echo pin to get high
	while(!(HAL_GPIO_ReadPin(Echo_Port, Echo_Pin)) && (pMillis + 10 > HAL_GetTick()));
 8001990:	bf00      	nop
 8001992:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001996:	4828      	ldr	r0, [pc, #160]	; (8001a38 <Left_Sensor_Read+0xd8>)
 8001998:	f001 fa2a 	bl	8002df0 <HAL_GPIO_ReadPin>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d107      	bne.n	80019b2 <Left_Sensor_Read+0x52>
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	f103 040a 	add.w	r4, r3, #10
 80019a8:	f000 ff88 	bl	80028bc <HAL_GetTick>
 80019ac:	4603      	mov	r3, r0
 80019ae:	429c      	cmp	r4, r3
 80019b0:	d8ef      	bhi.n	8001992 <Left_Sensor_Read+0x32>
	value1 = __HAL_TIM_GET_COUNTER(&htim3); //save the first reading
 80019b2:	4b22      	ldr	r3, [pc, #136]	; (8001a3c <Left_Sensor_Read+0xdc>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b8:	617b      	str	r3, [r7, #20]

	pMillis = HAL_GetTick(); //used this to avoid infinite while loop (for timeout)
 80019ba:	f000 ff7f 	bl	80028bc <HAL_GetTick>
 80019be:	60f8      	str	r0, [r7, #12]
	//wait for the echo pin to get low
	while((HAL_GPIO_ReadPin(Echo_Port, Echo_Pin)) && (pMillis + 50 > HAL_GetTick()));
 80019c0:	bf00      	nop
 80019c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019c6:	481c      	ldr	r0, [pc, #112]	; (8001a38 <Left_Sensor_Read+0xd8>)
 80019c8:	f001 fa12 	bl	8002df0 <HAL_GPIO_ReadPin>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d007      	beq.n	80019e2 <Left_Sensor_Read+0x82>
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	f103 0432 	add.w	r4, r3, #50	; 0x32
 80019d8:	f000 ff70 	bl	80028bc <HAL_GetTick>
 80019dc:	4603      	mov	r3, r0
 80019de:	429c      	cmp	r4, r3
 80019e0:	d8ef      	bhi.n	80019c2 <Left_Sensor_Read+0x62>
	value2 = __HAL_TIM_GET_COUNTER(&htim3); //save the second reading
 80019e2:	4b16      	ldr	r3, [pc, #88]	; (8001a3c <Left_Sensor_Read+0xdc>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e8:	613b      	str	r3, [r7, #16]

	*Left_Distance = (value2 - value1)*0.034/2;
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7fe fd3b 	bl	800046c <__aeabi_ui2d>
 80019f6:	a30e      	add	r3, pc, #56	; (adr r3, 8001a30 <Left_Sensor_Read+0xd0>)
 80019f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019fc:	f7fe fdb0 	bl	8000560 <__aeabi_dmul>
 8001a00:	4602      	mov	r2, r0
 8001a02:	460b      	mov	r3, r1
 8001a04:	4610      	mov	r0, r2
 8001a06:	4619      	mov	r1, r3
 8001a08:	f04f 0200 	mov.w	r2, #0
 8001a0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a10:	f7fe fed0 	bl	80007b4 <__aeabi_ddiv>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	4610      	mov	r0, r2
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	f7fe ffb2 	bl	8000984 <__aeabi_d2uiz>
 8001a20:	4603      	mov	r3, r0
 8001a22:	b2da      	uxtb	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	701a      	strb	r2, [r3, #0]
}
 8001a28:	bf00      	nop
 8001a2a:	371c      	adds	r7, #28
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd90      	pop	{r4, r7, pc}
 8001a30:	b020c49c 	.word	0xb020c49c
 8001a34:	3fa16872 	.word	0x3fa16872
 8001a38:	40020000 	.word	0x40020000
 8001a3c:	2000019c 	.word	0x2000019c

08001a40 <Right_Blind_Sensor_Read>:

void Right_Blind_Sensor_Read(uint8_t *Right_Blind_Distance)
{
 8001a40:	b590      	push	{r4, r7, lr}
 8001a42:	b087      	sub	sp, #28
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
	uint32_t pMillis;
	uint32_t value1 = 0;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	617b      	str	r3, [r7, #20]
	uint32_t value2 = 0;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	613b      	str	r3, [r7, #16]

	HAL_GPIO_WritePin(Right_Blind_GPIO_Port, Right_Blind_Pin, GPIO_PIN_SET); //pull the trig pin high
 8001a50:	2201      	movs	r2, #1
 8001a52:	2110      	movs	r1, #16
 8001a54:	4830      	ldr	r0, [pc, #192]	; (8001b18 <Right_Blind_Sensor_Read+0xd8>)
 8001a56:	f001 f9e3 	bl	8002e20 <HAL_GPIO_WritePin>
	delay(10); //wait for 10us
 8001a5a:	200a      	movs	r0, #10
 8001a5c:	f7ff fe16 	bl	800168c <delay>
	HAL_GPIO_WritePin(Right_Blind_GPIO_Port, Right_Blind_Pin, GPIO_PIN_RESET);	//pull the trig pin low
 8001a60:	2200      	movs	r2, #0
 8001a62:	2110      	movs	r1, #16
 8001a64:	482c      	ldr	r0, [pc, #176]	; (8001b18 <Right_Blind_Sensor_Read+0xd8>)
 8001a66:	f001 f9db 	bl	8002e20 <HAL_GPIO_WritePin>

	pMillis = HAL_GetTick(); //used this to avoid infinite while loop (for timeout)
 8001a6a:	f000 ff27 	bl	80028bc <HAL_GetTick>
 8001a6e:	60f8      	str	r0, [r7, #12]
	//wait for the echo pin to get high
	while(!(HAL_GPIO_ReadPin(Echo_Port, Echo_Pin)) && (pMillis + 10 > HAL_GetTick()));
 8001a70:	bf00      	nop
 8001a72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a76:	4828      	ldr	r0, [pc, #160]	; (8001b18 <Right_Blind_Sensor_Read+0xd8>)
 8001a78:	f001 f9ba 	bl	8002df0 <HAL_GPIO_ReadPin>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d107      	bne.n	8001a92 <Right_Blind_Sensor_Read+0x52>
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	f103 040a 	add.w	r4, r3, #10
 8001a88:	f000 ff18 	bl	80028bc <HAL_GetTick>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	429c      	cmp	r4, r3
 8001a90:	d8ef      	bhi.n	8001a72 <Right_Blind_Sensor_Read+0x32>
	value1 = __HAL_TIM_GET_COUNTER(&htim3); //save the first reading
 8001a92:	4b22      	ldr	r3, [pc, #136]	; (8001b1c <Right_Blind_Sensor_Read+0xdc>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a98:	617b      	str	r3, [r7, #20]

	pMillis = HAL_GetTick(); //used this to avoid infinite while loop (for timeout)
 8001a9a:	f000 ff0f 	bl	80028bc <HAL_GetTick>
 8001a9e:	60f8      	str	r0, [r7, #12]
	//wait for the echo pin to get low
	while((HAL_GPIO_ReadPin(Echo_Port, Echo_Pin)) && (pMillis + 50 > HAL_GetTick()));
 8001aa0:	bf00      	nop
 8001aa2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001aa6:	481c      	ldr	r0, [pc, #112]	; (8001b18 <Right_Blind_Sensor_Read+0xd8>)
 8001aa8:	f001 f9a2 	bl	8002df0 <HAL_GPIO_ReadPin>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d007      	beq.n	8001ac2 <Right_Blind_Sensor_Read+0x82>
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8001ab8:	f000 ff00 	bl	80028bc <HAL_GetTick>
 8001abc:	4603      	mov	r3, r0
 8001abe:	429c      	cmp	r4, r3
 8001ac0:	d8ef      	bhi.n	8001aa2 <Right_Blind_Sensor_Read+0x62>
	value2 = __HAL_TIM_GET_COUNTER(&htim3); //save the second reading
 8001ac2:	4b16      	ldr	r3, [pc, #88]	; (8001b1c <Right_Blind_Sensor_Read+0xdc>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac8:	613b      	str	r3, [r7, #16]

	*Right_Blind_Distance = (value2 - value1)*0.034/2;
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7fe fccb 	bl	800046c <__aeabi_ui2d>
 8001ad6:	a30e      	add	r3, pc, #56	; (adr r3, 8001b10 <Right_Blind_Sensor_Read+0xd0>)
 8001ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001adc:	f7fe fd40 	bl	8000560 <__aeabi_dmul>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	4610      	mov	r0, r2
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	f04f 0200 	mov.w	r2, #0
 8001aec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001af0:	f7fe fe60 	bl	80007b4 <__aeabi_ddiv>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	4610      	mov	r0, r2
 8001afa:	4619      	mov	r1, r3
 8001afc:	f7fe ff42 	bl	8000984 <__aeabi_d2uiz>
 8001b00:	4603      	mov	r3, r0
 8001b02:	b2da      	uxtb	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	701a      	strb	r2, [r3, #0]
}
 8001b08:	bf00      	nop
 8001b0a:	371c      	adds	r7, #28
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd90      	pop	{r4, r7, pc}
 8001b10:	b020c49c 	.word	0xb020c49c
 8001b14:	3fa16872 	.word	0x3fa16872
 8001b18:	40020000 	.word	0x40020000
 8001b1c:	2000019c 	.word	0x2000019c

08001b20 <Left_Blind_Sensor_Read>:

void Left_Blind_Sensor_Read(uint8_t *Left_Blind_Distance)
{
 8001b20:	b590      	push	{r4, r7, lr}
 8001b22:	b087      	sub	sp, #28
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
	uint32_t pMillis;
	uint32_t value1 = 0;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	617b      	str	r3, [r7, #20]
	uint32_t value2 = 0;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	613b      	str	r3, [r7, #16]

	HAL_GPIO_WritePin(Left_Blind_GPIO_Port, Left_Blind_Pin, GPIO_PIN_SET); //pull the trig pin high
 8001b30:	2201      	movs	r2, #1
 8001b32:	2120      	movs	r1, #32
 8001b34:	4830      	ldr	r0, [pc, #192]	; (8001bf8 <Left_Blind_Sensor_Read+0xd8>)
 8001b36:	f001 f973 	bl	8002e20 <HAL_GPIO_WritePin>
	delay(10); //wait for 10us
 8001b3a:	200a      	movs	r0, #10
 8001b3c:	f7ff fda6 	bl	800168c <delay>
	HAL_GPIO_WritePin(Left_Blind_GPIO_Port, Left_Blind_Pin, GPIO_PIN_RESET);	//pull the trig pin low
 8001b40:	2200      	movs	r2, #0
 8001b42:	2120      	movs	r1, #32
 8001b44:	482c      	ldr	r0, [pc, #176]	; (8001bf8 <Left_Blind_Sensor_Read+0xd8>)
 8001b46:	f001 f96b 	bl	8002e20 <HAL_GPIO_WritePin>

	pMillis = HAL_GetTick(); //used this to avoid infinite while loop (for timeout)
 8001b4a:	f000 feb7 	bl	80028bc <HAL_GetTick>
 8001b4e:	60f8      	str	r0, [r7, #12]
	//wait for the echo pin to get high
	while(!(HAL_GPIO_ReadPin(Echo_Port, Echo_Pin)) && (pMillis + 10 > HAL_GetTick()));
 8001b50:	bf00      	nop
 8001b52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b56:	4828      	ldr	r0, [pc, #160]	; (8001bf8 <Left_Blind_Sensor_Read+0xd8>)
 8001b58:	f001 f94a 	bl	8002df0 <HAL_GPIO_ReadPin>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d107      	bne.n	8001b72 <Left_Blind_Sensor_Read+0x52>
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	f103 040a 	add.w	r4, r3, #10
 8001b68:	f000 fea8 	bl	80028bc <HAL_GetTick>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	429c      	cmp	r4, r3
 8001b70:	d8ef      	bhi.n	8001b52 <Left_Blind_Sensor_Read+0x32>
	value1 = __HAL_TIM_GET_COUNTER(&htim3); //save the first reading
 8001b72:	4b22      	ldr	r3, [pc, #136]	; (8001bfc <Left_Blind_Sensor_Read+0xdc>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b78:	617b      	str	r3, [r7, #20]

	pMillis = HAL_GetTick(); //used this to avoid infinite while loop (for timeout)
 8001b7a:	f000 fe9f 	bl	80028bc <HAL_GetTick>
 8001b7e:	60f8      	str	r0, [r7, #12]
	//wait for the echo pin to get low
	while((HAL_GPIO_ReadPin(Echo_Port, Echo_Pin)) && (pMillis + 50 > HAL_GetTick()));
 8001b80:	bf00      	nop
 8001b82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b86:	481c      	ldr	r0, [pc, #112]	; (8001bf8 <Left_Blind_Sensor_Read+0xd8>)
 8001b88:	f001 f932 	bl	8002df0 <HAL_GPIO_ReadPin>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d007      	beq.n	8001ba2 <Left_Blind_Sensor_Read+0x82>
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8001b98:	f000 fe90 	bl	80028bc <HAL_GetTick>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	429c      	cmp	r4, r3
 8001ba0:	d8ef      	bhi.n	8001b82 <Left_Blind_Sensor_Read+0x62>
	value2 = __HAL_TIM_GET_COUNTER(&htim3); //save the second reading
 8001ba2:	4b16      	ldr	r3, [pc, #88]	; (8001bfc <Left_Blind_Sensor_Read+0xdc>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba8:	613b      	str	r3, [r7, #16]

	*Left_Blind_Distance = (value2 - value1)*0.034/2;
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7fe fc5b 	bl	800046c <__aeabi_ui2d>
 8001bb6:	a30e      	add	r3, pc, #56	; (adr r3, 8001bf0 <Left_Blind_Sensor_Read+0xd0>)
 8001bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bbc:	f7fe fcd0 	bl	8000560 <__aeabi_dmul>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	4610      	mov	r0, r2
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	f04f 0200 	mov.w	r2, #0
 8001bcc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001bd0:	f7fe fdf0 	bl	80007b4 <__aeabi_ddiv>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	4610      	mov	r0, r2
 8001bda:	4619      	mov	r1, r3
 8001bdc:	f7fe fed2 	bl	8000984 <__aeabi_d2uiz>
 8001be0:	4603      	mov	r3, r0
 8001be2:	b2da      	uxtb	r2, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	701a      	strb	r2, [r3, #0]
}
 8001be8:	bf00      	nop
 8001bea:	371c      	adds	r7, #28
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd90      	pop	{r4, r7, pc}
 8001bf0:	b020c49c 	.word	0xb020c49c
 8001bf4:	3fa16872 	.word	0x3fa16872
 8001bf8:	40020000 	.word	0x40020000
 8001bfc:	2000019c 	.word	0x2000019c

08001c00 <Set_Ultrasonic_View>:

void Set_Ultrasonic_View(Ultrasonic_Views_t view)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	71fb      	strb	r3, [r7, #7]
	switch(view)
 8001c0a:	79fb      	ldrb	r3, [r7, #7]
 8001c0c:	2b05      	cmp	r3, #5
 8001c0e:	d874      	bhi.n	8001cfa <Set_Ultrasonic_View+0xfa>
 8001c10:	a201      	add	r2, pc, #4	; (adr r2, 8001c18 <Set_Ultrasonic_View+0x18>)
 8001c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c16:	bf00      	nop
 8001c18:	08001c31 	.word	0x08001c31
 8001c1c:	08001c51 	.word	0x08001c51
 8001c20:	08001c73 	.word	0x08001c73
 8001c24:	08001c95 	.word	0x08001c95
 8001c28:	08001cb7 	.word	0x08001cb7
 8001c2c:	08001cd9 	.word	0x08001cd9
	{
	case Front:
		HAL_GPIO_WritePin(Selector_0_GPIO_Port, Selector_0_Pin, GPIO_PIN_RESET);
 8001c30:	2200      	movs	r2, #0
 8001c32:	2140      	movs	r1, #64	; 0x40
 8001c34:	4833      	ldr	r0, [pc, #204]	; (8001d04 <Set_Ultrasonic_View+0x104>)
 8001c36:	f001 f8f3 	bl	8002e20 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Selector_0_GPIO_Port, Selector_0_Pin, GPIO_PIN_RESET);
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	2140      	movs	r1, #64	; 0x40
 8001c3e:	4831      	ldr	r0, [pc, #196]	; (8001d04 <Set_Ultrasonic_View+0x104>)
 8001c40:	f001 f8ee 	bl	8002e20 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Selector_0_GPIO_Port, Selector_0_Pin, GPIO_PIN_RESET);
 8001c44:	2200      	movs	r2, #0
 8001c46:	2140      	movs	r1, #64	; 0x40
 8001c48:	482e      	ldr	r0, [pc, #184]	; (8001d04 <Set_Ultrasonic_View+0x104>)
 8001c4a:	f001 f8e9 	bl	8002e20 <HAL_GPIO_WritePin>
		break;
 8001c4e:	e054      	b.n	8001cfa <Set_Ultrasonic_View+0xfa>

	case Back:
		HAL_GPIO_WritePin(Selector_0_GPIO_Port, Selector_0_Pin, GPIO_PIN_SET);
 8001c50:	2201      	movs	r2, #1
 8001c52:	2140      	movs	r1, #64	; 0x40
 8001c54:	482b      	ldr	r0, [pc, #172]	; (8001d04 <Set_Ultrasonic_View+0x104>)
 8001c56:	f001 f8e3 	bl	8002e20 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Selector_1_GPIO_Port, Selector_1_Pin, GPIO_PIN_RESET);
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	482a      	ldr	r0, [pc, #168]	; (8001d08 <Set_Ultrasonic_View+0x108>)
 8001c60:	f001 f8de 	bl	8002e20 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Selector_2_GPIO_Port, Selector_2_Pin, GPIO_PIN_RESET);
 8001c64:	2200      	movs	r2, #0
 8001c66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c6a:	4826      	ldr	r0, [pc, #152]	; (8001d04 <Set_Ultrasonic_View+0x104>)
 8001c6c:	f001 f8d8 	bl	8002e20 <HAL_GPIO_WritePin>
		break;
 8001c70:	e043      	b.n	8001cfa <Set_Ultrasonic_View+0xfa>

	case Right:
		HAL_GPIO_WritePin(Selector_0_GPIO_Port, Selector_0_Pin, GPIO_PIN_RESET);
 8001c72:	2200      	movs	r2, #0
 8001c74:	2140      	movs	r1, #64	; 0x40
 8001c76:	4823      	ldr	r0, [pc, #140]	; (8001d04 <Set_Ultrasonic_View+0x104>)
 8001c78:	f001 f8d2 	bl	8002e20 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Selector_1_GPIO_Port, Selector_1_Pin, GPIO_PIN_SET);
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	2101      	movs	r1, #1
 8001c80:	4821      	ldr	r0, [pc, #132]	; (8001d08 <Set_Ultrasonic_View+0x108>)
 8001c82:	f001 f8cd 	bl	8002e20 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Selector_2_GPIO_Port, Selector_2_Pin, GPIO_PIN_RESET);
 8001c86:	2200      	movs	r2, #0
 8001c88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c8c:	481d      	ldr	r0, [pc, #116]	; (8001d04 <Set_Ultrasonic_View+0x104>)
 8001c8e:	f001 f8c7 	bl	8002e20 <HAL_GPIO_WritePin>
		break;
 8001c92:	e032      	b.n	8001cfa <Set_Ultrasonic_View+0xfa>

	case Left:
		HAL_GPIO_WritePin(Selector_0_GPIO_Port, Selector_0_Pin, GPIO_PIN_SET);
 8001c94:	2201      	movs	r2, #1
 8001c96:	2140      	movs	r1, #64	; 0x40
 8001c98:	481a      	ldr	r0, [pc, #104]	; (8001d04 <Set_Ultrasonic_View+0x104>)
 8001c9a:	f001 f8c1 	bl	8002e20 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Selector_1_GPIO_Port, Selector_1_Pin, GPIO_PIN_SET);
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	2101      	movs	r1, #1
 8001ca2:	4819      	ldr	r0, [pc, #100]	; (8001d08 <Set_Ultrasonic_View+0x108>)
 8001ca4:	f001 f8bc 	bl	8002e20 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Selector_2_GPIO_Port, Selector_2_Pin, GPIO_PIN_RESET);
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cae:	4815      	ldr	r0, [pc, #84]	; (8001d04 <Set_Ultrasonic_View+0x104>)
 8001cb0:	f001 f8b6 	bl	8002e20 <HAL_GPIO_WritePin>
		break;
 8001cb4:	e021      	b.n	8001cfa <Set_Ultrasonic_View+0xfa>

	case Right_Blind:
		HAL_GPIO_WritePin(Selector_0_GPIO_Port, Selector_0_Pin, GPIO_PIN_RESET);
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	2140      	movs	r1, #64	; 0x40
 8001cba:	4812      	ldr	r0, [pc, #72]	; (8001d04 <Set_Ultrasonic_View+0x104>)
 8001cbc:	f001 f8b0 	bl	8002e20 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Selector_1_GPIO_Port, Selector_1_Pin, GPIO_PIN_RESET);
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	4810      	ldr	r0, [pc, #64]	; (8001d08 <Set_Ultrasonic_View+0x108>)
 8001cc6:	f001 f8ab 	bl	8002e20 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Selector_2_GPIO_Port, Selector_2_Pin, GPIO_PIN_SET);
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cd0:	480c      	ldr	r0, [pc, #48]	; (8001d04 <Set_Ultrasonic_View+0x104>)
 8001cd2:	f001 f8a5 	bl	8002e20 <HAL_GPIO_WritePin>
		break;
 8001cd6:	e010      	b.n	8001cfa <Set_Ultrasonic_View+0xfa>

	case Left_Blind:
		HAL_GPIO_WritePin(Selector_0_GPIO_Port, Selector_0_Pin, GPIO_PIN_SET);
 8001cd8:	2201      	movs	r2, #1
 8001cda:	2140      	movs	r1, #64	; 0x40
 8001cdc:	4809      	ldr	r0, [pc, #36]	; (8001d04 <Set_Ultrasonic_View+0x104>)
 8001cde:	f001 f89f 	bl	8002e20 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Selector_1_GPIO_Port, Selector_1_Pin, GPIO_PIN_RESET);
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	2101      	movs	r1, #1
 8001ce6:	4808      	ldr	r0, [pc, #32]	; (8001d08 <Set_Ultrasonic_View+0x108>)
 8001ce8:	f001 f89a 	bl	8002e20 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Selector_2_GPIO_Port, Selector_2_Pin, GPIO_PIN_SET);
 8001cec:	2201      	movs	r2, #1
 8001cee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cf2:	4804      	ldr	r0, [pc, #16]	; (8001d04 <Set_Ultrasonic_View+0x104>)
 8001cf4:	f001 f894 	bl	8002e20 <HAL_GPIO_WritePin>
		break;
 8001cf8:	bf00      	nop
	}
}
 8001cfa:	bf00      	nop
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	40020000 	.word	0x40020000
 8001d08:	40020400 	.word	0x40020400

08001d0c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001d10:	f000 fd6e 	bl	80027f0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001d14:	f000 f902 	bl	8001f1c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001d18:	f000 faf2 	bl	8002300 <MX_GPIO_Init>
	MX_TIM1_Init();
 8001d1c:	f000 f9cc 	bl	80020b8 <MX_TIM1_Init>
	MX_TIM3_Init();
 8001d20:	f000 fa76 	bl	8002210 <MX_TIM3_Init>
	MX_SPI2_Init();
 8001d24:	f000 f992 	bl	800204c <MX_SPI2_Init>
	MX_USART6_UART_Init();
 8001d28:	f000 fac0 	bl	80022ac <MX_USART6_UART_Init>
	MX_I2C1_Init();
 8001d2c:	f000 f960 	bl	8001ff0 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001d30:	2100      	movs	r1, #0
 8001d32:	486b      	ldr	r0, [pc, #428]	; (8001ee0 <main+0x1d4>)
 8001d34:	f002 fcd6 	bl	80046e4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001d38:	2104      	movs	r1, #4
 8001d3a:	4869      	ldr	r0, [pc, #420]	; (8001ee0 <main+0x1d4>)
 8001d3c:	f002 fcd2 	bl	80046e4 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start(&htim3);
 8001d40:	4868      	ldr	r0, [pc, #416]	; (8001ee4 <main+0x1d8>)
 8001d42:	f002 fc1b 	bl	800457c <HAL_TIM_Base_Start>

	NRF24_Init();
 8001d46:	f7ff fa15 	bl	8001174 <NRF24_Init>
	NRF24_RxMode(RxAddess, 10);
 8001d4a:	210a      	movs	r1, #10
 8001d4c:	4866      	ldr	r0, [pc, #408]	; (8001ee8 <main+0x1dc>)
 8001d4e:	f7ff fa77 	bl	8001240 <NRF24_RxMode>

	HAL_GPIO_WritePin(Front_Ultrasonic_GPIO_Port, Front_Ultrasonic_Pin, GPIO_PIN_RESET);	//pull the trig pin low
 8001d52:	2200      	movs	r2, #0
 8001d54:	2101      	movs	r1, #1
 8001d56:	4865      	ldr	r0, [pc, #404]	; (8001eec <main+0x1e0>)
 8001d58:	f001 f862 	bl	8002e20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Back_Ultrasonic_GPIO_Port, Back_Ultrasonic_Pin, GPIO_PIN_RESET);	//pull the trig pin low
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	2102      	movs	r1, #2
 8001d60:	4862      	ldr	r0, [pc, #392]	; (8001eec <main+0x1e0>)
 8001d62:	f001 f85d 	bl	8002e20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Right_Ultrasonic_GPIO_Port, Right_Ultrasonic_Pin, GPIO_PIN_RESET);	//pull the trig pin low
 8001d66:	2200      	movs	r2, #0
 8001d68:	2104      	movs	r1, #4
 8001d6a:	4860      	ldr	r0, [pc, #384]	; (8001eec <main+0x1e0>)
 8001d6c:	f001 f858 	bl	8002e20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Left_Ultrasonic_GPIO_Port, Left_Ultrasonic_Pin, GPIO_PIN_RESET);	//pull the trig pin low
 8001d70:	2200      	movs	r2, #0
 8001d72:	2108      	movs	r1, #8
 8001d74:	485d      	ldr	r0, [pc, #372]	; (8001eec <main+0x1e0>)
 8001d76:	f001 f853 	bl	8002e20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Right_Blind_GPIO_Port, Right_Blind_Pin, GPIO_PIN_RESET);	//pull the trig pin low
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	2110      	movs	r1, #16
 8001d7e:	485b      	ldr	r0, [pc, #364]	; (8001eec <main+0x1e0>)
 8001d80:	f001 f84e 	bl	8002e20 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Right_Blind_GPIO_Port, Left_Blind_Pin, GPIO_PIN_RESET);	//pull the trig pin low
 8001d84:	2200      	movs	r2, #0
 8001d86:	2120      	movs	r1, #32
 8001d88:	4858      	ldr	r0, [pc, #352]	; (8001eec <main+0x1e0>)
 8001d8a:	f001 f849 	bl	8002e20 <HAL_GPIO_WritePin>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1)
	{
		Set_Ultrasonic_View(Front);
 8001d8e:	2000      	movs	r0, #0
 8001d90:	f7ff ff36 	bl	8001c00 <Set_Ultrasonic_View>
		Front_Sensor_Read(&Front_Distance);
 8001d94:	4856      	ldr	r0, [pc, #344]	; (8001ef0 <main+0x1e4>)
 8001d96:	f7ff fc93 	bl	80016c0 <Front_Sensor_Read>

		Set_Ultrasonic_View(Back);
 8001d9a:	2001      	movs	r0, #1
 8001d9c:	f7ff ff30 	bl	8001c00 <Set_Ultrasonic_View>
		Back_Sensor_Read(&Back_Distance);
 8001da0:	4854      	ldr	r0, [pc, #336]	; (8001ef4 <main+0x1e8>)
 8001da2:	f7ff fcfd 	bl	80017a0 <Back_Sensor_Read>

		Set_Ultrasonic_View(Right);
 8001da6:	2002      	movs	r0, #2
 8001da8:	f7ff ff2a 	bl	8001c00 <Set_Ultrasonic_View>
		Right_Sensor_Read(&Right_Distance);
 8001dac:	4852      	ldr	r0, [pc, #328]	; (8001ef8 <main+0x1ec>)
 8001dae:	f7ff fd67 	bl	8001880 <Right_Sensor_Read>

		Set_Ultrasonic_View(Left);
 8001db2:	2003      	movs	r0, #3
 8001db4:	f7ff ff24 	bl	8001c00 <Set_Ultrasonic_View>
		Left_Sensor_Read(&Left_Distance);
 8001db8:	4850      	ldr	r0, [pc, #320]	; (8001efc <main+0x1f0>)
 8001dba:	f7ff fdd1 	bl	8001960 <Left_Sensor_Read>

		Set_Ultrasonic_View(Right_Blind);
 8001dbe:	2004      	movs	r0, #4
 8001dc0:	f7ff ff1e 	bl	8001c00 <Set_Ultrasonic_View>
		Right_Blind_Sensor_Read(&Right_Blind_Distance);
 8001dc4:	484e      	ldr	r0, [pc, #312]	; (8001f00 <main+0x1f4>)
 8001dc6:	f7ff fe3b 	bl	8001a40 <Right_Blind_Sensor_Read>

		Set_Ultrasonic_View(Left_Blind);
 8001dca:	2005      	movs	r0, #5
 8001dcc:	f7ff ff18 	bl	8001c00 <Set_Ultrasonic_View>
		Left_Blind_Sensor_Read(&Left_Blind_Distance);
 8001dd0:	484c      	ldr	r0, [pc, #304]	; (8001f04 <main+0x1f8>)
 8001dd2:	f7ff fea5 	bl	8001b20 <Left_Blind_Sensor_Read>

		if(Front_Distance <= 20)
 8001dd6:	4b46      	ldr	r3, [pc, #280]	; (8001ef0 <main+0x1e4>)
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	2b14      	cmp	r3, #20
 8001ddc:	d802      	bhi.n	8001de4 <main+0xd8>
		{
			ACCIDENT();
 8001dde:	f7ff fb4f 	bl	8001480 <ACCIDENT>
 8001de2:	e030      	b.n	8001e46 <main+0x13a>
		}
		else if(Right_Blind_Distance <= 40)
 8001de4:	4b46      	ldr	r3, [pc, #280]	; (8001f00 <main+0x1f4>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	2b28      	cmp	r3, #40	; 0x28
 8001dea:	d802      	bhi.n	8001df2 <main+0xe6>
		{
			Right_BLIND_MODE();
 8001dec:	f7ff fb56 	bl	800149c <Right_BLIND_MODE>
 8001df0:	e029      	b.n	8001e46 <main+0x13a>
		}
		else if(Left_Blind_Distance <= 40)
 8001df2:	4b44      	ldr	r3, [pc, #272]	; (8001f04 <main+0x1f8>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	2b28      	cmp	r3, #40	; 0x28
 8001df8:	d802      	bhi.n	8001e00 <main+0xf4>
		{
			Left_BLIND_MODE();
 8001dfa:	f7ff fb77 	bl	80014ec <Left_BLIND_MODE>
 8001dfe:	e022      	b.n	8001e46 <main+0x13a>
		}
		else if(Right_Distance <= 30)
 8001e00:	4b3d      	ldr	r3, [pc, #244]	; (8001ef8 <main+0x1ec>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	2b1e      	cmp	r3, #30
 8001e06:	d805      	bhi.n	8001e14 <main+0x108>
		{
			Parking_Right();
 8001e08:	f7ff fa5a 	bl	80012c0 <Parking_Right>
			object1detected = 1;
 8001e0c:	4b3e      	ldr	r3, [pc, #248]	; (8001f08 <main+0x1fc>)
 8001e0e:	2201      	movs	r2, #1
 8001e10:	601a      	str	r2, [r3, #0]
 8001e12:	e018      	b.n	8001e46 <main+0x13a>
		}
		else if(Left_Distance < 20)
 8001e14:	4b39      	ldr	r3, [pc, #228]	; (8001efc <main+0x1f0>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	2b13      	cmp	r3, #19
 8001e1a:	d802      	bhi.n	8001e22 <main+0x116>
		{
			Parking_Left();
 8001e1c:	f7ff fab8 	bl	8001390 <Parking_Left>
 8001e20:	e011      	b.n	8001e46 <main+0x13a>
		}
		else
		{
			R1 = HAL_GPIO_ReadPin(Right_IR_GPIO_Port, Right_IR_Pin); //Right Sensor
 8001e22:	2110      	movs	r1, #16
 8001e24:	4839      	ldr	r0, [pc, #228]	; (8001f0c <main+0x200>)
 8001e26:	f000 ffe3 	bl	8002df0 <HAL_GPIO_ReadPin>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	b25a      	sxtb	r2, r3
 8001e2e:	4b38      	ldr	r3, [pc, #224]	; (8001f10 <main+0x204>)
 8001e30:	701a      	strb	r2, [r3, #0]
			L1 = HAL_GPIO_ReadPin(Left_IR_GPIO_Port, Left_IR_Pin); //Left Sensor
 8001e32:	2180      	movs	r1, #128	; 0x80
 8001e34:	4835      	ldr	r0, [pc, #212]	; (8001f0c <main+0x200>)
 8001e36:	f000 ffdb 	bl	8002df0 <HAL_GPIO_ReadPin>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	b25a      	sxtb	r2, r3
 8001e3e:	4b35      	ldr	r3, [pc, #212]	; (8001f14 <main+0x208>)
 8001e40:	701a      	strb	r2, [r3, #0]
			Lane_Detection();
 8001e42:	f7fe ff3d 	bl	8000cc0 <Lane_Detection>
		}

		/**********************************slave left corner blind**************************************/
		if(RxData[0] == 'A')
 8001e46:	4b34      	ldr	r3, [pc, #208]	; (8001f18 <main+0x20c>)
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	2b41      	cmp	r3, #65	; 0x41
 8001e4c:	d104      	bne.n	8001e58 <main+0x14c>
		{
			NO_SPEED();
 8001e4e:	f7ff f81d 	bl	8000e8c <NO_SPEED>
			Stop_Moving();
 8001e52:	f7fe ffd5 	bl	8000e00 <Stop_Moving>
 8001e56:	e79a      	b.n	8001d8e <main+0x82>
		}
		else if(RxData[0] == 'B')
 8001e58:	4b2f      	ldr	r3, [pc, #188]	; (8001f18 <main+0x20c>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	2b42      	cmp	r3, #66	; 0x42
 8001e5e:	d124      	bne.n	8001eaa <main+0x19e>
		{
			HALF_SPEED();
 8001e60:	f7fe fff0 	bl	8000e44 <HALF_SPEED>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,GPIO_PIN_SET);
 8001e64:	2201      	movs	r2, #1
 8001e66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e6a:	4828      	ldr	r0, [pc, #160]	; (8001f0c <main+0x200>)
 8001e6c:	f000 ffd8 	bl	8002e20 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8001e70:	2064      	movs	r0, #100	; 0x64
 8001e72:	f000 fd2f 	bl	80028d4 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,GPIO_PIN_RESET);
 8001e76:	2200      	movs	r2, #0
 8001e78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e7c:	4823      	ldr	r0, [pc, #140]	; (8001f0c <main+0x200>)
 8001e7e:	f000 ffcf 	bl	8002e20 <HAL_GPIO_WritePin>
			Left_Moving();
 8001e82:	f7fe ff79 	bl	8000d78 <Left_Moving>
			HAL_Delay(250);
 8001e86:	20fa      	movs	r0, #250	; 0xfa
 8001e88:	f000 fd24 	bl	80028d4 <HAL_Delay>
			Right_Moving();
 8001e8c:	f7fe ff96 	bl	8000dbc <Right_Moving>
			HAL_Delay(100);
 8001e90:	2064      	movs	r0, #100	; 0x64
 8001e92:	f000 fd1f 	bl	80028d4 <HAL_Delay>
			Forward_Moving();
 8001e96:	f7fe ff4d 	bl	8000d34 <Forward_Moving>
			HAL_Delay(2000);
 8001e9a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001e9e:	f000 fd19 	bl	80028d4 <HAL_Delay>
			RxData[0] = '\0';
 8001ea2:	4b1d      	ldr	r3, [pc, #116]	; (8001f18 <main+0x20c>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	701a      	strb	r2, [r3, #0]
 8001ea8:	e771      	b.n	8001d8e <main+0x82>
		}

		/**********************************slave right corner blind**************************************/

		else if(RxData[0] == 'C')
 8001eaa:	4b1b      	ldr	r3, [pc, #108]	; (8001f18 <main+0x20c>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	2b43      	cmp	r3, #67	; 0x43
 8001eb0:	d110      	bne.n	8001ed4 <main+0x1c8>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,GPIO_PIN_SET);
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001eb8:	4814      	ldr	r0, [pc, #80]	; (8001f0c <main+0x200>)
 8001eba:	f000 ffb1 	bl	8002e20 <HAL_GPIO_WritePin>
			Left_Moving();
 8001ebe:	f7fe ff5b 	bl	8000d78 <Left_Moving>
			HAL_Delay(500);
 8001ec2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ec6:	f000 fd05 	bl	80028d4 <HAL_Delay>
			HALF_SPEED();
 8001eca:	f7fe ffbb 	bl	8000e44 <HALF_SPEED>
			Forward_Moving();
 8001ece:	f7fe ff31 	bl	8000d34 <Forward_Moving>
 8001ed2:	e75c      	b.n	8001d8e <main+0x82>
		}

		/*********************slave front********************************************************/
		else
		{
			QUARTER_SPEED();
 8001ed4:	f7fe ffc8 	bl	8000e68 <QUARTER_SPEED>
			Forward_Moving();
 8001ed8:	f7fe ff2c 	bl	8000d34 <Forward_Moving>
		Set_Ultrasonic_View(Front);
 8001edc:	e757      	b.n	8001d8e <main+0x82>
 8001ede:	bf00      	nop
 8001ee0:	20000154 	.word	0x20000154
 8001ee4:	2000019c 	.word	0x2000019c
 8001ee8:	20000034 	.word	0x20000034
 8001eec:	40020000 	.word	0x40020000
 8001ef0:	2000007c 	.word	0x2000007c
 8001ef4:	2000007d 	.word	0x2000007d
 8001ef8:	2000007e 	.word	0x2000007e
 8001efc:	2000007f 	.word	0x2000007f
 8001f00:	20000080 	.word	0x20000080
 8001f04:	20000081 	.word	0x20000081
 8001f08:	200000a4 	.word	0x200000a4
 8001f0c:	40020400 	.word	0x40020400
 8001f10:	20000082 	.word	0x20000082
 8001f14:	20000083 	.word	0x20000083
 8001f18:	20000084 	.word	0x20000084

08001f1c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b094      	sub	sp, #80	; 0x50
 8001f20:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f22:	f107 0320 	add.w	r3, r7, #32
 8001f26:	2230      	movs	r2, #48	; 0x30
 8001f28:	2100      	movs	r1, #0
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f003 fd62 	bl	80059f4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f30:	f107 030c 	add.w	r3, r7, #12
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	605a      	str	r2, [r3, #4]
 8001f3a:	609a      	str	r2, [r3, #8]
 8001f3c:	60da      	str	r2, [r3, #12]
 8001f3e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001f40:	2300      	movs	r3, #0
 8001f42:	60bb      	str	r3, [r7, #8]
 8001f44:	4b28      	ldr	r3, [pc, #160]	; (8001fe8 <SystemClock_Config+0xcc>)
 8001f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f48:	4a27      	ldr	r2, [pc, #156]	; (8001fe8 <SystemClock_Config+0xcc>)
 8001f4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f4e:	6413      	str	r3, [r2, #64]	; 0x40
 8001f50:	4b25      	ldr	r3, [pc, #148]	; (8001fe8 <SystemClock_Config+0xcc>)
 8001f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f58:	60bb      	str	r3, [r7, #8]
 8001f5a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	607b      	str	r3, [r7, #4]
 8001f60:	4b22      	ldr	r3, [pc, #136]	; (8001fec <SystemClock_Config+0xd0>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001f68:	4a20      	ldr	r2, [pc, #128]	; (8001fec <SystemClock_Config+0xd0>)
 8001f6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f6e:	6013      	str	r3, [r2, #0]
 8001f70:	4b1e      	ldr	r3, [pc, #120]	; (8001fec <SystemClock_Config+0xd0>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f78:	607b      	str	r3, [r7, #4]
 8001f7a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f80:	2301      	movs	r3, #1
 8001f82:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f84:	2310      	movs	r3, #16
 8001f86:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f88:	2302      	movs	r3, #2
 8001f8a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001f90:	2308      	movs	r3, #8
 8001f92:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 84;
 8001f94:	2354      	movs	r3, #84	; 0x54
 8001f96:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f98:	2302      	movs	r3, #2
 8001f9a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001f9c:	2304      	movs	r3, #4
 8001f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fa0:	f107 0320 	add.w	r3, r7, #32
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f001 f899 	bl	80030dc <HAL_RCC_OscConfig>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <SystemClock_Config+0x98>
	{
		Error_Handler();
 8001fb0:	f000 fa40 	bl	8002434 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fb4:	230f      	movs	r3, #15
 8001fb6:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fb8:	2302      	movs	r3, #2
 8001fba:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001fc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fc4:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001fca:	f107 030c 	add.w	r3, r7, #12
 8001fce:	2102      	movs	r1, #2
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f001 fafb 	bl	80035cc <HAL_RCC_ClockConfig>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 8001fdc:	f000 fa2a 	bl	8002434 <Error_Handler>
	}
}
 8001fe0:	bf00      	nop
 8001fe2:	3750      	adds	r7, #80	; 0x50
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	40007000 	.word	0x40007000

08001ff0 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001ff4:	4b12      	ldr	r3, [pc, #72]	; (8002040 <MX_I2C1_Init+0x50>)
 8001ff6:	4a13      	ldr	r2, [pc, #76]	; (8002044 <MX_I2C1_Init+0x54>)
 8001ff8:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001ffa:	4b11      	ldr	r3, [pc, #68]	; (8002040 <MX_I2C1_Init+0x50>)
 8001ffc:	4a12      	ldr	r2, [pc, #72]	; (8002048 <MX_I2C1_Init+0x58>)
 8001ffe:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002000:	4b0f      	ldr	r3, [pc, #60]	; (8002040 <MX_I2C1_Init+0x50>)
 8002002:	2200      	movs	r2, #0
 8002004:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8002006:	4b0e      	ldr	r3, [pc, #56]	; (8002040 <MX_I2C1_Init+0x50>)
 8002008:	2200      	movs	r2, #0
 800200a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800200c:	4b0c      	ldr	r3, [pc, #48]	; (8002040 <MX_I2C1_Init+0x50>)
 800200e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002012:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002014:	4b0a      	ldr	r3, [pc, #40]	; (8002040 <MX_I2C1_Init+0x50>)
 8002016:	2200      	movs	r2, #0
 8002018:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800201a:	4b09      	ldr	r3, [pc, #36]	; (8002040 <MX_I2C1_Init+0x50>)
 800201c:	2200      	movs	r2, #0
 800201e:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002020:	4b07      	ldr	r3, [pc, #28]	; (8002040 <MX_I2C1_Init+0x50>)
 8002022:	2200      	movs	r2, #0
 8002024:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002026:	4b06      	ldr	r3, [pc, #24]	; (8002040 <MX_I2C1_Init+0x50>)
 8002028:	2200      	movs	r2, #0
 800202a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800202c:	4804      	ldr	r0, [pc, #16]	; (8002040 <MX_I2C1_Init+0x50>)
 800202e:	f000 ff11 	bl	8002e54 <HAL_I2C_Init>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 8002038:	f000 f9fc 	bl	8002434 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800203c:	bf00      	nop
 800203e:	bd80      	pop	{r7, pc}
 8002040:	200000a8 	.word	0x200000a8
 8002044:	40005400 	.word	0x40005400
 8002048:	000186a0 	.word	0x000186a0

0800204c <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8002050:	4b17      	ldr	r3, [pc, #92]	; (80020b0 <MX_SPI2_Init+0x64>)
 8002052:	4a18      	ldr	r2, [pc, #96]	; (80020b4 <MX_SPI2_Init+0x68>)
 8002054:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8002056:	4b16      	ldr	r3, [pc, #88]	; (80020b0 <MX_SPI2_Init+0x64>)
 8002058:	f44f 7282 	mov.w	r2, #260	; 0x104
 800205c:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800205e:	4b14      	ldr	r3, [pc, #80]	; (80020b0 <MX_SPI2_Init+0x64>)
 8002060:	2200      	movs	r2, #0
 8002062:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002064:	4b12      	ldr	r3, [pc, #72]	; (80020b0 <MX_SPI2_Init+0x64>)
 8002066:	2200      	movs	r2, #0
 8002068:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800206a:	4b11      	ldr	r3, [pc, #68]	; (80020b0 <MX_SPI2_Init+0x64>)
 800206c:	2200      	movs	r2, #0
 800206e:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002070:	4b0f      	ldr	r3, [pc, #60]	; (80020b0 <MX_SPI2_Init+0x64>)
 8002072:	2200      	movs	r2, #0
 8002074:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8002076:	4b0e      	ldr	r3, [pc, #56]	; (80020b0 <MX_SPI2_Init+0x64>)
 8002078:	f44f 7200 	mov.w	r2, #512	; 0x200
 800207c:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800207e:	4b0c      	ldr	r3, [pc, #48]	; (80020b0 <MX_SPI2_Init+0x64>)
 8002080:	2210      	movs	r2, #16
 8002082:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002084:	4b0a      	ldr	r3, [pc, #40]	; (80020b0 <MX_SPI2_Init+0x64>)
 8002086:	2200      	movs	r2, #0
 8002088:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800208a:	4b09      	ldr	r3, [pc, #36]	; (80020b0 <MX_SPI2_Init+0x64>)
 800208c:	2200      	movs	r2, #0
 800208e:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002090:	4b07      	ldr	r3, [pc, #28]	; (80020b0 <MX_SPI2_Init+0x64>)
 8002092:	2200      	movs	r2, #0
 8002094:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 8002096:	4b06      	ldr	r3, [pc, #24]	; (80020b0 <MX_SPI2_Init+0x64>)
 8002098:	220a      	movs	r2, #10
 800209a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800209c:	4804      	ldr	r0, [pc, #16]	; (80020b0 <MX_SPI2_Init+0x64>)
 800209e:	f001 fc75 	bl	800398c <HAL_SPI_Init>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <MX_SPI2_Init+0x60>
	{
		Error_Handler();
 80020a8:	f000 f9c4 	bl	8002434 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 80020ac:	bf00      	nop
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	200000fc 	.word	0x200000fc
 80020b4:	40003800 	.word	0x40003800

080020b8 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b096      	sub	sp, #88	; 0x58
 80020bc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80020c2:	2200      	movs	r2, #0
 80020c4:	601a      	str	r2, [r3, #0]
 80020c6:	605a      	str	r2, [r3, #4]
 80020c8:	609a      	str	r2, [r3, #8]
 80020ca:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020cc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80020d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020da:	2200      	movs	r2, #0
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	605a      	str	r2, [r3, #4]
 80020e0:	609a      	str	r2, [r3, #8]
 80020e2:	60da      	str	r2, [r3, #12]
 80020e4:	611a      	str	r2, [r3, #16]
 80020e6:	615a      	str	r2, [r3, #20]
 80020e8:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80020ea:	1d3b      	adds	r3, r7, #4
 80020ec:	2220      	movs	r2, #32
 80020ee:	2100      	movs	r1, #0
 80020f0:	4618      	mov	r0, r3
 80020f2:	f003 fc7f 	bl	80059f4 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80020f6:	4b44      	ldr	r3, [pc, #272]	; (8002208 <MX_TIM1_Init+0x150>)
 80020f8:	4a44      	ldr	r2, [pc, #272]	; (800220c <MX_TIM1_Init+0x154>)
 80020fa:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 80020fc:	4b42      	ldr	r3, [pc, #264]	; (8002208 <MX_TIM1_Init+0x150>)
 80020fe:	2200      	movs	r2, #0
 8002100:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002102:	4b41      	ldr	r3, [pc, #260]	; (8002208 <MX_TIM1_Init+0x150>)
 8002104:	2200      	movs	r2, #0
 8002106:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8002108:	4b3f      	ldr	r3, [pc, #252]	; (8002208 <MX_TIM1_Init+0x150>)
 800210a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800210e:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002110:	4b3d      	ldr	r3, [pc, #244]	; (8002208 <MX_TIM1_Init+0x150>)
 8002112:	2200      	movs	r2, #0
 8002114:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8002116:	4b3c      	ldr	r3, [pc, #240]	; (8002208 <MX_TIM1_Init+0x150>)
 8002118:	2200      	movs	r2, #0
 800211a:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800211c:	4b3a      	ldr	r3, [pc, #232]	; (8002208 <MX_TIM1_Init+0x150>)
 800211e:	2200      	movs	r2, #0
 8002120:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002122:	4839      	ldr	r0, [pc, #228]	; (8002208 <MX_TIM1_Init+0x150>)
 8002124:	f002 f9da 	bl	80044dc <HAL_TIM_Base_Init>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <MX_TIM1_Init+0x7a>
	{
		Error_Handler();
 800212e:	f000 f981 	bl	8002434 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002132:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002136:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002138:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800213c:	4619      	mov	r1, r3
 800213e:	4832      	ldr	r0, [pc, #200]	; (8002208 <MX_TIM1_Init+0x150>)
 8002140:	f002 fc42 	bl	80049c8 <HAL_TIM_ConfigClockSource>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <MX_TIM1_Init+0x96>
	{
		Error_Handler();
 800214a:	f000 f973 	bl	8002434 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800214e:	482e      	ldr	r0, [pc, #184]	; (8002208 <MX_TIM1_Init+0x150>)
 8002150:	f002 fa6e 	bl	8004630 <HAL_TIM_PWM_Init>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <MX_TIM1_Init+0xa6>
	{
		Error_Handler();
 800215a:	f000 f96b 	bl	8002434 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800215e:	2300      	movs	r3, #0
 8002160:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002162:	2300      	movs	r3, #0
 8002164:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002166:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800216a:	4619      	mov	r1, r3
 800216c:	4826      	ldr	r0, [pc, #152]	; (8002208 <MX_TIM1_Init+0x150>)
 800216e:	f002 ffbf 	bl	80050f0 <HAL_TIMEx_MasterConfigSynchronization>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <MX_TIM1_Init+0xc4>
	{
		Error_Handler();
 8002178:	f000 f95c 	bl	8002434 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800217c:	2360      	movs	r3, #96	; 0x60
 800217e:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 8002180:	2300      	movs	r3, #0
 8002182:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002184:	2300      	movs	r3, #0
 8002186:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002188:	2300      	movs	r3, #0
 800218a:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800218c:	2300      	movs	r3, #0
 800218e:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002190:	2300      	movs	r3, #0
 8002192:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002194:	2300      	movs	r3, #0
 8002196:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002198:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800219c:	2200      	movs	r2, #0
 800219e:	4619      	mov	r1, r3
 80021a0:	4819      	ldr	r0, [pc, #100]	; (8002208 <MX_TIM1_Init+0x150>)
 80021a2:	f002 fb4f 	bl	8004844 <HAL_TIM_PWM_ConfigChannel>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <MX_TIM1_Init+0xf8>
	{
		Error_Handler();
 80021ac:	f000 f942 	bl	8002434 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80021b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021b4:	2204      	movs	r2, #4
 80021b6:	4619      	mov	r1, r3
 80021b8:	4813      	ldr	r0, [pc, #76]	; (8002208 <MX_TIM1_Init+0x150>)
 80021ba:	f002 fb43 	bl	8004844 <HAL_TIM_PWM_ConfigChannel>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <MX_TIM1_Init+0x110>
	{
		Error_Handler();
 80021c4:	f000 f936 	bl	8002434 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80021c8:	2300      	movs	r3, #0
 80021ca:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80021cc:	2300      	movs	r3, #0
 80021ce:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80021d0:	2300      	movs	r3, #0
 80021d2:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80021d4:	2300      	movs	r3, #0
 80021d6:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80021d8:	2300      	movs	r3, #0
 80021da:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80021dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021e0:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80021e2:	2300      	movs	r3, #0
 80021e4:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80021e6:	1d3b      	adds	r3, r7, #4
 80021e8:	4619      	mov	r1, r3
 80021ea:	4807      	ldr	r0, [pc, #28]	; (8002208 <MX_TIM1_Init+0x150>)
 80021ec:	f002 ffee 	bl	80051cc <HAL_TIMEx_ConfigBreakDeadTime>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <MX_TIM1_Init+0x142>
	{
		Error_Handler();
 80021f6:	f000 f91d 	bl	8002434 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 80021fa:	4803      	ldr	r0, [pc, #12]	; (8002208 <MX_TIM1_Init+0x150>)
 80021fc:	f000 fa10 	bl	8002620 <HAL_TIM_MspPostInit>

}
 8002200:	bf00      	nop
 8002202:	3758      	adds	r7, #88	; 0x58
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	20000154 	.word	0x20000154
 800220c:	40010000 	.word	0x40010000

08002210 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002216:	f107 0308 	add.w	r3, r7, #8
 800221a:	2200      	movs	r2, #0
 800221c:	601a      	str	r2, [r3, #0]
 800221e:	605a      	str	r2, [r3, #4]
 8002220:	609a      	str	r2, [r3, #8]
 8002222:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002224:	463b      	mov	r3, r7
 8002226:	2200      	movs	r2, #0
 8002228:	601a      	str	r2, [r3, #0]
 800222a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 800222c:	4b1d      	ldr	r3, [pc, #116]	; (80022a4 <MX_TIM3_Init+0x94>)
 800222e:	4a1e      	ldr	r2, [pc, #120]	; (80022a8 <MX_TIM3_Init+0x98>)
 8002230:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 83;
 8002232:	4b1c      	ldr	r3, [pc, #112]	; (80022a4 <MX_TIM3_Init+0x94>)
 8002234:	2253      	movs	r2, #83	; 0x53
 8002236:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002238:	4b1a      	ldr	r3, [pc, #104]	; (80022a4 <MX_TIM3_Init+0x94>)
 800223a:	2200      	movs	r2, #0
 800223c:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 800223e:	4b19      	ldr	r3, [pc, #100]	; (80022a4 <MX_TIM3_Init+0x94>)
 8002240:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002244:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002246:	4b17      	ldr	r3, [pc, #92]	; (80022a4 <MX_TIM3_Init+0x94>)
 8002248:	2200      	movs	r2, #0
 800224a:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800224c:	4b15      	ldr	r3, [pc, #84]	; (80022a4 <MX_TIM3_Init+0x94>)
 800224e:	2200      	movs	r2, #0
 8002250:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002252:	4814      	ldr	r0, [pc, #80]	; (80022a4 <MX_TIM3_Init+0x94>)
 8002254:	f002 f942 	bl	80044dc <HAL_TIM_Base_Init>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <MX_TIM3_Init+0x52>
	{
		Error_Handler();
 800225e:	f000 f8e9 	bl	8002434 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002262:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002266:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002268:	f107 0308 	add.w	r3, r7, #8
 800226c:	4619      	mov	r1, r3
 800226e:	480d      	ldr	r0, [pc, #52]	; (80022a4 <MX_TIM3_Init+0x94>)
 8002270:	f002 fbaa 	bl	80049c8 <HAL_TIM_ConfigClockSource>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <MX_TIM3_Init+0x6e>
	{
		Error_Handler();
 800227a:	f000 f8db 	bl	8002434 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800227e:	2300      	movs	r3, #0
 8002280:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002282:	2300      	movs	r3, #0
 8002284:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002286:	463b      	mov	r3, r7
 8002288:	4619      	mov	r1, r3
 800228a:	4806      	ldr	r0, [pc, #24]	; (80022a4 <MX_TIM3_Init+0x94>)
 800228c:	f002 ff30 	bl	80050f0 <HAL_TIMEx_MasterConfigSynchronization>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <MX_TIM3_Init+0x8a>
	{
		Error_Handler();
 8002296:	f000 f8cd 	bl	8002434 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 800229a:	bf00      	nop
 800229c:	3718      	adds	r7, #24
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	2000019c 	.word	0x2000019c
 80022a8:	40000400 	.word	0x40000400

080022ac <MX_USART6_UART_Init>:
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 80022b0:	4b11      	ldr	r3, [pc, #68]	; (80022f8 <MX_USART6_UART_Init+0x4c>)
 80022b2:	4a12      	ldr	r2, [pc, #72]	; (80022fc <MX_USART6_UART_Init+0x50>)
 80022b4:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 9600;
 80022b6:	4b10      	ldr	r3, [pc, #64]	; (80022f8 <MX_USART6_UART_Init+0x4c>)
 80022b8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80022bc:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80022be:	4b0e      	ldr	r3, [pc, #56]	; (80022f8 <MX_USART6_UART_Init+0x4c>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 80022c4:	4b0c      	ldr	r3, [pc, #48]	; (80022f8 <MX_USART6_UART_Init+0x4c>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 80022ca:	4b0b      	ldr	r3, [pc, #44]	; (80022f8 <MX_USART6_UART_Init+0x4c>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 80022d0:	4b09      	ldr	r3, [pc, #36]	; (80022f8 <MX_USART6_UART_Init+0x4c>)
 80022d2:	220c      	movs	r2, #12
 80022d4:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022d6:	4b08      	ldr	r3, [pc, #32]	; (80022f8 <MX_USART6_UART_Init+0x4c>)
 80022d8:	2200      	movs	r2, #0
 80022da:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80022dc:	4b06      	ldr	r3, [pc, #24]	; (80022f8 <MX_USART6_UART_Init+0x4c>)
 80022de:	2200      	movs	r2, #0
 80022e0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK)
 80022e2:	4805      	ldr	r0, [pc, #20]	; (80022f8 <MX_USART6_UART_Init+0x4c>)
 80022e4:	f002 ffc4 	bl	8005270 <HAL_UART_Init>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <MX_USART6_UART_Init+0x46>
	{
		Error_Handler();
 80022ee:	f000 f8a1 	bl	8002434 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 80022f2:	bf00      	nop
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	200001e4 	.word	0x200001e4
 80022fc:	40011400 	.word	0x40011400

08002300 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b088      	sub	sp, #32
 8002304:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002306:	f107 030c 	add.w	r3, r7, #12
 800230a:	2200      	movs	r2, #0
 800230c:	601a      	str	r2, [r3, #0]
 800230e:	605a      	str	r2, [r3, #4]
 8002310:	609a      	str	r2, [r3, #8]
 8002312:	60da      	str	r2, [r3, #12]
 8002314:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002316:	2300      	movs	r3, #0
 8002318:	60bb      	str	r3, [r7, #8]
 800231a:	4b42      	ldr	r3, [pc, #264]	; (8002424 <MX_GPIO_Init+0x124>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	4a41      	ldr	r2, [pc, #260]	; (8002424 <MX_GPIO_Init+0x124>)
 8002320:	f043 0304 	orr.w	r3, r3, #4
 8002324:	6313      	str	r3, [r2, #48]	; 0x30
 8002326:	4b3f      	ldr	r3, [pc, #252]	; (8002424 <MX_GPIO_Init+0x124>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232a:	f003 0304 	and.w	r3, r3, #4
 800232e:	60bb      	str	r3, [r7, #8]
 8002330:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002332:	2300      	movs	r3, #0
 8002334:	607b      	str	r3, [r7, #4]
 8002336:	4b3b      	ldr	r3, [pc, #236]	; (8002424 <MX_GPIO_Init+0x124>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233a:	4a3a      	ldr	r2, [pc, #232]	; (8002424 <MX_GPIO_Init+0x124>)
 800233c:	f043 0301 	orr.w	r3, r3, #1
 8002340:	6313      	str	r3, [r2, #48]	; 0x30
 8002342:	4b38      	ldr	r3, [pc, #224]	; (8002424 <MX_GPIO_Init+0x124>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	607b      	str	r3, [r7, #4]
 800234c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800234e:	2300      	movs	r3, #0
 8002350:	603b      	str	r3, [r7, #0]
 8002352:	4b34      	ldr	r3, [pc, #208]	; (8002424 <MX_GPIO_Init+0x124>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002356:	4a33      	ldr	r2, [pc, #204]	; (8002424 <MX_GPIO_Init+0x124>)
 8002358:	f043 0302 	orr.w	r3, r3, #2
 800235c:	6313      	str	r3, [r2, #48]	; 0x30
 800235e:	4b31      	ldr	r3, [pc, #196]	; (8002424 <MX_GPIO_Init+0x124>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	603b      	str	r3, [r7, #0]
 8002368:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, Forward_Right_Pin|Forward_Left_Pin, GPIO_PIN_RESET);
 800236a:	2200      	movs	r2, #0
 800236c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8002370:	482d      	ldr	r0, [pc, #180]	; (8002428 <MX_GPIO_Init+0x128>)
 8002372:	f000 fd55 	bl	8002e20 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, Front_Ultrasonic_Pin|Back_Ultrasonic_Pin|Right_Ultrasonic_Pin|Left_Ultrasonic_Pin
 8002376:	2200      	movs	r2, #0
 8002378:	f248 01ff 	movw	r1, #33023	; 0x80ff
 800237c:	482b      	ldr	r0, [pc, #172]	; (800242c <MX_GPIO_Init+0x12c>)
 800237e:	f000 fd4f 	bl	8002e20 <HAL_GPIO_WritePin>
			|Right_Blind_Pin|Left_Blind_Pin|Selector_0_Pin|Backward_Right_Pin
			|Selector_2_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, Selector_1_Pin|CE_Pin|CSN_Pin|Backward_Left_Pin
 8002382:	2200      	movs	r2, #0
 8002384:	f243 0107 	movw	r1, #12295	; 0x3007
 8002388:	4829      	ldr	r0, [pc, #164]	; (8002430 <MX_GPIO_Init+0x130>)
 800238a:	f000 fd49 	bl	8002e20 <HAL_GPIO_WritePin>
			|Buzzer_LED_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pins : Forward_Right_Pin Forward_Left_Pin */
	GPIO_InitStruct.Pin = Forward_Right_Pin|Forward_Left_Pin;
 800238e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002392:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002394:	2301      	movs	r3, #1
 8002396:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002398:	2300      	movs	r3, #0
 800239a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800239c:	2300      	movs	r3, #0
 800239e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023a0:	f107 030c 	add.w	r3, r7, #12
 80023a4:	4619      	mov	r1, r3
 80023a6:	4820      	ldr	r0, [pc, #128]	; (8002428 <MX_GPIO_Init+0x128>)
 80023a8:	f000 fb9e 	bl	8002ae8 <HAL_GPIO_Init>

	/*Configure GPIO pins : Front_Ultrasonic_Pin Back_Ultrasonic_Pin Right_Ultrasonic_Pin Left_Ultrasonic_Pin
                           Right_Blind_Pin Left_Blind_Pin Selector_0_Pin Backward_Right_Pin
                           Selector_2_Pin */
	GPIO_InitStruct.Pin = Front_Ultrasonic_Pin|Back_Ultrasonic_Pin|Right_Ultrasonic_Pin|Left_Ultrasonic_Pin
 80023ac:	f248 03ff 	movw	r3, #33023	; 0x80ff
 80023b0:	60fb      	str	r3, [r7, #12]
			|Right_Blind_Pin|Left_Blind_Pin|Selector_0_Pin|Backward_Right_Pin
			|Selector_2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023b2:	2301      	movs	r3, #1
 80023b4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b6:	2300      	movs	r3, #0
 80023b8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ba:	2300      	movs	r3, #0
 80023bc:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023be:	f107 030c 	add.w	r3, r7, #12
 80023c2:	4619      	mov	r1, r3
 80023c4:	4819      	ldr	r0, [pc, #100]	; (800242c <MX_GPIO_Init+0x12c>)
 80023c6:	f000 fb8f 	bl	8002ae8 <HAL_GPIO_Init>

	/*Configure GPIO pins : Selector_1_Pin CE_Pin CSN_Pin Backward_Left_Pin
                           Buzzer_LED_Pin */
	GPIO_InitStruct.Pin = Selector_1_Pin|CE_Pin|CSN_Pin|Backward_Left_Pin
 80023ca:	f243 0307 	movw	r3, #12295	; 0x3007
 80023ce:	60fb      	str	r3, [r7, #12]
			|Buzzer_LED_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023d0:	2301      	movs	r3, #1
 80023d2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d4:	2300      	movs	r3, #0
 80023d6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d8:	2300      	movs	r3, #0
 80023da:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023dc:	f107 030c 	add.w	r3, r7, #12
 80023e0:	4619      	mov	r1, r3
 80023e2:	4813      	ldr	r0, [pc, #76]	; (8002430 <MX_GPIO_Init+0x130>)
 80023e4:	f000 fb80 	bl	8002ae8 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA10 */
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 80023e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023ec:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023ee:	2300      	movs	r3, #0
 80023f0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f2:	2300      	movs	r3, #0
 80023f4:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023f6:	f107 030c 	add.w	r3, r7, #12
 80023fa:	4619      	mov	r1, r3
 80023fc:	480b      	ldr	r0, [pc, #44]	; (800242c <MX_GPIO_Init+0x12c>)
 80023fe:	f000 fb73 	bl	8002ae8 <HAL_GPIO_Init>

	/*Configure GPIO pins : Right_IR_Pin Left_IR_Pin */
	GPIO_InitStruct.Pin = Right_IR_Pin|Left_IR_Pin;
 8002402:	2390      	movs	r3, #144	; 0x90
 8002404:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002406:	2300      	movs	r3, #0
 8002408:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240a:	2300      	movs	r3, #0
 800240c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800240e:	f107 030c 	add.w	r3, r7, #12
 8002412:	4619      	mov	r1, r3
 8002414:	4806      	ldr	r0, [pc, #24]	; (8002430 <MX_GPIO_Init+0x130>)
 8002416:	f000 fb67 	bl	8002ae8 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800241a:	bf00      	nop
 800241c:	3720      	adds	r7, #32
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	40023800 	.word	0x40023800
 8002428:	40020800 	.word	0x40020800
 800242c:	40020000 	.word	0x40020000
 8002430:	40020400 	.word	0x40020400

08002434 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002438:	b672      	cpsid	i
}
 800243a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800243c:	e7fe      	b.n	800243c <Error_Handler+0x8>
	...

08002440 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002446:	2300      	movs	r3, #0
 8002448:	607b      	str	r3, [r7, #4]
 800244a:	4b10      	ldr	r3, [pc, #64]	; (800248c <HAL_MspInit+0x4c>)
 800244c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244e:	4a0f      	ldr	r2, [pc, #60]	; (800248c <HAL_MspInit+0x4c>)
 8002450:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002454:	6453      	str	r3, [r2, #68]	; 0x44
 8002456:	4b0d      	ldr	r3, [pc, #52]	; (800248c <HAL_MspInit+0x4c>)
 8002458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800245e:	607b      	str	r3, [r7, #4]
 8002460:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002462:	2300      	movs	r3, #0
 8002464:	603b      	str	r3, [r7, #0]
 8002466:	4b09      	ldr	r3, [pc, #36]	; (800248c <HAL_MspInit+0x4c>)
 8002468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246a:	4a08      	ldr	r2, [pc, #32]	; (800248c <HAL_MspInit+0x4c>)
 800246c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002470:	6413      	str	r3, [r2, #64]	; 0x40
 8002472:	4b06      	ldr	r3, [pc, #24]	; (800248c <HAL_MspInit+0x4c>)
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800247a:	603b      	str	r3, [r7, #0]
 800247c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800247e:	bf00      	nop
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	40023800 	.word	0x40023800

08002490 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b08a      	sub	sp, #40	; 0x28
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002498:	f107 0314 	add.w	r3, r7, #20
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	605a      	str	r2, [r3, #4]
 80024a2:	609a      	str	r2, [r3, #8]
 80024a4:	60da      	str	r2, [r3, #12]
 80024a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a19      	ldr	r2, [pc, #100]	; (8002514 <HAL_I2C_MspInit+0x84>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d12c      	bne.n	800250c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024b2:	2300      	movs	r3, #0
 80024b4:	613b      	str	r3, [r7, #16]
 80024b6:	4b18      	ldr	r3, [pc, #96]	; (8002518 <HAL_I2C_MspInit+0x88>)
 80024b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ba:	4a17      	ldr	r2, [pc, #92]	; (8002518 <HAL_I2C_MspInit+0x88>)
 80024bc:	f043 0302 	orr.w	r3, r3, #2
 80024c0:	6313      	str	r3, [r2, #48]	; 0x30
 80024c2:	4b15      	ldr	r3, [pc, #84]	; (8002518 <HAL_I2C_MspInit+0x88>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	613b      	str	r3, [r7, #16]
 80024cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80024ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80024d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024d4:	2312      	movs	r3, #18
 80024d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d8:	2300      	movs	r3, #0
 80024da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024dc:	2303      	movs	r3, #3
 80024de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80024e0:	2304      	movs	r3, #4
 80024e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024e4:	f107 0314 	add.w	r3, r7, #20
 80024e8:	4619      	mov	r1, r3
 80024ea:	480c      	ldr	r0, [pc, #48]	; (800251c <HAL_I2C_MspInit+0x8c>)
 80024ec:	f000 fafc 	bl	8002ae8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80024f0:	2300      	movs	r3, #0
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	4b08      	ldr	r3, [pc, #32]	; (8002518 <HAL_I2C_MspInit+0x88>)
 80024f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f8:	4a07      	ldr	r2, [pc, #28]	; (8002518 <HAL_I2C_MspInit+0x88>)
 80024fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80024fe:	6413      	str	r3, [r2, #64]	; 0x40
 8002500:	4b05      	ldr	r3, [pc, #20]	; (8002518 <HAL_I2C_MspInit+0x88>)
 8002502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002504:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002508:	60fb      	str	r3, [r7, #12]
 800250a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800250c:	bf00      	nop
 800250e:	3728      	adds	r7, #40	; 0x28
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	40005400 	.word	0x40005400
 8002518:	40023800 	.word	0x40023800
 800251c:	40020400 	.word	0x40020400

08002520 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b08a      	sub	sp, #40	; 0x28
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002528:	f107 0314 	add.w	r3, r7, #20
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	605a      	str	r2, [r3, #4]
 8002532:	609a      	str	r2, [r3, #8]
 8002534:	60da      	str	r2, [r3, #12]
 8002536:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a19      	ldr	r2, [pc, #100]	; (80025a4 <HAL_SPI_MspInit+0x84>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d12c      	bne.n	800259c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002542:	2300      	movs	r3, #0
 8002544:	613b      	str	r3, [r7, #16]
 8002546:	4b18      	ldr	r3, [pc, #96]	; (80025a8 <HAL_SPI_MspInit+0x88>)
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	4a17      	ldr	r2, [pc, #92]	; (80025a8 <HAL_SPI_MspInit+0x88>)
 800254c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002550:	6413      	str	r3, [r2, #64]	; 0x40
 8002552:	4b15      	ldr	r3, [pc, #84]	; (80025a8 <HAL_SPI_MspInit+0x88>)
 8002554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002556:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800255a:	613b      	str	r3, [r7, #16]
 800255c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800255e:	2300      	movs	r3, #0
 8002560:	60fb      	str	r3, [r7, #12]
 8002562:	4b11      	ldr	r3, [pc, #68]	; (80025a8 <HAL_SPI_MspInit+0x88>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	4a10      	ldr	r2, [pc, #64]	; (80025a8 <HAL_SPI_MspInit+0x88>)
 8002568:	f043 0302 	orr.w	r3, r3, #2
 800256c:	6313      	str	r3, [r2, #48]	; 0x30
 800256e:	4b0e      	ldr	r3, [pc, #56]	; (80025a8 <HAL_SPI_MspInit+0x88>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	60fb      	str	r3, [r7, #12]
 8002578:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 800257a:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 800257e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002580:	2302      	movs	r3, #2
 8002582:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002584:	2300      	movs	r3, #0
 8002586:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002588:	2303      	movs	r3, #3
 800258a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800258c:	2305      	movs	r3, #5
 800258e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002590:	f107 0314 	add.w	r3, r7, #20
 8002594:	4619      	mov	r1, r3
 8002596:	4805      	ldr	r0, [pc, #20]	; (80025ac <HAL_SPI_MspInit+0x8c>)
 8002598:	f000 faa6 	bl	8002ae8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800259c:	bf00      	nop
 800259e:	3728      	adds	r7, #40	; 0x28
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	40003800 	.word	0x40003800
 80025a8:	40023800 	.word	0x40023800
 80025ac:	40020400 	.word	0x40020400

080025b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a15      	ldr	r2, [pc, #84]	; (8002614 <HAL_TIM_Base_MspInit+0x64>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d10e      	bne.n	80025e0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80025c2:	2300      	movs	r3, #0
 80025c4:	60fb      	str	r3, [r7, #12]
 80025c6:	4b14      	ldr	r3, [pc, #80]	; (8002618 <HAL_TIM_Base_MspInit+0x68>)
 80025c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ca:	4a13      	ldr	r2, [pc, #76]	; (8002618 <HAL_TIM_Base_MspInit+0x68>)
 80025cc:	f043 0301 	orr.w	r3, r3, #1
 80025d0:	6453      	str	r3, [r2, #68]	; 0x44
 80025d2:	4b11      	ldr	r3, [pc, #68]	; (8002618 <HAL_TIM_Base_MspInit+0x68>)
 80025d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	60fb      	str	r3, [r7, #12]
 80025dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80025de:	e012      	b.n	8002606 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a0d      	ldr	r2, [pc, #52]	; (800261c <HAL_TIM_Base_MspInit+0x6c>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d10d      	bne.n	8002606 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025ea:	2300      	movs	r3, #0
 80025ec:	60bb      	str	r3, [r7, #8]
 80025ee:	4b0a      	ldr	r3, [pc, #40]	; (8002618 <HAL_TIM_Base_MspInit+0x68>)
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	4a09      	ldr	r2, [pc, #36]	; (8002618 <HAL_TIM_Base_MspInit+0x68>)
 80025f4:	f043 0302 	orr.w	r3, r3, #2
 80025f8:	6413      	str	r3, [r2, #64]	; 0x40
 80025fa:	4b07      	ldr	r3, [pc, #28]	; (8002618 <HAL_TIM_Base_MspInit+0x68>)
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	60bb      	str	r3, [r7, #8]
 8002604:	68bb      	ldr	r3, [r7, #8]
}
 8002606:	bf00      	nop
 8002608:	3714      	adds	r7, #20
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	40010000 	.word	0x40010000
 8002618:	40023800 	.word	0x40023800
 800261c:	40000400 	.word	0x40000400

08002620 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b088      	sub	sp, #32
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002628:	f107 030c 	add.w	r3, r7, #12
 800262c:	2200      	movs	r2, #0
 800262e:	601a      	str	r2, [r3, #0]
 8002630:	605a      	str	r2, [r3, #4]
 8002632:	609a      	str	r2, [r3, #8]
 8002634:	60da      	str	r2, [r3, #12]
 8002636:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a12      	ldr	r2, [pc, #72]	; (8002688 <HAL_TIM_MspPostInit+0x68>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d11e      	bne.n	8002680 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002642:	2300      	movs	r3, #0
 8002644:	60bb      	str	r3, [r7, #8]
 8002646:	4b11      	ldr	r3, [pc, #68]	; (800268c <HAL_TIM_MspPostInit+0x6c>)
 8002648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264a:	4a10      	ldr	r2, [pc, #64]	; (800268c <HAL_TIM_MspPostInit+0x6c>)
 800264c:	f043 0301 	orr.w	r3, r3, #1
 8002650:	6313      	str	r3, [r2, #48]	; 0x30
 8002652:	4b0e      	ldr	r3, [pc, #56]	; (800268c <HAL_TIM_MspPostInit+0x6c>)
 8002654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	60bb      	str	r3, [r7, #8]
 800265c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800265e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002662:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002664:	2302      	movs	r3, #2
 8002666:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002668:	2300      	movs	r3, #0
 800266a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800266c:	2300      	movs	r3, #0
 800266e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002670:	2301      	movs	r3, #1
 8002672:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002674:	f107 030c 	add.w	r3, r7, #12
 8002678:	4619      	mov	r1, r3
 800267a:	4805      	ldr	r0, [pc, #20]	; (8002690 <HAL_TIM_MspPostInit+0x70>)
 800267c:	f000 fa34 	bl	8002ae8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002680:	bf00      	nop
 8002682:	3720      	adds	r7, #32
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	40010000 	.word	0x40010000
 800268c:	40023800 	.word	0x40023800
 8002690:	40020000 	.word	0x40020000

08002694 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b08a      	sub	sp, #40	; 0x28
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800269c:	f107 0314 	add.w	r3, r7, #20
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	605a      	str	r2, [r3, #4]
 80026a6:	609a      	str	r2, [r3, #8]
 80026a8:	60da      	str	r2, [r3, #12]
 80026aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a19      	ldr	r2, [pc, #100]	; (8002718 <HAL_UART_MspInit+0x84>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d12c      	bne.n	8002710 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80026b6:	2300      	movs	r3, #0
 80026b8:	613b      	str	r3, [r7, #16]
 80026ba:	4b18      	ldr	r3, [pc, #96]	; (800271c <HAL_UART_MspInit+0x88>)
 80026bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026be:	4a17      	ldr	r2, [pc, #92]	; (800271c <HAL_UART_MspInit+0x88>)
 80026c0:	f043 0320 	orr.w	r3, r3, #32
 80026c4:	6453      	str	r3, [r2, #68]	; 0x44
 80026c6:	4b15      	ldr	r3, [pc, #84]	; (800271c <HAL_UART_MspInit+0x88>)
 80026c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ca:	f003 0320 	and.w	r3, r3, #32
 80026ce:	613b      	str	r3, [r7, #16]
 80026d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d2:	2300      	movs	r3, #0
 80026d4:	60fb      	str	r3, [r7, #12]
 80026d6:	4b11      	ldr	r3, [pc, #68]	; (800271c <HAL_UART_MspInit+0x88>)
 80026d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026da:	4a10      	ldr	r2, [pc, #64]	; (800271c <HAL_UART_MspInit+0x88>)
 80026dc:	f043 0301 	orr.w	r3, r3, #1
 80026e0:	6313      	str	r3, [r2, #48]	; 0x30
 80026e2:	4b0e      	ldr	r3, [pc, #56]	; (800271c <HAL_UART_MspInit+0x88>)
 80026e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	60fb      	str	r3, [r7, #12]
 80026ec:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PA11     ------> USART6_TX
    PA12     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80026ee:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80026f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f4:	2302      	movs	r3, #2
 80026f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f8:	2300      	movs	r3, #0
 80026fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026fc:	2303      	movs	r3, #3
 80026fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002700:	2308      	movs	r3, #8
 8002702:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002704:	f107 0314 	add.w	r3, r7, #20
 8002708:	4619      	mov	r1, r3
 800270a:	4805      	ldr	r0, [pc, #20]	; (8002720 <HAL_UART_MspInit+0x8c>)
 800270c:	f000 f9ec 	bl	8002ae8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002710:	bf00      	nop
 8002712:	3728      	adds	r7, #40	; 0x28
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	40011400 	.word	0x40011400
 800271c:	40023800 	.word	0x40023800
 8002720:	40020000 	.word	0x40020000

08002724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002728:	e7fe      	b.n	8002728 <NMI_Handler+0x4>

0800272a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800272a:	b480      	push	{r7}
 800272c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800272e:	e7fe      	b.n	800272e <HardFault_Handler+0x4>

08002730 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002734:	e7fe      	b.n	8002734 <MemManage_Handler+0x4>

08002736 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002736:	b480      	push	{r7}
 8002738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800273a:	e7fe      	b.n	800273a <BusFault_Handler+0x4>

0800273c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002740:	e7fe      	b.n	8002740 <UsageFault_Handler+0x4>

08002742 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002742:	b480      	push	{r7}
 8002744:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002746:	bf00      	nop
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002754:	bf00      	nop
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr

0800275e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800275e:	b480      	push	{r7}
 8002760:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002762:	bf00      	nop
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002770:	f000 f890 	bl	8002894 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002774:	bf00      	nop
 8002776:	bd80      	pop	{r7, pc}

08002778 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800277c:	4b06      	ldr	r3, [pc, #24]	; (8002798 <SystemInit+0x20>)
 800277e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002782:	4a05      	ldr	r2, [pc, #20]	; (8002798 <SystemInit+0x20>)
 8002784:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002788:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800278c:	bf00      	nop
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	e000ed00 	.word	0xe000ed00

0800279c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800279c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80027a0:	480d      	ldr	r0, [pc, #52]	; (80027d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80027a2:	490e      	ldr	r1, [pc, #56]	; (80027dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80027a4:	4a0e      	ldr	r2, [pc, #56]	; (80027e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80027a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027a8:	e002      	b.n	80027b0 <LoopCopyDataInit>

080027aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027ae:	3304      	adds	r3, #4

080027b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027b4:	d3f9      	bcc.n	80027aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027b6:	4a0b      	ldr	r2, [pc, #44]	; (80027e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80027b8:	4c0b      	ldr	r4, [pc, #44]	; (80027e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80027ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027bc:	e001      	b.n	80027c2 <LoopFillZerobss>

080027be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027c0:	3204      	adds	r2, #4

080027c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027c4:	d3fb      	bcc.n	80027be <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80027c6:	f7ff ffd7 	bl	8002778 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027ca:	f003 f91b 	bl	8005a04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027ce:	f7ff fa9d 	bl	8001d0c <main>
  bx  lr    
 80027d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80027d4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80027d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027dc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80027e0:	08005a9c 	.word	0x08005a9c
  ldr r2, =_sbss
 80027e4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80027e8:	2000022c 	.word	0x2000022c

080027ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027ec:	e7fe      	b.n	80027ec <ADC_IRQHandler>
	...

080027f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027f4:	4b0e      	ldr	r3, [pc, #56]	; (8002830 <HAL_Init+0x40>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a0d      	ldr	r2, [pc, #52]	; (8002830 <HAL_Init+0x40>)
 80027fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002800:	4b0b      	ldr	r3, [pc, #44]	; (8002830 <HAL_Init+0x40>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a0a      	ldr	r2, [pc, #40]	; (8002830 <HAL_Init+0x40>)
 8002806:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800280a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800280c:	4b08      	ldr	r3, [pc, #32]	; (8002830 <HAL_Init+0x40>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a07      	ldr	r2, [pc, #28]	; (8002830 <HAL_Init+0x40>)
 8002812:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002816:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002818:	2003      	movs	r0, #3
 800281a:	f000 f931 	bl	8002a80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800281e:	200f      	movs	r0, #15
 8002820:	f000 f808 	bl	8002834 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002824:	f7ff fe0c 	bl	8002440 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	40023c00 	.word	0x40023c00

08002834 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800283c:	4b12      	ldr	r3, [pc, #72]	; (8002888 <HAL_InitTick+0x54>)
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	4b12      	ldr	r3, [pc, #72]	; (800288c <HAL_InitTick+0x58>)
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	4619      	mov	r1, r3
 8002846:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800284a:	fbb3 f3f1 	udiv	r3, r3, r1
 800284e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002852:	4618      	mov	r0, r3
 8002854:	f000 f93b 	bl	8002ace <HAL_SYSTICK_Config>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e00e      	b.n	8002880 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2b0f      	cmp	r3, #15
 8002866:	d80a      	bhi.n	800287e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002868:	2200      	movs	r2, #0
 800286a:	6879      	ldr	r1, [r7, #4]
 800286c:	f04f 30ff 	mov.w	r0, #4294967295
 8002870:	f000 f911 	bl	8002a96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002874:	4a06      	ldr	r2, [pc, #24]	; (8002890 <HAL_InitTick+0x5c>)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800287a:	2300      	movs	r3, #0
 800287c:	e000      	b.n	8002880 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
}
 8002880:	4618      	mov	r0, r3
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	20000050 	.word	0x20000050
 800288c:	20000058 	.word	0x20000058
 8002890:	20000054 	.word	0x20000054

08002894 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002898:	4b06      	ldr	r3, [pc, #24]	; (80028b4 <HAL_IncTick+0x20>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	461a      	mov	r2, r3
 800289e:	4b06      	ldr	r3, [pc, #24]	; (80028b8 <HAL_IncTick+0x24>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4413      	add	r3, r2
 80028a4:	4a04      	ldr	r2, [pc, #16]	; (80028b8 <HAL_IncTick+0x24>)
 80028a6:	6013      	str	r3, [r2, #0]
}
 80028a8:	bf00      	nop
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	20000058 	.word	0x20000058
 80028b8:	20000228 	.word	0x20000228

080028bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  return uwTick;
 80028c0:	4b03      	ldr	r3, [pc, #12]	; (80028d0 <HAL_GetTick+0x14>)
 80028c2:	681b      	ldr	r3, [r3, #0]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	20000228 	.word	0x20000228

080028d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028dc:	f7ff ffee 	bl	80028bc <HAL_GetTick>
 80028e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ec:	d005      	beq.n	80028fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028ee:	4b0a      	ldr	r3, [pc, #40]	; (8002918 <HAL_Delay+0x44>)
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	461a      	mov	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	4413      	add	r3, r2
 80028f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028fa:	bf00      	nop
 80028fc:	f7ff ffde 	bl	80028bc <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	429a      	cmp	r2, r3
 800290a:	d8f7      	bhi.n	80028fc <HAL_Delay+0x28>
  {
  }
}
 800290c:	bf00      	nop
 800290e:	bf00      	nop
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	20000058 	.word	0x20000058

0800291c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f003 0307 	and.w	r3, r3, #7
 800292a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800292c:	4b0c      	ldr	r3, [pc, #48]	; (8002960 <__NVIC_SetPriorityGrouping+0x44>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002932:	68ba      	ldr	r2, [r7, #8]
 8002934:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002938:	4013      	ands	r3, r2
 800293a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002944:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002948:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800294c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800294e:	4a04      	ldr	r2, [pc, #16]	; (8002960 <__NVIC_SetPriorityGrouping+0x44>)
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	60d3      	str	r3, [r2, #12]
}
 8002954:	bf00      	nop
 8002956:	3714      	adds	r7, #20
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	e000ed00 	.word	0xe000ed00

08002964 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002968:	4b04      	ldr	r3, [pc, #16]	; (800297c <__NVIC_GetPriorityGrouping+0x18>)
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	0a1b      	lsrs	r3, r3, #8
 800296e:	f003 0307 	and.w	r3, r3, #7
}
 8002972:	4618      	mov	r0, r3
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr
 800297c:	e000ed00 	.word	0xe000ed00

08002980 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	4603      	mov	r3, r0
 8002988:	6039      	str	r1, [r7, #0]
 800298a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800298c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002990:	2b00      	cmp	r3, #0
 8002992:	db0a      	blt.n	80029aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	b2da      	uxtb	r2, r3
 8002998:	490c      	ldr	r1, [pc, #48]	; (80029cc <__NVIC_SetPriority+0x4c>)
 800299a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299e:	0112      	lsls	r2, r2, #4
 80029a0:	b2d2      	uxtb	r2, r2
 80029a2:	440b      	add	r3, r1
 80029a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029a8:	e00a      	b.n	80029c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	b2da      	uxtb	r2, r3
 80029ae:	4908      	ldr	r1, [pc, #32]	; (80029d0 <__NVIC_SetPriority+0x50>)
 80029b0:	79fb      	ldrb	r3, [r7, #7]
 80029b2:	f003 030f 	and.w	r3, r3, #15
 80029b6:	3b04      	subs	r3, #4
 80029b8:	0112      	lsls	r2, r2, #4
 80029ba:	b2d2      	uxtb	r2, r2
 80029bc:	440b      	add	r3, r1
 80029be:	761a      	strb	r2, [r3, #24]
}
 80029c0:	bf00      	nop
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr
 80029cc:	e000e100 	.word	0xe000e100
 80029d0:	e000ed00 	.word	0xe000ed00

080029d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b089      	sub	sp, #36	; 0x24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f003 0307 	and.w	r3, r3, #7
 80029e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	f1c3 0307 	rsb	r3, r3, #7
 80029ee:	2b04      	cmp	r3, #4
 80029f0:	bf28      	it	cs
 80029f2:	2304      	movcs	r3, #4
 80029f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	3304      	adds	r3, #4
 80029fa:	2b06      	cmp	r3, #6
 80029fc:	d902      	bls.n	8002a04 <NVIC_EncodePriority+0x30>
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	3b03      	subs	r3, #3
 8002a02:	e000      	b.n	8002a06 <NVIC_EncodePriority+0x32>
 8002a04:	2300      	movs	r3, #0
 8002a06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a08:	f04f 32ff 	mov.w	r2, #4294967295
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a12:	43da      	mvns	r2, r3
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	401a      	ands	r2, r3
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a1c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	fa01 f303 	lsl.w	r3, r1, r3
 8002a26:	43d9      	mvns	r1, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a2c:	4313      	orrs	r3, r2
         );
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3724      	adds	r7, #36	; 0x24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
	...

08002a3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	3b01      	subs	r3, #1
 8002a48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a4c:	d301      	bcc.n	8002a52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e00f      	b.n	8002a72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a52:	4a0a      	ldr	r2, [pc, #40]	; (8002a7c <SysTick_Config+0x40>)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	3b01      	subs	r3, #1
 8002a58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a5a:	210f      	movs	r1, #15
 8002a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a60:	f7ff ff8e 	bl	8002980 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a64:	4b05      	ldr	r3, [pc, #20]	; (8002a7c <SysTick_Config+0x40>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a6a:	4b04      	ldr	r3, [pc, #16]	; (8002a7c <SysTick_Config+0x40>)
 8002a6c:	2207      	movs	r2, #7
 8002a6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	e000e010 	.word	0xe000e010

08002a80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f7ff ff47 	bl	800291c <__NVIC_SetPriorityGrouping>
}
 8002a8e:	bf00      	nop
 8002a90:	3708      	adds	r7, #8
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b086      	sub	sp, #24
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	60b9      	str	r1, [r7, #8]
 8002aa0:	607a      	str	r2, [r7, #4]
 8002aa2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002aa8:	f7ff ff5c 	bl	8002964 <__NVIC_GetPriorityGrouping>
 8002aac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	68b9      	ldr	r1, [r7, #8]
 8002ab2:	6978      	ldr	r0, [r7, #20]
 8002ab4:	f7ff ff8e 	bl	80029d4 <NVIC_EncodePriority>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002abe:	4611      	mov	r1, r2
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff ff5d 	bl	8002980 <__NVIC_SetPriority>
}
 8002ac6:	bf00      	nop
 8002ac8:	3718      	adds	r7, #24
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b082      	sub	sp, #8
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f7ff ffb0 	bl	8002a3c <SysTick_Config>
 8002adc:	4603      	mov	r3, r0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
	...

08002ae8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b089      	sub	sp, #36	; 0x24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002af2:	2300      	movs	r3, #0
 8002af4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002af6:	2300      	movs	r3, #0
 8002af8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002afa:	2300      	movs	r3, #0
 8002afc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002afe:	2300      	movs	r3, #0
 8002b00:	61fb      	str	r3, [r7, #28]
 8002b02:	e159      	b.n	8002db8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b04:	2201      	movs	r2, #1
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	4013      	ands	r3, r2
 8002b16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b18:	693a      	ldr	r2, [r7, #16]
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	f040 8148 	bne.w	8002db2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f003 0303 	and.w	r3, r3, #3
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d005      	beq.n	8002b3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d130      	bne.n	8002b9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	2203      	movs	r2, #3
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	43db      	mvns	r3, r3
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	4013      	ands	r3, r2
 8002b50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	68da      	ldr	r2, [r3, #12]
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b70:	2201      	movs	r2, #1
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	43db      	mvns	r3, r3
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	091b      	lsrs	r3, r3, #4
 8002b86:	f003 0201 	and.w	r2, r3, #1
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f003 0303 	and.w	r3, r3, #3
 8002ba4:	2b03      	cmp	r3, #3
 8002ba6:	d017      	beq.n	8002bd8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	2203      	movs	r2, #3
 8002bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb8:	43db      	mvns	r3, r3
 8002bba:	69ba      	ldr	r2, [r7, #24]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	689a      	ldr	r2, [r3, #8]
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f003 0303 	and.w	r3, r3, #3
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d123      	bne.n	8002c2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	08da      	lsrs	r2, r3, #3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	3208      	adds	r2, #8
 8002bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	f003 0307 	and.w	r3, r3, #7
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	220f      	movs	r2, #15
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	43db      	mvns	r3, r3
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	4013      	ands	r3, r2
 8002c06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	691a      	ldr	r2, [r3, #16]
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	f003 0307 	and.w	r3, r3, #7
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	08da      	lsrs	r2, r3, #3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	3208      	adds	r2, #8
 8002c26:	69b9      	ldr	r1, [r7, #24]
 8002c28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	2203      	movs	r2, #3
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	43db      	mvns	r3, r3
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	4013      	ands	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f003 0203 	and.w	r2, r3, #3
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	f000 80a2 	beq.w	8002db2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c6e:	2300      	movs	r3, #0
 8002c70:	60fb      	str	r3, [r7, #12]
 8002c72:	4b57      	ldr	r3, [pc, #348]	; (8002dd0 <HAL_GPIO_Init+0x2e8>)
 8002c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c76:	4a56      	ldr	r2, [pc, #344]	; (8002dd0 <HAL_GPIO_Init+0x2e8>)
 8002c78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c7c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c7e:	4b54      	ldr	r3, [pc, #336]	; (8002dd0 <HAL_GPIO_Init+0x2e8>)
 8002c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c86:	60fb      	str	r3, [r7, #12]
 8002c88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c8a:	4a52      	ldr	r2, [pc, #328]	; (8002dd4 <HAL_GPIO_Init+0x2ec>)
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	089b      	lsrs	r3, r3, #2
 8002c90:	3302      	adds	r3, #2
 8002c92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	f003 0303 	and.w	r3, r3, #3
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	220f      	movs	r2, #15
 8002ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca6:	43db      	mvns	r3, r3
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	4013      	ands	r3, r2
 8002cac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a49      	ldr	r2, [pc, #292]	; (8002dd8 <HAL_GPIO_Init+0x2f0>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d019      	beq.n	8002cea <HAL_GPIO_Init+0x202>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a48      	ldr	r2, [pc, #288]	; (8002ddc <HAL_GPIO_Init+0x2f4>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d013      	beq.n	8002ce6 <HAL_GPIO_Init+0x1fe>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a47      	ldr	r2, [pc, #284]	; (8002de0 <HAL_GPIO_Init+0x2f8>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d00d      	beq.n	8002ce2 <HAL_GPIO_Init+0x1fa>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a46      	ldr	r2, [pc, #280]	; (8002de4 <HAL_GPIO_Init+0x2fc>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d007      	beq.n	8002cde <HAL_GPIO_Init+0x1f6>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a45      	ldr	r2, [pc, #276]	; (8002de8 <HAL_GPIO_Init+0x300>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d101      	bne.n	8002cda <HAL_GPIO_Init+0x1f2>
 8002cd6:	2304      	movs	r3, #4
 8002cd8:	e008      	b.n	8002cec <HAL_GPIO_Init+0x204>
 8002cda:	2307      	movs	r3, #7
 8002cdc:	e006      	b.n	8002cec <HAL_GPIO_Init+0x204>
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e004      	b.n	8002cec <HAL_GPIO_Init+0x204>
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	e002      	b.n	8002cec <HAL_GPIO_Init+0x204>
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e000      	b.n	8002cec <HAL_GPIO_Init+0x204>
 8002cea:	2300      	movs	r3, #0
 8002cec:	69fa      	ldr	r2, [r7, #28]
 8002cee:	f002 0203 	and.w	r2, r2, #3
 8002cf2:	0092      	lsls	r2, r2, #2
 8002cf4:	4093      	lsls	r3, r2
 8002cf6:	69ba      	ldr	r2, [r7, #24]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cfc:	4935      	ldr	r1, [pc, #212]	; (8002dd4 <HAL_GPIO_Init+0x2ec>)
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	089b      	lsrs	r3, r3, #2
 8002d02:	3302      	adds	r3, #2
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d0a:	4b38      	ldr	r3, [pc, #224]	; (8002dec <HAL_GPIO_Init+0x304>)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	43db      	mvns	r3, r3
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	4013      	ands	r3, r2
 8002d18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d003      	beq.n	8002d2e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d2e:	4a2f      	ldr	r2, [pc, #188]	; (8002dec <HAL_GPIO_Init+0x304>)
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d34:	4b2d      	ldr	r3, [pc, #180]	; (8002dec <HAL_GPIO_Init+0x304>)
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	43db      	mvns	r3, r3
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	4013      	ands	r3, r2
 8002d42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d003      	beq.n	8002d58 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d58:	4a24      	ldr	r2, [pc, #144]	; (8002dec <HAL_GPIO_Init+0x304>)
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d5e:	4b23      	ldr	r3, [pc, #140]	; (8002dec <HAL_GPIO_Init+0x304>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	43db      	mvns	r3, r3
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d003      	beq.n	8002d82 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d82:	4a1a      	ldr	r2, [pc, #104]	; (8002dec <HAL_GPIO_Init+0x304>)
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d88:	4b18      	ldr	r3, [pc, #96]	; (8002dec <HAL_GPIO_Init+0x304>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	43db      	mvns	r3, r3
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	4013      	ands	r3, r2
 8002d96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d003      	beq.n	8002dac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dac:	4a0f      	ldr	r2, [pc, #60]	; (8002dec <HAL_GPIO_Init+0x304>)
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	3301      	adds	r3, #1
 8002db6:	61fb      	str	r3, [r7, #28]
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	2b0f      	cmp	r3, #15
 8002dbc:	f67f aea2 	bls.w	8002b04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002dc0:	bf00      	nop
 8002dc2:	bf00      	nop
 8002dc4:	3724      	adds	r7, #36	; 0x24
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	40023800 	.word	0x40023800
 8002dd4:	40013800 	.word	0x40013800
 8002dd8:	40020000 	.word	0x40020000
 8002ddc:	40020400 	.word	0x40020400
 8002de0:	40020800 	.word	0x40020800
 8002de4:	40020c00 	.word	0x40020c00
 8002de8:	40021000 	.word	0x40021000
 8002dec:	40013c00 	.word	0x40013c00

08002df0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	460b      	mov	r3, r1
 8002dfa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	691a      	ldr	r2, [r3, #16]
 8002e00:	887b      	ldrh	r3, [r7, #2]
 8002e02:	4013      	ands	r3, r2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d002      	beq.n	8002e0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	73fb      	strb	r3, [r7, #15]
 8002e0c:	e001      	b.n	8002e12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3714      	adds	r7, #20
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	460b      	mov	r3, r1
 8002e2a:	807b      	strh	r3, [r7, #2]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e30:	787b      	ldrb	r3, [r7, #1]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d003      	beq.n	8002e3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e36:	887a      	ldrh	r2, [r7, #2]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e3c:	e003      	b.n	8002e46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e3e:	887b      	ldrh	r3, [r7, #2]
 8002e40:	041a      	lsls	r2, r3, #16
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	619a      	str	r2, [r3, #24]
}
 8002e46:	bf00      	nop
 8002e48:	370c      	adds	r7, #12
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
	...

08002e54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e12b      	b.n	80030be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d106      	bne.n	8002e80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f7ff fb08 	bl	8002490 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2224      	movs	r2, #36	; 0x24
 8002e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f022 0201 	bic.w	r2, r2, #1
 8002e96:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ea6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002eb6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002eb8:	f000 fd40 	bl	800393c <HAL_RCC_GetPCLK1Freq>
 8002ebc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	4a81      	ldr	r2, [pc, #516]	; (80030c8 <HAL_I2C_Init+0x274>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d807      	bhi.n	8002ed8 <HAL_I2C_Init+0x84>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	4a80      	ldr	r2, [pc, #512]	; (80030cc <HAL_I2C_Init+0x278>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	bf94      	ite	ls
 8002ed0:	2301      	movls	r3, #1
 8002ed2:	2300      	movhi	r3, #0
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	e006      	b.n	8002ee6 <HAL_I2C_Init+0x92>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	4a7d      	ldr	r2, [pc, #500]	; (80030d0 <HAL_I2C_Init+0x27c>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	bf94      	ite	ls
 8002ee0:	2301      	movls	r3, #1
 8002ee2:	2300      	movhi	r3, #0
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e0e7      	b.n	80030be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	4a78      	ldr	r2, [pc, #480]	; (80030d4 <HAL_I2C_Init+0x280>)
 8002ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef6:	0c9b      	lsrs	r3, r3, #18
 8002ef8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68ba      	ldr	r2, [r7, #8]
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	4a6a      	ldr	r2, [pc, #424]	; (80030c8 <HAL_I2C_Init+0x274>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d802      	bhi.n	8002f28 <HAL_I2C_Init+0xd4>
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	3301      	adds	r3, #1
 8002f26:	e009      	b.n	8002f3c <HAL_I2C_Init+0xe8>
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f2e:	fb02 f303 	mul.w	r3, r2, r3
 8002f32:	4a69      	ldr	r2, [pc, #420]	; (80030d8 <HAL_I2C_Init+0x284>)
 8002f34:	fba2 2303 	umull	r2, r3, r2, r3
 8002f38:	099b      	lsrs	r3, r3, #6
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	6812      	ldr	r2, [r2, #0]
 8002f40:	430b      	orrs	r3, r1
 8002f42:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	69db      	ldr	r3, [r3, #28]
 8002f4a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f4e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	495c      	ldr	r1, [pc, #368]	; (80030c8 <HAL_I2C_Init+0x274>)
 8002f58:	428b      	cmp	r3, r1
 8002f5a:	d819      	bhi.n	8002f90 <HAL_I2C_Init+0x13c>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	1e59      	subs	r1, r3, #1
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f6a:	1c59      	adds	r1, r3, #1
 8002f6c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f70:	400b      	ands	r3, r1
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00a      	beq.n	8002f8c <HAL_I2C_Init+0x138>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	1e59      	subs	r1, r3, #1
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f84:	3301      	adds	r3, #1
 8002f86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f8a:	e051      	b.n	8003030 <HAL_I2C_Init+0x1dc>
 8002f8c:	2304      	movs	r3, #4
 8002f8e:	e04f      	b.n	8003030 <HAL_I2C_Init+0x1dc>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d111      	bne.n	8002fbc <HAL_I2C_Init+0x168>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	1e58      	subs	r0, r3, #1
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6859      	ldr	r1, [r3, #4]
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	440b      	add	r3, r1
 8002fa6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002faa:	3301      	adds	r3, #1
 8002fac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	bf0c      	ite	eq
 8002fb4:	2301      	moveq	r3, #1
 8002fb6:	2300      	movne	r3, #0
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	e012      	b.n	8002fe2 <HAL_I2C_Init+0x18e>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	1e58      	subs	r0, r3, #1
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6859      	ldr	r1, [r3, #4]
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	440b      	add	r3, r1
 8002fca:	0099      	lsls	r1, r3, #2
 8002fcc:	440b      	add	r3, r1
 8002fce:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	bf0c      	ite	eq
 8002fdc:	2301      	moveq	r3, #1
 8002fde:	2300      	movne	r3, #0
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <HAL_I2C_Init+0x196>
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e022      	b.n	8003030 <HAL_I2C_Init+0x1dc>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d10e      	bne.n	8003010 <HAL_I2C_Init+0x1bc>
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	1e58      	subs	r0, r3, #1
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6859      	ldr	r1, [r3, #4]
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	440b      	add	r3, r1
 8003000:	fbb0 f3f3 	udiv	r3, r0, r3
 8003004:	3301      	adds	r3, #1
 8003006:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800300a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800300e:	e00f      	b.n	8003030 <HAL_I2C_Init+0x1dc>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	1e58      	subs	r0, r3, #1
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6859      	ldr	r1, [r3, #4]
 8003018:	460b      	mov	r3, r1
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	440b      	add	r3, r1
 800301e:	0099      	lsls	r1, r3, #2
 8003020:	440b      	add	r3, r1
 8003022:	fbb0 f3f3 	udiv	r3, r0, r3
 8003026:	3301      	adds	r3, #1
 8003028:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800302c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003030:	6879      	ldr	r1, [r7, #4]
 8003032:	6809      	ldr	r1, [r1, #0]
 8003034:	4313      	orrs	r3, r2
 8003036:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	69da      	ldr	r2, [r3, #28]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a1b      	ldr	r3, [r3, #32]
 800304a:	431a      	orrs	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	430a      	orrs	r2, r1
 8003052:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800305e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	6911      	ldr	r1, [r2, #16]
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	68d2      	ldr	r2, [r2, #12]
 800306a:	4311      	orrs	r1, r2
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	6812      	ldr	r2, [r2, #0]
 8003070:	430b      	orrs	r3, r1
 8003072:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	695a      	ldr	r2, [r3, #20]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	431a      	orrs	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	430a      	orrs	r2, r1
 800308e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f042 0201 	orr.w	r2, r2, #1
 800309e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2220      	movs	r2, #32
 80030aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3710      	adds	r7, #16
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	000186a0 	.word	0x000186a0
 80030cc:	001e847f 	.word	0x001e847f
 80030d0:	003d08ff 	.word	0x003d08ff
 80030d4:	431bde83 	.word	0x431bde83
 80030d8:	10624dd3 	.word	0x10624dd3

080030dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b086      	sub	sp, #24
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e267      	b.n	80035be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d075      	beq.n	80031e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030fa:	4b88      	ldr	r3, [pc, #544]	; (800331c <HAL_RCC_OscConfig+0x240>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f003 030c 	and.w	r3, r3, #12
 8003102:	2b04      	cmp	r3, #4
 8003104:	d00c      	beq.n	8003120 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003106:	4b85      	ldr	r3, [pc, #532]	; (800331c <HAL_RCC_OscConfig+0x240>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800310e:	2b08      	cmp	r3, #8
 8003110:	d112      	bne.n	8003138 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003112:	4b82      	ldr	r3, [pc, #520]	; (800331c <HAL_RCC_OscConfig+0x240>)
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800311a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800311e:	d10b      	bne.n	8003138 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003120:	4b7e      	ldr	r3, [pc, #504]	; (800331c <HAL_RCC_OscConfig+0x240>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d05b      	beq.n	80031e4 <HAL_RCC_OscConfig+0x108>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d157      	bne.n	80031e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e242      	b.n	80035be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003140:	d106      	bne.n	8003150 <HAL_RCC_OscConfig+0x74>
 8003142:	4b76      	ldr	r3, [pc, #472]	; (800331c <HAL_RCC_OscConfig+0x240>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a75      	ldr	r2, [pc, #468]	; (800331c <HAL_RCC_OscConfig+0x240>)
 8003148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800314c:	6013      	str	r3, [r2, #0]
 800314e:	e01d      	b.n	800318c <HAL_RCC_OscConfig+0xb0>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003158:	d10c      	bne.n	8003174 <HAL_RCC_OscConfig+0x98>
 800315a:	4b70      	ldr	r3, [pc, #448]	; (800331c <HAL_RCC_OscConfig+0x240>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a6f      	ldr	r2, [pc, #444]	; (800331c <HAL_RCC_OscConfig+0x240>)
 8003160:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003164:	6013      	str	r3, [r2, #0]
 8003166:	4b6d      	ldr	r3, [pc, #436]	; (800331c <HAL_RCC_OscConfig+0x240>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a6c      	ldr	r2, [pc, #432]	; (800331c <HAL_RCC_OscConfig+0x240>)
 800316c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003170:	6013      	str	r3, [r2, #0]
 8003172:	e00b      	b.n	800318c <HAL_RCC_OscConfig+0xb0>
 8003174:	4b69      	ldr	r3, [pc, #420]	; (800331c <HAL_RCC_OscConfig+0x240>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a68      	ldr	r2, [pc, #416]	; (800331c <HAL_RCC_OscConfig+0x240>)
 800317a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800317e:	6013      	str	r3, [r2, #0]
 8003180:	4b66      	ldr	r3, [pc, #408]	; (800331c <HAL_RCC_OscConfig+0x240>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a65      	ldr	r2, [pc, #404]	; (800331c <HAL_RCC_OscConfig+0x240>)
 8003186:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800318a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d013      	beq.n	80031bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003194:	f7ff fb92 	bl	80028bc <HAL_GetTick>
 8003198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800319a:	e008      	b.n	80031ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800319c:	f7ff fb8e 	bl	80028bc <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b64      	cmp	r3, #100	; 0x64
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e207      	b.n	80035be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ae:	4b5b      	ldr	r3, [pc, #364]	; (800331c <HAL_RCC_OscConfig+0x240>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d0f0      	beq.n	800319c <HAL_RCC_OscConfig+0xc0>
 80031ba:	e014      	b.n	80031e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031bc:	f7ff fb7e 	bl	80028bc <HAL_GetTick>
 80031c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031c2:	e008      	b.n	80031d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031c4:	f7ff fb7a 	bl	80028bc <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	2b64      	cmp	r3, #100	; 0x64
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e1f3      	b.n	80035be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031d6:	4b51      	ldr	r3, [pc, #324]	; (800331c <HAL_RCC_OscConfig+0x240>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1f0      	bne.n	80031c4 <HAL_RCC_OscConfig+0xe8>
 80031e2:	e000      	b.n	80031e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d063      	beq.n	80032ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031f2:	4b4a      	ldr	r3, [pc, #296]	; (800331c <HAL_RCC_OscConfig+0x240>)
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f003 030c 	and.w	r3, r3, #12
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d00b      	beq.n	8003216 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031fe:	4b47      	ldr	r3, [pc, #284]	; (800331c <HAL_RCC_OscConfig+0x240>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003206:	2b08      	cmp	r3, #8
 8003208:	d11c      	bne.n	8003244 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800320a:	4b44      	ldr	r3, [pc, #272]	; (800331c <HAL_RCC_OscConfig+0x240>)
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d116      	bne.n	8003244 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003216:	4b41      	ldr	r3, [pc, #260]	; (800331c <HAL_RCC_OscConfig+0x240>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	2b00      	cmp	r3, #0
 8003220:	d005      	beq.n	800322e <HAL_RCC_OscConfig+0x152>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d001      	beq.n	800322e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e1c7      	b.n	80035be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800322e:	4b3b      	ldr	r3, [pc, #236]	; (800331c <HAL_RCC_OscConfig+0x240>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	00db      	lsls	r3, r3, #3
 800323c:	4937      	ldr	r1, [pc, #220]	; (800331c <HAL_RCC_OscConfig+0x240>)
 800323e:	4313      	orrs	r3, r2
 8003240:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003242:	e03a      	b.n	80032ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d020      	beq.n	800328e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800324c:	4b34      	ldr	r3, [pc, #208]	; (8003320 <HAL_RCC_OscConfig+0x244>)
 800324e:	2201      	movs	r2, #1
 8003250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003252:	f7ff fb33 	bl	80028bc <HAL_GetTick>
 8003256:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003258:	e008      	b.n	800326c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800325a:	f7ff fb2f 	bl	80028bc <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	2b02      	cmp	r3, #2
 8003266:	d901      	bls.n	800326c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e1a8      	b.n	80035be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800326c:	4b2b      	ldr	r3, [pc, #172]	; (800331c <HAL_RCC_OscConfig+0x240>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d0f0      	beq.n	800325a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003278:	4b28      	ldr	r3, [pc, #160]	; (800331c <HAL_RCC_OscConfig+0x240>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	691b      	ldr	r3, [r3, #16]
 8003284:	00db      	lsls	r3, r3, #3
 8003286:	4925      	ldr	r1, [pc, #148]	; (800331c <HAL_RCC_OscConfig+0x240>)
 8003288:	4313      	orrs	r3, r2
 800328a:	600b      	str	r3, [r1, #0]
 800328c:	e015      	b.n	80032ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800328e:	4b24      	ldr	r3, [pc, #144]	; (8003320 <HAL_RCC_OscConfig+0x244>)
 8003290:	2200      	movs	r2, #0
 8003292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003294:	f7ff fb12 	bl	80028bc <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800329c:	f7ff fb0e 	bl	80028bc <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e187      	b.n	80035be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ae:	4b1b      	ldr	r3, [pc, #108]	; (800331c <HAL_RCC_OscConfig+0x240>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1f0      	bne.n	800329c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0308 	and.w	r3, r3, #8
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d036      	beq.n	8003334 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d016      	beq.n	80032fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032ce:	4b15      	ldr	r3, [pc, #84]	; (8003324 <HAL_RCC_OscConfig+0x248>)
 80032d0:	2201      	movs	r2, #1
 80032d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d4:	f7ff faf2 	bl	80028bc <HAL_GetTick>
 80032d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032da:	e008      	b.n	80032ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032dc:	f7ff faee 	bl	80028bc <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e167      	b.n	80035be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ee:	4b0b      	ldr	r3, [pc, #44]	; (800331c <HAL_RCC_OscConfig+0x240>)
 80032f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d0f0      	beq.n	80032dc <HAL_RCC_OscConfig+0x200>
 80032fa:	e01b      	b.n	8003334 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032fc:	4b09      	ldr	r3, [pc, #36]	; (8003324 <HAL_RCC_OscConfig+0x248>)
 80032fe:	2200      	movs	r2, #0
 8003300:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003302:	f7ff fadb 	bl	80028bc <HAL_GetTick>
 8003306:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003308:	e00e      	b.n	8003328 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800330a:	f7ff fad7 	bl	80028bc <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	2b02      	cmp	r3, #2
 8003316:	d907      	bls.n	8003328 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e150      	b.n	80035be <HAL_RCC_OscConfig+0x4e2>
 800331c:	40023800 	.word	0x40023800
 8003320:	42470000 	.word	0x42470000
 8003324:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003328:	4b88      	ldr	r3, [pc, #544]	; (800354c <HAL_RCC_OscConfig+0x470>)
 800332a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d1ea      	bne.n	800330a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0304 	and.w	r3, r3, #4
 800333c:	2b00      	cmp	r3, #0
 800333e:	f000 8097 	beq.w	8003470 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003342:	2300      	movs	r3, #0
 8003344:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003346:	4b81      	ldr	r3, [pc, #516]	; (800354c <HAL_RCC_OscConfig+0x470>)
 8003348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d10f      	bne.n	8003372 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003352:	2300      	movs	r3, #0
 8003354:	60bb      	str	r3, [r7, #8]
 8003356:	4b7d      	ldr	r3, [pc, #500]	; (800354c <HAL_RCC_OscConfig+0x470>)
 8003358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335a:	4a7c      	ldr	r2, [pc, #496]	; (800354c <HAL_RCC_OscConfig+0x470>)
 800335c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003360:	6413      	str	r3, [r2, #64]	; 0x40
 8003362:	4b7a      	ldr	r3, [pc, #488]	; (800354c <HAL_RCC_OscConfig+0x470>)
 8003364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800336a:	60bb      	str	r3, [r7, #8]
 800336c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800336e:	2301      	movs	r3, #1
 8003370:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003372:	4b77      	ldr	r3, [pc, #476]	; (8003550 <HAL_RCC_OscConfig+0x474>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800337a:	2b00      	cmp	r3, #0
 800337c:	d118      	bne.n	80033b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800337e:	4b74      	ldr	r3, [pc, #464]	; (8003550 <HAL_RCC_OscConfig+0x474>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a73      	ldr	r2, [pc, #460]	; (8003550 <HAL_RCC_OscConfig+0x474>)
 8003384:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003388:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800338a:	f7ff fa97 	bl	80028bc <HAL_GetTick>
 800338e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003390:	e008      	b.n	80033a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003392:	f7ff fa93 	bl	80028bc <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	2b02      	cmp	r3, #2
 800339e:	d901      	bls.n	80033a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	e10c      	b.n	80035be <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a4:	4b6a      	ldr	r3, [pc, #424]	; (8003550 <HAL_RCC_OscConfig+0x474>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d0f0      	beq.n	8003392 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d106      	bne.n	80033c6 <HAL_RCC_OscConfig+0x2ea>
 80033b8:	4b64      	ldr	r3, [pc, #400]	; (800354c <HAL_RCC_OscConfig+0x470>)
 80033ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033bc:	4a63      	ldr	r2, [pc, #396]	; (800354c <HAL_RCC_OscConfig+0x470>)
 80033be:	f043 0301 	orr.w	r3, r3, #1
 80033c2:	6713      	str	r3, [r2, #112]	; 0x70
 80033c4:	e01c      	b.n	8003400 <HAL_RCC_OscConfig+0x324>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	2b05      	cmp	r3, #5
 80033cc:	d10c      	bne.n	80033e8 <HAL_RCC_OscConfig+0x30c>
 80033ce:	4b5f      	ldr	r3, [pc, #380]	; (800354c <HAL_RCC_OscConfig+0x470>)
 80033d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d2:	4a5e      	ldr	r2, [pc, #376]	; (800354c <HAL_RCC_OscConfig+0x470>)
 80033d4:	f043 0304 	orr.w	r3, r3, #4
 80033d8:	6713      	str	r3, [r2, #112]	; 0x70
 80033da:	4b5c      	ldr	r3, [pc, #368]	; (800354c <HAL_RCC_OscConfig+0x470>)
 80033dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033de:	4a5b      	ldr	r2, [pc, #364]	; (800354c <HAL_RCC_OscConfig+0x470>)
 80033e0:	f043 0301 	orr.w	r3, r3, #1
 80033e4:	6713      	str	r3, [r2, #112]	; 0x70
 80033e6:	e00b      	b.n	8003400 <HAL_RCC_OscConfig+0x324>
 80033e8:	4b58      	ldr	r3, [pc, #352]	; (800354c <HAL_RCC_OscConfig+0x470>)
 80033ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ec:	4a57      	ldr	r2, [pc, #348]	; (800354c <HAL_RCC_OscConfig+0x470>)
 80033ee:	f023 0301 	bic.w	r3, r3, #1
 80033f2:	6713      	str	r3, [r2, #112]	; 0x70
 80033f4:	4b55      	ldr	r3, [pc, #340]	; (800354c <HAL_RCC_OscConfig+0x470>)
 80033f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f8:	4a54      	ldr	r2, [pc, #336]	; (800354c <HAL_RCC_OscConfig+0x470>)
 80033fa:	f023 0304 	bic.w	r3, r3, #4
 80033fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d015      	beq.n	8003434 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003408:	f7ff fa58 	bl	80028bc <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800340e:	e00a      	b.n	8003426 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003410:	f7ff fa54 	bl	80028bc <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	f241 3288 	movw	r2, #5000	; 0x1388
 800341e:	4293      	cmp	r3, r2
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e0cb      	b.n	80035be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003426:	4b49      	ldr	r3, [pc, #292]	; (800354c <HAL_RCC_OscConfig+0x470>)
 8003428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d0ee      	beq.n	8003410 <HAL_RCC_OscConfig+0x334>
 8003432:	e014      	b.n	800345e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003434:	f7ff fa42 	bl	80028bc <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800343a:	e00a      	b.n	8003452 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800343c:	f7ff fa3e 	bl	80028bc <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	f241 3288 	movw	r2, #5000	; 0x1388
 800344a:	4293      	cmp	r3, r2
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e0b5      	b.n	80035be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003452:	4b3e      	ldr	r3, [pc, #248]	; (800354c <HAL_RCC_OscConfig+0x470>)
 8003454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1ee      	bne.n	800343c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800345e:	7dfb      	ldrb	r3, [r7, #23]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d105      	bne.n	8003470 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003464:	4b39      	ldr	r3, [pc, #228]	; (800354c <HAL_RCC_OscConfig+0x470>)
 8003466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003468:	4a38      	ldr	r2, [pc, #224]	; (800354c <HAL_RCC_OscConfig+0x470>)
 800346a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800346e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	699b      	ldr	r3, [r3, #24]
 8003474:	2b00      	cmp	r3, #0
 8003476:	f000 80a1 	beq.w	80035bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800347a:	4b34      	ldr	r3, [pc, #208]	; (800354c <HAL_RCC_OscConfig+0x470>)
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f003 030c 	and.w	r3, r3, #12
 8003482:	2b08      	cmp	r3, #8
 8003484:	d05c      	beq.n	8003540 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	2b02      	cmp	r3, #2
 800348c:	d141      	bne.n	8003512 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800348e:	4b31      	ldr	r3, [pc, #196]	; (8003554 <HAL_RCC_OscConfig+0x478>)
 8003490:	2200      	movs	r2, #0
 8003492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003494:	f7ff fa12 	bl	80028bc <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800349a:	e008      	b.n	80034ae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800349c:	f7ff fa0e 	bl	80028bc <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e087      	b.n	80035be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ae:	4b27      	ldr	r3, [pc, #156]	; (800354c <HAL_RCC_OscConfig+0x470>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1f0      	bne.n	800349c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	69da      	ldr	r2, [r3, #28]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	431a      	orrs	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c8:	019b      	lsls	r3, r3, #6
 80034ca:	431a      	orrs	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d0:	085b      	lsrs	r3, r3, #1
 80034d2:	3b01      	subs	r3, #1
 80034d4:	041b      	lsls	r3, r3, #16
 80034d6:	431a      	orrs	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034dc:	061b      	lsls	r3, r3, #24
 80034de:	491b      	ldr	r1, [pc, #108]	; (800354c <HAL_RCC_OscConfig+0x470>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034e4:	4b1b      	ldr	r3, [pc, #108]	; (8003554 <HAL_RCC_OscConfig+0x478>)
 80034e6:	2201      	movs	r2, #1
 80034e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ea:	f7ff f9e7 	bl	80028bc <HAL_GetTick>
 80034ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034f0:	e008      	b.n	8003504 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034f2:	f7ff f9e3 	bl	80028bc <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d901      	bls.n	8003504 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e05c      	b.n	80035be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003504:	4b11      	ldr	r3, [pc, #68]	; (800354c <HAL_RCC_OscConfig+0x470>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d0f0      	beq.n	80034f2 <HAL_RCC_OscConfig+0x416>
 8003510:	e054      	b.n	80035bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003512:	4b10      	ldr	r3, [pc, #64]	; (8003554 <HAL_RCC_OscConfig+0x478>)
 8003514:	2200      	movs	r2, #0
 8003516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003518:	f7ff f9d0 	bl	80028bc <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800351e:	e008      	b.n	8003532 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003520:	f7ff f9cc 	bl	80028bc <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b02      	cmp	r3, #2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e045      	b.n	80035be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003532:	4b06      	ldr	r3, [pc, #24]	; (800354c <HAL_RCC_OscConfig+0x470>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1f0      	bne.n	8003520 <HAL_RCC_OscConfig+0x444>
 800353e:	e03d      	b.n	80035bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d107      	bne.n	8003558 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e038      	b.n	80035be <HAL_RCC_OscConfig+0x4e2>
 800354c:	40023800 	.word	0x40023800
 8003550:	40007000 	.word	0x40007000
 8003554:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003558:	4b1b      	ldr	r3, [pc, #108]	; (80035c8 <HAL_RCC_OscConfig+0x4ec>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	2b01      	cmp	r3, #1
 8003564:	d028      	beq.n	80035b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003570:	429a      	cmp	r2, r3
 8003572:	d121      	bne.n	80035b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800357e:	429a      	cmp	r2, r3
 8003580:	d11a      	bne.n	80035b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003588:	4013      	ands	r3, r2
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800358e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003590:	4293      	cmp	r3, r2
 8003592:	d111      	bne.n	80035b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800359e:	085b      	lsrs	r3, r3, #1
 80035a0:	3b01      	subs	r3, #1
 80035a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d107      	bne.n	80035b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d001      	beq.n	80035bc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e000      	b.n	80035be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3718      	adds	r7, #24
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	40023800 	.word	0x40023800

080035cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d101      	bne.n	80035e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e0cc      	b.n	800377a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035e0:	4b68      	ldr	r3, [pc, #416]	; (8003784 <HAL_RCC_ClockConfig+0x1b8>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0307 	and.w	r3, r3, #7
 80035e8:	683a      	ldr	r2, [r7, #0]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d90c      	bls.n	8003608 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ee:	4b65      	ldr	r3, [pc, #404]	; (8003784 <HAL_RCC_ClockConfig+0x1b8>)
 80035f0:	683a      	ldr	r2, [r7, #0]
 80035f2:	b2d2      	uxtb	r2, r2
 80035f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035f6:	4b63      	ldr	r3, [pc, #396]	; (8003784 <HAL_RCC_ClockConfig+0x1b8>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0307 	and.w	r3, r3, #7
 80035fe:	683a      	ldr	r2, [r7, #0]
 8003600:	429a      	cmp	r2, r3
 8003602:	d001      	beq.n	8003608 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e0b8      	b.n	800377a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0302 	and.w	r3, r3, #2
 8003610:	2b00      	cmp	r3, #0
 8003612:	d020      	beq.n	8003656 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0304 	and.w	r3, r3, #4
 800361c:	2b00      	cmp	r3, #0
 800361e:	d005      	beq.n	800362c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003620:	4b59      	ldr	r3, [pc, #356]	; (8003788 <HAL_RCC_ClockConfig+0x1bc>)
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	4a58      	ldr	r2, [pc, #352]	; (8003788 <HAL_RCC_ClockConfig+0x1bc>)
 8003626:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800362a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0308 	and.w	r3, r3, #8
 8003634:	2b00      	cmp	r3, #0
 8003636:	d005      	beq.n	8003644 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003638:	4b53      	ldr	r3, [pc, #332]	; (8003788 <HAL_RCC_ClockConfig+0x1bc>)
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	4a52      	ldr	r2, [pc, #328]	; (8003788 <HAL_RCC_ClockConfig+0x1bc>)
 800363e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003642:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003644:	4b50      	ldr	r3, [pc, #320]	; (8003788 <HAL_RCC_ClockConfig+0x1bc>)
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	494d      	ldr	r1, [pc, #308]	; (8003788 <HAL_RCC_ClockConfig+0x1bc>)
 8003652:	4313      	orrs	r3, r2
 8003654:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b00      	cmp	r3, #0
 8003660:	d044      	beq.n	80036ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d107      	bne.n	800367a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800366a:	4b47      	ldr	r3, [pc, #284]	; (8003788 <HAL_RCC_ClockConfig+0x1bc>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d119      	bne.n	80036aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e07f      	b.n	800377a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	2b02      	cmp	r3, #2
 8003680:	d003      	beq.n	800368a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003686:	2b03      	cmp	r3, #3
 8003688:	d107      	bne.n	800369a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800368a:	4b3f      	ldr	r3, [pc, #252]	; (8003788 <HAL_RCC_ClockConfig+0x1bc>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d109      	bne.n	80036aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e06f      	b.n	800377a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800369a:	4b3b      	ldr	r3, [pc, #236]	; (8003788 <HAL_RCC_ClockConfig+0x1bc>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e067      	b.n	800377a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036aa:	4b37      	ldr	r3, [pc, #220]	; (8003788 <HAL_RCC_ClockConfig+0x1bc>)
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f023 0203 	bic.w	r2, r3, #3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	4934      	ldr	r1, [pc, #208]	; (8003788 <HAL_RCC_ClockConfig+0x1bc>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036bc:	f7ff f8fe 	bl	80028bc <HAL_GetTick>
 80036c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036c2:	e00a      	b.n	80036da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036c4:	f7ff f8fa 	bl	80028bc <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d901      	bls.n	80036da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e04f      	b.n	800377a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036da:	4b2b      	ldr	r3, [pc, #172]	; (8003788 <HAL_RCC_ClockConfig+0x1bc>)
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f003 020c 	and.w	r2, r3, #12
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d1eb      	bne.n	80036c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036ec:	4b25      	ldr	r3, [pc, #148]	; (8003784 <HAL_RCC_ClockConfig+0x1b8>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0307 	and.w	r3, r3, #7
 80036f4:	683a      	ldr	r2, [r7, #0]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d20c      	bcs.n	8003714 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036fa:	4b22      	ldr	r3, [pc, #136]	; (8003784 <HAL_RCC_ClockConfig+0x1b8>)
 80036fc:	683a      	ldr	r2, [r7, #0]
 80036fe:	b2d2      	uxtb	r2, r2
 8003700:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003702:	4b20      	ldr	r3, [pc, #128]	; (8003784 <HAL_RCC_ClockConfig+0x1b8>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0307 	and.w	r3, r3, #7
 800370a:	683a      	ldr	r2, [r7, #0]
 800370c:	429a      	cmp	r2, r3
 800370e:	d001      	beq.n	8003714 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e032      	b.n	800377a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0304 	and.w	r3, r3, #4
 800371c:	2b00      	cmp	r3, #0
 800371e:	d008      	beq.n	8003732 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003720:	4b19      	ldr	r3, [pc, #100]	; (8003788 <HAL_RCC_ClockConfig+0x1bc>)
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	4916      	ldr	r1, [pc, #88]	; (8003788 <HAL_RCC_ClockConfig+0x1bc>)
 800372e:	4313      	orrs	r3, r2
 8003730:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0308 	and.w	r3, r3, #8
 800373a:	2b00      	cmp	r3, #0
 800373c:	d009      	beq.n	8003752 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800373e:	4b12      	ldr	r3, [pc, #72]	; (8003788 <HAL_RCC_ClockConfig+0x1bc>)
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	00db      	lsls	r3, r3, #3
 800374c:	490e      	ldr	r1, [pc, #56]	; (8003788 <HAL_RCC_ClockConfig+0x1bc>)
 800374e:	4313      	orrs	r3, r2
 8003750:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003752:	f000 f821 	bl	8003798 <HAL_RCC_GetSysClockFreq>
 8003756:	4602      	mov	r2, r0
 8003758:	4b0b      	ldr	r3, [pc, #44]	; (8003788 <HAL_RCC_ClockConfig+0x1bc>)
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	091b      	lsrs	r3, r3, #4
 800375e:	f003 030f 	and.w	r3, r3, #15
 8003762:	490a      	ldr	r1, [pc, #40]	; (800378c <HAL_RCC_ClockConfig+0x1c0>)
 8003764:	5ccb      	ldrb	r3, [r1, r3]
 8003766:	fa22 f303 	lsr.w	r3, r2, r3
 800376a:	4a09      	ldr	r2, [pc, #36]	; (8003790 <HAL_RCC_ClockConfig+0x1c4>)
 800376c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800376e:	4b09      	ldr	r3, [pc, #36]	; (8003794 <HAL_RCC_ClockConfig+0x1c8>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4618      	mov	r0, r3
 8003774:	f7ff f85e 	bl	8002834 <HAL_InitTick>

  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3710      	adds	r7, #16
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	40023c00 	.word	0x40023c00
 8003788:	40023800 	.word	0x40023800
 800378c:	08005a74 	.word	0x08005a74
 8003790:	20000050 	.word	0x20000050
 8003794:	20000054 	.word	0x20000054

08003798 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003798:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800379c:	b090      	sub	sp, #64	; 0x40
 800379e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80037a0:	2300      	movs	r3, #0
 80037a2:	637b      	str	r3, [r7, #52]	; 0x34
 80037a4:	2300      	movs	r3, #0
 80037a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037a8:	2300      	movs	r3, #0
 80037aa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80037ac:	2300      	movs	r3, #0
 80037ae:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037b0:	4b59      	ldr	r3, [pc, #356]	; (8003918 <HAL_RCC_GetSysClockFreq+0x180>)
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f003 030c 	and.w	r3, r3, #12
 80037b8:	2b08      	cmp	r3, #8
 80037ba:	d00d      	beq.n	80037d8 <HAL_RCC_GetSysClockFreq+0x40>
 80037bc:	2b08      	cmp	r3, #8
 80037be:	f200 80a1 	bhi.w	8003904 <HAL_RCC_GetSysClockFreq+0x16c>
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d002      	beq.n	80037cc <HAL_RCC_GetSysClockFreq+0x34>
 80037c6:	2b04      	cmp	r3, #4
 80037c8:	d003      	beq.n	80037d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80037ca:	e09b      	b.n	8003904 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037cc:	4b53      	ldr	r3, [pc, #332]	; (800391c <HAL_RCC_GetSysClockFreq+0x184>)
 80037ce:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80037d0:	e09b      	b.n	800390a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037d2:	4b53      	ldr	r3, [pc, #332]	; (8003920 <HAL_RCC_GetSysClockFreq+0x188>)
 80037d4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80037d6:	e098      	b.n	800390a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037d8:	4b4f      	ldr	r3, [pc, #316]	; (8003918 <HAL_RCC_GetSysClockFreq+0x180>)
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037e0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037e2:	4b4d      	ldr	r3, [pc, #308]	; (8003918 <HAL_RCC_GetSysClockFreq+0x180>)
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d028      	beq.n	8003840 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037ee:	4b4a      	ldr	r3, [pc, #296]	; (8003918 <HAL_RCC_GetSysClockFreq+0x180>)
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	099b      	lsrs	r3, r3, #6
 80037f4:	2200      	movs	r2, #0
 80037f6:	623b      	str	r3, [r7, #32]
 80037f8:	627a      	str	r2, [r7, #36]	; 0x24
 80037fa:	6a3b      	ldr	r3, [r7, #32]
 80037fc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003800:	2100      	movs	r1, #0
 8003802:	4b47      	ldr	r3, [pc, #284]	; (8003920 <HAL_RCC_GetSysClockFreq+0x188>)
 8003804:	fb03 f201 	mul.w	r2, r3, r1
 8003808:	2300      	movs	r3, #0
 800380a:	fb00 f303 	mul.w	r3, r0, r3
 800380e:	4413      	add	r3, r2
 8003810:	4a43      	ldr	r2, [pc, #268]	; (8003920 <HAL_RCC_GetSysClockFreq+0x188>)
 8003812:	fba0 1202 	umull	r1, r2, r0, r2
 8003816:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003818:	460a      	mov	r2, r1
 800381a:	62ba      	str	r2, [r7, #40]	; 0x28
 800381c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800381e:	4413      	add	r3, r2
 8003820:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003824:	2200      	movs	r2, #0
 8003826:	61bb      	str	r3, [r7, #24]
 8003828:	61fa      	str	r2, [r7, #28]
 800382a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800382e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003832:	f7fd f8c7 	bl	80009c4 <__aeabi_uldivmod>
 8003836:	4602      	mov	r2, r0
 8003838:	460b      	mov	r3, r1
 800383a:	4613      	mov	r3, r2
 800383c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800383e:	e053      	b.n	80038e8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003840:	4b35      	ldr	r3, [pc, #212]	; (8003918 <HAL_RCC_GetSysClockFreq+0x180>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	099b      	lsrs	r3, r3, #6
 8003846:	2200      	movs	r2, #0
 8003848:	613b      	str	r3, [r7, #16]
 800384a:	617a      	str	r2, [r7, #20]
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003852:	f04f 0b00 	mov.w	fp, #0
 8003856:	4652      	mov	r2, sl
 8003858:	465b      	mov	r3, fp
 800385a:	f04f 0000 	mov.w	r0, #0
 800385e:	f04f 0100 	mov.w	r1, #0
 8003862:	0159      	lsls	r1, r3, #5
 8003864:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003868:	0150      	lsls	r0, r2, #5
 800386a:	4602      	mov	r2, r0
 800386c:	460b      	mov	r3, r1
 800386e:	ebb2 080a 	subs.w	r8, r2, sl
 8003872:	eb63 090b 	sbc.w	r9, r3, fp
 8003876:	f04f 0200 	mov.w	r2, #0
 800387a:	f04f 0300 	mov.w	r3, #0
 800387e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003882:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003886:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800388a:	ebb2 0408 	subs.w	r4, r2, r8
 800388e:	eb63 0509 	sbc.w	r5, r3, r9
 8003892:	f04f 0200 	mov.w	r2, #0
 8003896:	f04f 0300 	mov.w	r3, #0
 800389a:	00eb      	lsls	r3, r5, #3
 800389c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038a0:	00e2      	lsls	r2, r4, #3
 80038a2:	4614      	mov	r4, r2
 80038a4:	461d      	mov	r5, r3
 80038a6:	eb14 030a 	adds.w	r3, r4, sl
 80038aa:	603b      	str	r3, [r7, #0]
 80038ac:	eb45 030b 	adc.w	r3, r5, fp
 80038b0:	607b      	str	r3, [r7, #4]
 80038b2:	f04f 0200 	mov.w	r2, #0
 80038b6:	f04f 0300 	mov.w	r3, #0
 80038ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038be:	4629      	mov	r1, r5
 80038c0:	028b      	lsls	r3, r1, #10
 80038c2:	4621      	mov	r1, r4
 80038c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038c8:	4621      	mov	r1, r4
 80038ca:	028a      	lsls	r2, r1, #10
 80038cc:	4610      	mov	r0, r2
 80038ce:	4619      	mov	r1, r3
 80038d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038d2:	2200      	movs	r2, #0
 80038d4:	60bb      	str	r3, [r7, #8]
 80038d6:	60fa      	str	r2, [r7, #12]
 80038d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038dc:	f7fd f872 	bl	80009c4 <__aeabi_uldivmod>
 80038e0:	4602      	mov	r2, r0
 80038e2:	460b      	mov	r3, r1
 80038e4:	4613      	mov	r3, r2
 80038e6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038e8:	4b0b      	ldr	r3, [pc, #44]	; (8003918 <HAL_RCC_GetSysClockFreq+0x180>)
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	0c1b      	lsrs	r3, r3, #16
 80038ee:	f003 0303 	and.w	r3, r3, #3
 80038f2:	3301      	adds	r3, #1
 80038f4:	005b      	lsls	r3, r3, #1
 80038f6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80038f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003900:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003902:	e002      	b.n	800390a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003904:	4b05      	ldr	r3, [pc, #20]	; (800391c <HAL_RCC_GetSysClockFreq+0x184>)
 8003906:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003908:	bf00      	nop
    }
  }
  return sysclockfreq;
 800390a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800390c:	4618      	mov	r0, r3
 800390e:	3740      	adds	r7, #64	; 0x40
 8003910:	46bd      	mov	sp, r7
 8003912:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003916:	bf00      	nop
 8003918:	40023800 	.word	0x40023800
 800391c:	00f42400 	.word	0x00f42400
 8003920:	017d7840 	.word	0x017d7840

08003924 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003924:	b480      	push	{r7}
 8003926:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003928:	4b03      	ldr	r3, [pc, #12]	; (8003938 <HAL_RCC_GetHCLKFreq+0x14>)
 800392a:	681b      	ldr	r3, [r3, #0]
}
 800392c:	4618      	mov	r0, r3
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	20000050 	.word	0x20000050

0800393c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003940:	f7ff fff0 	bl	8003924 <HAL_RCC_GetHCLKFreq>
 8003944:	4602      	mov	r2, r0
 8003946:	4b05      	ldr	r3, [pc, #20]	; (800395c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	0a9b      	lsrs	r3, r3, #10
 800394c:	f003 0307 	and.w	r3, r3, #7
 8003950:	4903      	ldr	r1, [pc, #12]	; (8003960 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003952:	5ccb      	ldrb	r3, [r1, r3]
 8003954:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003958:	4618      	mov	r0, r3
 800395a:	bd80      	pop	{r7, pc}
 800395c:	40023800 	.word	0x40023800
 8003960:	08005a84 	.word	0x08005a84

08003964 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003968:	f7ff ffdc 	bl	8003924 <HAL_RCC_GetHCLKFreq>
 800396c:	4602      	mov	r2, r0
 800396e:	4b05      	ldr	r3, [pc, #20]	; (8003984 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	0b5b      	lsrs	r3, r3, #13
 8003974:	f003 0307 	and.w	r3, r3, #7
 8003978:	4903      	ldr	r1, [pc, #12]	; (8003988 <HAL_RCC_GetPCLK2Freq+0x24>)
 800397a:	5ccb      	ldrb	r3, [r1, r3]
 800397c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003980:	4618      	mov	r0, r3
 8003982:	bd80      	pop	{r7, pc}
 8003984:	40023800 	.word	0x40023800
 8003988:	08005a84 	.word	0x08005a84

0800398c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d101      	bne.n	800399e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e07b      	b.n	8003a96 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d108      	bne.n	80039b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039ae:	d009      	beq.n	80039c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	61da      	str	r2, [r3, #28]
 80039b6:	e005      	b.n	80039c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d106      	bne.n	80039e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f7fe fd9e 	bl	8002520 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2202      	movs	r2, #2
 80039e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039fa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003a0c:	431a      	orrs	r2, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a16:	431a      	orrs	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	f003 0302 	and.w	r3, r3, #2
 8003a20:	431a      	orrs	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	431a      	orrs	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a34:	431a      	orrs	r2, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	69db      	ldr	r3, [r3, #28]
 8003a3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a3e:	431a      	orrs	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a1b      	ldr	r3, [r3, #32]
 8003a44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a48:	ea42 0103 	orr.w	r1, r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a50:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	0c1b      	lsrs	r3, r3, #16
 8003a62:	f003 0104 	and.w	r1, r3, #4
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6a:	f003 0210 	and.w	r2, r3, #16
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	430a      	orrs	r2, r1
 8003a74:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	69da      	ldr	r2, [r3, #28]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a84:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3708      	adds	r7, #8
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}

08003a9e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a9e:	b580      	push	{r7, lr}
 8003aa0:	b088      	sub	sp, #32
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	60f8      	str	r0, [r7, #12]
 8003aa6:	60b9      	str	r1, [r7, #8]
 8003aa8:	603b      	str	r3, [r7, #0]
 8003aaa:	4613      	mov	r3, r2
 8003aac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d101      	bne.n	8003ac0 <HAL_SPI_Transmit+0x22>
 8003abc:	2302      	movs	r3, #2
 8003abe:	e126      	b.n	8003d0e <HAL_SPI_Transmit+0x270>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ac8:	f7fe fef8 	bl	80028bc <HAL_GetTick>
 8003acc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003ace:	88fb      	ldrh	r3, [r7, #6]
 8003ad0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d002      	beq.n	8003ae4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003ade:	2302      	movs	r3, #2
 8003ae0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003ae2:	e10b      	b.n	8003cfc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d002      	beq.n	8003af0 <HAL_SPI_Transmit+0x52>
 8003aea:	88fb      	ldrh	r3, [r7, #6]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d102      	bne.n	8003af6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003af4:	e102      	b.n	8003cfc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2203      	movs	r2, #3
 8003afa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2200      	movs	r2, #0
 8003b02:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	68ba      	ldr	r2, [r7, #8]
 8003b08:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	88fa      	ldrh	r2, [r7, #6]
 8003b0e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	88fa      	ldrh	r2, [r7, #6]
 8003b14:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2200      	movs	r2, #0
 8003b26:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b3c:	d10f      	bne.n	8003b5e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b4c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b5c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b68:	2b40      	cmp	r3, #64	; 0x40
 8003b6a:	d007      	beq.n	8003b7c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b7a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b84:	d14b      	bne.n	8003c1e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d002      	beq.n	8003b94 <HAL_SPI_Transmit+0xf6>
 8003b8e:	8afb      	ldrh	r3, [r7, #22]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d13e      	bne.n	8003c12 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b98:	881a      	ldrh	r2, [r3, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba4:	1c9a      	adds	r2, r3, #2
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	b29a      	uxth	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003bb8:	e02b      	b.n	8003c12 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f003 0302 	and.w	r3, r3, #2
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d112      	bne.n	8003bee <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bcc:	881a      	ldrh	r2, [r3, #0]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd8:	1c9a      	adds	r2, r3, #2
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	3b01      	subs	r3, #1
 8003be6:	b29a      	uxth	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	86da      	strh	r2, [r3, #54]	; 0x36
 8003bec:	e011      	b.n	8003c12 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bee:	f7fe fe65 	bl	80028bc <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	683a      	ldr	r2, [r7, #0]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d803      	bhi.n	8003c06 <HAL_SPI_Transmit+0x168>
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c04:	d102      	bne.n	8003c0c <HAL_SPI_Transmit+0x16e>
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d102      	bne.n	8003c12 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003c10:	e074      	b.n	8003cfc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d1ce      	bne.n	8003bba <HAL_SPI_Transmit+0x11c>
 8003c1c:	e04c      	b.n	8003cb8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d002      	beq.n	8003c2c <HAL_SPI_Transmit+0x18e>
 8003c26:	8afb      	ldrh	r3, [r7, #22]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d140      	bne.n	8003cae <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	330c      	adds	r3, #12
 8003c36:	7812      	ldrb	r2, [r2, #0]
 8003c38:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3e:	1c5a      	adds	r2, r3, #1
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	b29a      	uxth	r2, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003c52:	e02c      	b.n	8003cae <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d113      	bne.n	8003c8a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	330c      	adds	r3, #12
 8003c6c:	7812      	ldrb	r2, [r2, #0]
 8003c6e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c74:	1c5a      	adds	r2, r3, #1
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	3b01      	subs	r3, #1
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	86da      	strh	r2, [r3, #54]	; 0x36
 8003c88:	e011      	b.n	8003cae <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c8a:	f7fe fe17 	bl	80028bc <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	683a      	ldr	r2, [r7, #0]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d803      	bhi.n	8003ca2 <HAL_SPI_Transmit+0x204>
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca0:	d102      	bne.n	8003ca8 <HAL_SPI_Transmit+0x20a>
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d102      	bne.n	8003cae <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003cac:	e026      	b.n	8003cfc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d1cd      	bne.n	8003c54 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cb8:	69ba      	ldr	r2, [r7, #24]
 8003cba:	6839      	ldr	r1, [r7, #0]
 8003cbc:	68f8      	ldr	r0, [r7, #12]
 8003cbe:	f000 fbcb 	bl	8004458 <SPI_EndRxTxTransaction>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d002      	beq.n	8003cce <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2220      	movs	r2, #32
 8003ccc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d10a      	bne.n	8003cec <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	613b      	str	r3, [r7, #16]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	613b      	str	r3, [r7, #16]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	613b      	str	r3, [r7, #16]
 8003cea:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d002      	beq.n	8003cfa <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	77fb      	strb	r3, [r7, #31]
 8003cf8:	e000      	b.n	8003cfc <HAL_SPI_Transmit+0x25e>
  }

error:
 8003cfa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d0c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3720      	adds	r7, #32
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b088      	sub	sp, #32
 8003d1a:	af02      	add	r7, sp, #8
 8003d1c:	60f8      	str	r0, [r7, #12]
 8003d1e:	60b9      	str	r1, [r7, #8]
 8003d20:	603b      	str	r3, [r7, #0]
 8003d22:	4613      	mov	r3, r2
 8003d24:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d26:	2300      	movs	r3, #0
 8003d28:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d32:	d112      	bne.n	8003d5a <HAL_SPI_Receive+0x44>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d10e      	bne.n	8003d5a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2204      	movs	r2, #4
 8003d40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003d44:	88fa      	ldrh	r2, [r7, #6]
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	9300      	str	r3, [sp, #0]
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	68ba      	ldr	r2, [r7, #8]
 8003d4e:	68b9      	ldr	r1, [r7, #8]
 8003d50:	68f8      	ldr	r0, [r7, #12]
 8003d52:	f000 f8f1 	bl	8003f38 <HAL_SPI_TransmitReceive>
 8003d56:	4603      	mov	r3, r0
 8003d58:	e0ea      	b.n	8003f30 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d101      	bne.n	8003d68 <HAL_SPI_Receive+0x52>
 8003d64:	2302      	movs	r3, #2
 8003d66:	e0e3      	b.n	8003f30 <HAL_SPI_Receive+0x21a>
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d70:	f7fe fda4 	bl	80028bc <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d002      	beq.n	8003d88 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003d82:	2302      	movs	r3, #2
 8003d84:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003d86:	e0ca      	b.n	8003f1e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d002      	beq.n	8003d94 <HAL_SPI_Receive+0x7e>
 8003d8e:	88fb      	ldrh	r3, [r7, #6]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d102      	bne.n	8003d9a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003d98:	e0c1      	b.n	8003f1e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2204      	movs	r2, #4
 8003d9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2200      	movs	r2, #0
 8003da6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	68ba      	ldr	r2, [r7, #8]
 8003dac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	88fa      	ldrh	r2, [r7, #6]
 8003db2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	88fa      	ldrh	r2, [r7, #6]
 8003db8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003de0:	d10f      	bne.n	8003e02 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003df0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003e00:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e0c:	2b40      	cmp	r3, #64	; 0x40
 8003e0e:	d007      	beq.n	8003e20 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e1e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d162      	bne.n	8003eee <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003e28:	e02e      	b.n	8003e88 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f003 0301 	and.w	r3, r3, #1
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d115      	bne.n	8003e64 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f103 020c 	add.w	r2, r3, #12
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e44:	7812      	ldrb	r2, [r2, #0]
 8003e46:	b2d2      	uxtb	r2, r2
 8003e48:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e4e:	1c5a      	adds	r2, r3, #1
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	b29a      	uxth	r2, r3
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e62:	e011      	b.n	8003e88 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e64:	f7fe fd2a 	bl	80028bc <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	683a      	ldr	r2, [r7, #0]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d803      	bhi.n	8003e7c <HAL_SPI_Receive+0x166>
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e7a:	d102      	bne.n	8003e82 <HAL_SPI_Receive+0x16c>
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d102      	bne.n	8003e88 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003e86:	e04a      	b.n	8003f1e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1cb      	bne.n	8003e2a <HAL_SPI_Receive+0x114>
 8003e92:	e031      	b.n	8003ef8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f003 0301 	and.w	r3, r3, #1
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d113      	bne.n	8003eca <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68da      	ldr	r2, [r3, #12]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eac:	b292      	uxth	r2, r2
 8003eae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb4:	1c9a      	adds	r2, r3, #2
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	b29a      	uxth	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ec8:	e011      	b.n	8003eee <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003eca:	f7fe fcf7 	bl	80028bc <HAL_GetTick>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	683a      	ldr	r2, [r7, #0]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d803      	bhi.n	8003ee2 <HAL_SPI_Receive+0x1cc>
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee0:	d102      	bne.n	8003ee8 <HAL_SPI_Receive+0x1d2>
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d102      	bne.n	8003eee <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003eec:	e017      	b.n	8003f1e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d1cd      	bne.n	8003e94 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	6839      	ldr	r1, [r7, #0]
 8003efc:	68f8      	ldr	r0, [r7, #12]
 8003efe:	f000 fa45 	bl	800438c <SPI_EndRxTransaction>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d002      	beq.n	8003f0e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2220      	movs	r2, #32
 8003f0c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d002      	beq.n	8003f1c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	75fb      	strb	r3, [r7, #23]
 8003f1a:	e000      	b.n	8003f1e <HAL_SPI_Receive+0x208>
  }

error :
 8003f1c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2201      	movs	r2, #1
 8003f22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003f2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3718      	adds	r7, #24
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b08c      	sub	sp, #48	; 0x30
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]
 8003f44:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003f46:	2301      	movs	r3, #1
 8003f48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d101      	bne.n	8003f5e <HAL_SPI_TransmitReceive+0x26>
 8003f5a:	2302      	movs	r3, #2
 8003f5c:	e18a      	b.n	8004274 <HAL_SPI_TransmitReceive+0x33c>
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2201      	movs	r2, #1
 8003f62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f66:	f7fe fca9 	bl	80028bc <HAL_GetTick>
 8003f6a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003f7c:	887b      	ldrh	r3, [r7, #2]
 8003f7e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003f80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d00f      	beq.n	8003fa8 <HAL_SPI_TransmitReceive+0x70>
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f8e:	d107      	bne.n	8003fa0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d103      	bne.n	8003fa0 <HAL_SPI_TransmitReceive+0x68>
 8003f98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f9c:	2b04      	cmp	r3, #4
 8003f9e:	d003      	beq.n	8003fa8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003fa0:	2302      	movs	r3, #2
 8003fa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003fa6:	e15b      	b.n	8004260 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d005      	beq.n	8003fba <HAL_SPI_TransmitReceive+0x82>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d002      	beq.n	8003fba <HAL_SPI_TransmitReceive+0x82>
 8003fb4:	887b      	ldrh	r3, [r7, #2]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d103      	bne.n	8003fc2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003fc0:	e14e      	b.n	8004260 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	2b04      	cmp	r3, #4
 8003fcc:	d003      	beq.n	8003fd6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2205      	movs	r2, #5
 8003fd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	887a      	ldrh	r2, [r7, #2]
 8003fe6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	887a      	ldrh	r2, [r7, #2]
 8003fec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	68ba      	ldr	r2, [r7, #8]
 8003ff2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	887a      	ldrh	r2, [r7, #2]
 8003ff8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	887a      	ldrh	r2, [r7, #2]
 8003ffe:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2200      	movs	r2, #0
 800400a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004016:	2b40      	cmp	r3, #64	; 0x40
 8004018:	d007      	beq.n	800402a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004028:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004032:	d178      	bne.n	8004126 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d002      	beq.n	8004042 <HAL_SPI_TransmitReceive+0x10a>
 800403c:	8b7b      	ldrh	r3, [r7, #26]
 800403e:	2b01      	cmp	r3, #1
 8004040:	d166      	bne.n	8004110 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004046:	881a      	ldrh	r2, [r3, #0]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004052:	1c9a      	adds	r2, r3, #2
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800405c:	b29b      	uxth	r3, r3
 800405e:	3b01      	subs	r3, #1
 8004060:	b29a      	uxth	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004066:	e053      	b.n	8004110 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f003 0302 	and.w	r3, r3, #2
 8004072:	2b02      	cmp	r3, #2
 8004074:	d11b      	bne.n	80040ae <HAL_SPI_TransmitReceive+0x176>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800407a:	b29b      	uxth	r3, r3
 800407c:	2b00      	cmp	r3, #0
 800407e:	d016      	beq.n	80040ae <HAL_SPI_TransmitReceive+0x176>
 8004080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004082:	2b01      	cmp	r3, #1
 8004084:	d113      	bne.n	80040ae <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408a:	881a      	ldrh	r2, [r3, #0]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004096:	1c9a      	adds	r2, r3, #2
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	3b01      	subs	r3, #1
 80040a4:	b29a      	uxth	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80040aa:	2300      	movs	r3, #0
 80040ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f003 0301 	and.w	r3, r3, #1
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d119      	bne.n	80040f0 <HAL_SPI_TransmitReceive+0x1b8>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d014      	beq.n	80040f0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68da      	ldr	r2, [r3, #12]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d0:	b292      	uxth	r2, r2
 80040d2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d8:	1c9a      	adds	r2, r3, #2
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	3b01      	subs	r3, #1
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80040ec:	2301      	movs	r3, #1
 80040ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80040f0:	f7fe fbe4 	bl	80028bc <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d807      	bhi.n	8004110 <HAL_SPI_TransmitReceive+0x1d8>
 8004100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004106:	d003      	beq.n	8004110 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800410e:	e0a7      	b.n	8004260 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004114:	b29b      	uxth	r3, r3
 8004116:	2b00      	cmp	r3, #0
 8004118:	d1a6      	bne.n	8004068 <HAL_SPI_TransmitReceive+0x130>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800411e:	b29b      	uxth	r3, r3
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1a1      	bne.n	8004068 <HAL_SPI_TransmitReceive+0x130>
 8004124:	e07c      	b.n	8004220 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d002      	beq.n	8004134 <HAL_SPI_TransmitReceive+0x1fc>
 800412e:	8b7b      	ldrh	r3, [r7, #26]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d16b      	bne.n	800420c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	330c      	adds	r3, #12
 800413e:	7812      	ldrb	r2, [r2, #0]
 8004140:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004146:	1c5a      	adds	r2, r3, #1
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004150:	b29b      	uxth	r3, r3
 8004152:	3b01      	subs	r3, #1
 8004154:	b29a      	uxth	r2, r3
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800415a:	e057      	b.n	800420c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b02      	cmp	r3, #2
 8004168:	d11c      	bne.n	80041a4 <HAL_SPI_TransmitReceive+0x26c>
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800416e:	b29b      	uxth	r3, r3
 8004170:	2b00      	cmp	r3, #0
 8004172:	d017      	beq.n	80041a4 <HAL_SPI_TransmitReceive+0x26c>
 8004174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004176:	2b01      	cmp	r3, #1
 8004178:	d114      	bne.n	80041a4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	330c      	adds	r3, #12
 8004184:	7812      	ldrb	r2, [r2, #0]
 8004186:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800418c:	1c5a      	adds	r2, r3, #1
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004196:	b29b      	uxth	r3, r3
 8004198:	3b01      	subs	r3, #1
 800419a:	b29a      	uxth	r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80041a0:	2300      	movs	r3, #0
 80041a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d119      	bne.n	80041e6 <HAL_SPI_TransmitReceive+0x2ae>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d014      	beq.n	80041e6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68da      	ldr	r2, [r3, #12]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c6:	b2d2      	uxtb	r2, r2
 80041c8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ce:	1c5a      	adds	r2, r3, #1
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041d8:	b29b      	uxth	r3, r3
 80041da:	3b01      	subs	r3, #1
 80041dc:	b29a      	uxth	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80041e2:	2301      	movs	r3, #1
 80041e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80041e6:	f7fe fb69 	bl	80028bc <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d803      	bhi.n	80041fe <HAL_SPI_TransmitReceive+0x2c6>
 80041f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041fc:	d102      	bne.n	8004204 <HAL_SPI_TransmitReceive+0x2cc>
 80041fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004200:	2b00      	cmp	r3, #0
 8004202:	d103      	bne.n	800420c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800420a:	e029      	b.n	8004260 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004210:	b29b      	uxth	r3, r3
 8004212:	2b00      	cmp	r3, #0
 8004214:	d1a2      	bne.n	800415c <HAL_SPI_TransmitReceive+0x224>
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800421a:	b29b      	uxth	r3, r3
 800421c:	2b00      	cmp	r3, #0
 800421e:	d19d      	bne.n	800415c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004222:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004224:	68f8      	ldr	r0, [r7, #12]
 8004226:	f000 f917 	bl	8004458 <SPI_EndRxTxTransaction>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d006      	beq.n	800423e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2220      	movs	r2, #32
 800423a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800423c:	e010      	b.n	8004260 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d10b      	bne.n	800425e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004246:	2300      	movs	r3, #0
 8004248:	617b      	str	r3, [r7, #20]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	617b      	str	r3, [r7, #20]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	617b      	str	r3, [r7, #20]
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	e000      	b.n	8004260 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800425e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004270:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004274:	4618      	mov	r0, r3
 8004276:	3730      	adds	r7, #48	; 0x30
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b088      	sub	sp, #32
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	603b      	str	r3, [r7, #0]
 8004288:	4613      	mov	r3, r2
 800428a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800428c:	f7fe fb16 	bl	80028bc <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004294:	1a9b      	subs	r3, r3, r2
 8004296:	683a      	ldr	r2, [r7, #0]
 8004298:	4413      	add	r3, r2
 800429a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800429c:	f7fe fb0e 	bl	80028bc <HAL_GetTick>
 80042a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80042a2:	4b39      	ldr	r3, [pc, #228]	; (8004388 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	015b      	lsls	r3, r3, #5
 80042a8:	0d1b      	lsrs	r3, r3, #20
 80042aa:	69fa      	ldr	r2, [r7, #28]
 80042ac:	fb02 f303 	mul.w	r3, r2, r3
 80042b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042b2:	e054      	b.n	800435e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ba:	d050      	beq.n	800435e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80042bc:	f7fe fafe 	bl	80028bc <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	69fa      	ldr	r2, [r7, #28]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d902      	bls.n	80042d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d13d      	bne.n	800434e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	685a      	ldr	r2, [r3, #4]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80042e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042ea:	d111      	bne.n	8004310 <SPI_WaitFlagStateUntilTimeout+0x94>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042f4:	d004      	beq.n	8004300 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042fe:	d107      	bne.n	8004310 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800430e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004314:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004318:	d10f      	bne.n	800433a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004328:	601a      	str	r2, [r3, #0]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004338:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2201      	movs	r2, #1
 800433e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e017      	b.n	800437e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d101      	bne.n	8004358 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004354:	2300      	movs	r3, #0
 8004356:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	3b01      	subs	r3, #1
 800435c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	689a      	ldr	r2, [r3, #8]
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	4013      	ands	r3, r2
 8004368:	68ba      	ldr	r2, [r7, #8]
 800436a:	429a      	cmp	r2, r3
 800436c:	bf0c      	ite	eq
 800436e:	2301      	moveq	r3, #1
 8004370:	2300      	movne	r3, #0
 8004372:	b2db      	uxtb	r3, r3
 8004374:	461a      	mov	r2, r3
 8004376:	79fb      	ldrb	r3, [r7, #7]
 8004378:	429a      	cmp	r2, r3
 800437a:	d19b      	bne.n	80042b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	3720      	adds	r7, #32
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	20000050 	.word	0x20000050

0800438c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b086      	sub	sp, #24
 8004390:	af02      	add	r7, sp, #8
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043a0:	d111      	bne.n	80043c6 <SPI_EndRxTransaction+0x3a>
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043aa:	d004      	beq.n	80043b6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043b4:	d107      	bne.n	80043c6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043c4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043ce:	d12a      	bne.n	8004426 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043d8:	d012      	beq.n	8004400 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	9300      	str	r3, [sp, #0]
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	2200      	movs	r2, #0
 80043e2:	2180      	movs	r1, #128	; 0x80
 80043e4:	68f8      	ldr	r0, [r7, #12]
 80043e6:	f7ff ff49 	bl	800427c <SPI_WaitFlagStateUntilTimeout>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d02d      	beq.n	800444c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043f4:	f043 0220 	orr.w	r2, r3, #32
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e026      	b.n	800444e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	9300      	str	r3, [sp, #0]
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	2200      	movs	r2, #0
 8004408:	2101      	movs	r1, #1
 800440a:	68f8      	ldr	r0, [r7, #12]
 800440c:	f7ff ff36 	bl	800427c <SPI_WaitFlagStateUntilTimeout>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d01a      	beq.n	800444c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800441a:	f043 0220 	orr.w	r2, r3, #32
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e013      	b.n	800444e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	9300      	str	r3, [sp, #0]
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	2200      	movs	r2, #0
 800442e:	2101      	movs	r1, #1
 8004430:	68f8      	ldr	r0, [r7, #12]
 8004432:	f7ff ff23 	bl	800427c <SPI_WaitFlagStateUntilTimeout>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d007      	beq.n	800444c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004440:	f043 0220 	orr.w	r2, r3, #32
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e000      	b.n	800444e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3710      	adds	r7, #16
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
	...

08004458 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b088      	sub	sp, #32
 800445c:	af02      	add	r7, sp, #8
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004464:	4b1b      	ldr	r3, [pc, #108]	; (80044d4 <SPI_EndRxTxTransaction+0x7c>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a1b      	ldr	r2, [pc, #108]	; (80044d8 <SPI_EndRxTxTransaction+0x80>)
 800446a:	fba2 2303 	umull	r2, r3, r2, r3
 800446e:	0d5b      	lsrs	r3, r3, #21
 8004470:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004474:	fb02 f303 	mul.w	r3, r2, r3
 8004478:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004482:	d112      	bne.n	80044aa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	9300      	str	r3, [sp, #0]
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	2200      	movs	r2, #0
 800448c:	2180      	movs	r1, #128	; 0x80
 800448e:	68f8      	ldr	r0, [r7, #12]
 8004490:	f7ff fef4 	bl	800427c <SPI_WaitFlagStateUntilTimeout>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d016      	beq.n	80044c8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800449e:	f043 0220 	orr.w	r2, r3, #32
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e00f      	b.n	80044ca <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d00a      	beq.n	80044c6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	3b01      	subs	r3, #1
 80044b4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044c0:	2b80      	cmp	r3, #128	; 0x80
 80044c2:	d0f2      	beq.n	80044aa <SPI_EndRxTxTransaction+0x52>
 80044c4:	e000      	b.n	80044c8 <SPI_EndRxTxTransaction+0x70>
        break;
 80044c6:	bf00      	nop
  }

  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3718      	adds	r7, #24
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	20000050 	.word	0x20000050
 80044d8:	165e9f81 	.word	0x165e9f81

080044dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d101      	bne.n	80044ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e041      	b.n	8004572 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d106      	bne.n	8004508 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f7fe f854 	bl	80025b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2202      	movs	r2, #2
 800450c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	3304      	adds	r3, #4
 8004518:	4619      	mov	r1, r3
 800451a:	4610      	mov	r0, r2
 800451c:	f000 fb1c 	bl	8004b58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004570:	2300      	movs	r3, #0
}
 8004572:	4618      	mov	r0, r3
 8004574:	3708      	adds	r7, #8
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
	...

0800457c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800457c:	b480      	push	{r7}
 800457e:	b085      	sub	sp, #20
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800458a:	b2db      	uxtb	r3, r3
 800458c:	2b01      	cmp	r3, #1
 800458e:	d001      	beq.n	8004594 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e03c      	b.n	800460e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2202      	movs	r2, #2
 8004598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a1e      	ldr	r2, [pc, #120]	; (800461c <HAL_TIM_Base_Start+0xa0>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d018      	beq.n	80045d8 <HAL_TIM_Base_Start+0x5c>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045ae:	d013      	beq.n	80045d8 <HAL_TIM_Base_Start+0x5c>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a1a      	ldr	r2, [pc, #104]	; (8004620 <HAL_TIM_Base_Start+0xa4>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d00e      	beq.n	80045d8 <HAL_TIM_Base_Start+0x5c>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a19      	ldr	r2, [pc, #100]	; (8004624 <HAL_TIM_Base_Start+0xa8>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d009      	beq.n	80045d8 <HAL_TIM_Base_Start+0x5c>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a17      	ldr	r2, [pc, #92]	; (8004628 <HAL_TIM_Base_Start+0xac>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d004      	beq.n	80045d8 <HAL_TIM_Base_Start+0x5c>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a16      	ldr	r2, [pc, #88]	; (800462c <HAL_TIM_Base_Start+0xb0>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d111      	bne.n	80045fc <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	f003 0307 	and.w	r3, r3, #7
 80045e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2b06      	cmp	r3, #6
 80045e8:	d010      	beq.n	800460c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f042 0201 	orr.w	r2, r2, #1
 80045f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045fa:	e007      	b.n	800460c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f042 0201 	orr.w	r2, r2, #1
 800460a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3714      	adds	r7, #20
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
 800461a:	bf00      	nop
 800461c:	40010000 	.word	0x40010000
 8004620:	40000400 	.word	0x40000400
 8004624:	40000800 	.word	0x40000800
 8004628:	40000c00 	.word	0x40000c00
 800462c:	40014000 	.word	0x40014000

08004630 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d101      	bne.n	8004642 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e041      	b.n	80046c6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004648:	b2db      	uxtb	r3, r3
 800464a:	2b00      	cmp	r3, #0
 800464c:	d106      	bne.n	800465c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 f839 	bl	80046ce <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2202      	movs	r2, #2
 8004660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	3304      	adds	r3, #4
 800466c:	4619      	mov	r1, r3
 800466e:	4610      	mov	r0, r2
 8004670:	f000 fa72 	bl	8004b58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3708      	adds	r7, #8
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}

080046ce <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80046ce:	b480      	push	{r7}
 80046d0:	b083      	sub	sp, #12
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80046d6:	bf00      	nop
 80046d8:	370c      	adds	r7, #12
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
	...

080046e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d109      	bne.n	8004708 <HAL_TIM_PWM_Start+0x24>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	bf14      	ite	ne
 8004700:	2301      	movne	r3, #1
 8004702:	2300      	moveq	r3, #0
 8004704:	b2db      	uxtb	r3, r3
 8004706:	e022      	b.n	800474e <HAL_TIM_PWM_Start+0x6a>
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	2b04      	cmp	r3, #4
 800470c:	d109      	bne.n	8004722 <HAL_TIM_PWM_Start+0x3e>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004714:	b2db      	uxtb	r3, r3
 8004716:	2b01      	cmp	r3, #1
 8004718:	bf14      	ite	ne
 800471a:	2301      	movne	r3, #1
 800471c:	2300      	moveq	r3, #0
 800471e:	b2db      	uxtb	r3, r3
 8004720:	e015      	b.n	800474e <HAL_TIM_PWM_Start+0x6a>
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	2b08      	cmp	r3, #8
 8004726:	d109      	bne.n	800473c <HAL_TIM_PWM_Start+0x58>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800472e:	b2db      	uxtb	r3, r3
 8004730:	2b01      	cmp	r3, #1
 8004732:	bf14      	ite	ne
 8004734:	2301      	movne	r3, #1
 8004736:	2300      	moveq	r3, #0
 8004738:	b2db      	uxtb	r3, r3
 800473a:	e008      	b.n	800474e <HAL_TIM_PWM_Start+0x6a>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004742:	b2db      	uxtb	r3, r3
 8004744:	2b01      	cmp	r3, #1
 8004746:	bf14      	ite	ne
 8004748:	2301      	movne	r3, #1
 800474a:	2300      	moveq	r3, #0
 800474c:	b2db      	uxtb	r3, r3
 800474e:	2b00      	cmp	r3, #0
 8004750:	d001      	beq.n	8004756 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e068      	b.n	8004828 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d104      	bne.n	8004766 <HAL_TIM_PWM_Start+0x82>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2202      	movs	r2, #2
 8004760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004764:	e013      	b.n	800478e <HAL_TIM_PWM_Start+0xaa>
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	2b04      	cmp	r3, #4
 800476a:	d104      	bne.n	8004776 <HAL_TIM_PWM_Start+0x92>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2202      	movs	r2, #2
 8004770:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004774:	e00b      	b.n	800478e <HAL_TIM_PWM_Start+0xaa>
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	2b08      	cmp	r3, #8
 800477a:	d104      	bne.n	8004786 <HAL_TIM_PWM_Start+0xa2>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2202      	movs	r2, #2
 8004780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004784:	e003      	b.n	800478e <HAL_TIM_PWM_Start+0xaa>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2202      	movs	r2, #2
 800478a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2201      	movs	r2, #1
 8004794:	6839      	ldr	r1, [r7, #0]
 8004796:	4618      	mov	r0, r3
 8004798:	f000 fc84 	bl	80050a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a23      	ldr	r2, [pc, #140]	; (8004830 <HAL_TIM_PWM_Start+0x14c>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d107      	bne.n	80047b6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a1d      	ldr	r2, [pc, #116]	; (8004830 <HAL_TIM_PWM_Start+0x14c>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d018      	beq.n	80047f2 <HAL_TIM_PWM_Start+0x10e>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047c8:	d013      	beq.n	80047f2 <HAL_TIM_PWM_Start+0x10e>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a19      	ldr	r2, [pc, #100]	; (8004834 <HAL_TIM_PWM_Start+0x150>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d00e      	beq.n	80047f2 <HAL_TIM_PWM_Start+0x10e>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a17      	ldr	r2, [pc, #92]	; (8004838 <HAL_TIM_PWM_Start+0x154>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d009      	beq.n	80047f2 <HAL_TIM_PWM_Start+0x10e>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a16      	ldr	r2, [pc, #88]	; (800483c <HAL_TIM_PWM_Start+0x158>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d004      	beq.n	80047f2 <HAL_TIM_PWM_Start+0x10e>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a14      	ldr	r2, [pc, #80]	; (8004840 <HAL_TIM_PWM_Start+0x15c>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d111      	bne.n	8004816 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	f003 0307 	and.w	r3, r3, #7
 80047fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2b06      	cmp	r3, #6
 8004802:	d010      	beq.n	8004826 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f042 0201 	orr.w	r2, r2, #1
 8004812:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004814:	e007      	b.n	8004826 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f042 0201 	orr.w	r2, r2, #1
 8004824:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	3710      	adds	r7, #16
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}
 8004830:	40010000 	.word	0x40010000
 8004834:	40000400 	.word	0x40000400
 8004838:	40000800 	.word	0x40000800
 800483c:	40000c00 	.word	0x40000c00
 8004840:	40014000 	.word	0x40014000

08004844 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b086      	sub	sp, #24
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004850:	2300      	movs	r3, #0
 8004852:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800485a:	2b01      	cmp	r3, #1
 800485c:	d101      	bne.n	8004862 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800485e:	2302      	movs	r3, #2
 8004860:	e0ae      	b.n	80049c0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2201      	movs	r2, #1
 8004866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2b0c      	cmp	r3, #12
 800486e:	f200 809f 	bhi.w	80049b0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004872:	a201      	add	r2, pc, #4	; (adr r2, 8004878 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004878:	080048ad 	.word	0x080048ad
 800487c:	080049b1 	.word	0x080049b1
 8004880:	080049b1 	.word	0x080049b1
 8004884:	080049b1 	.word	0x080049b1
 8004888:	080048ed 	.word	0x080048ed
 800488c:	080049b1 	.word	0x080049b1
 8004890:	080049b1 	.word	0x080049b1
 8004894:	080049b1 	.word	0x080049b1
 8004898:	0800492f 	.word	0x0800492f
 800489c:	080049b1 	.word	0x080049b1
 80048a0:	080049b1 	.word	0x080049b1
 80048a4:	080049b1 	.word	0x080049b1
 80048a8:	0800496f 	.word	0x0800496f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68b9      	ldr	r1, [r7, #8]
 80048b2:	4618      	mov	r0, r3
 80048b4:	f000 f9d0 	bl	8004c58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	699a      	ldr	r2, [r3, #24]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f042 0208 	orr.w	r2, r2, #8
 80048c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	699a      	ldr	r2, [r3, #24]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f022 0204 	bic.w	r2, r2, #4
 80048d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	6999      	ldr	r1, [r3, #24]
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	691a      	ldr	r2, [r3, #16]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	430a      	orrs	r2, r1
 80048e8:	619a      	str	r2, [r3, #24]
      break;
 80048ea:	e064      	b.n	80049b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68b9      	ldr	r1, [r7, #8]
 80048f2:	4618      	mov	r0, r3
 80048f4:	f000 fa16 	bl	8004d24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	699a      	ldr	r2, [r3, #24]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004906:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	699a      	ldr	r2, [r3, #24]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004916:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	6999      	ldr	r1, [r3, #24]
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	021a      	lsls	r2, r3, #8
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	430a      	orrs	r2, r1
 800492a:	619a      	str	r2, [r3, #24]
      break;
 800492c:	e043      	b.n	80049b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	68b9      	ldr	r1, [r7, #8]
 8004934:	4618      	mov	r0, r3
 8004936:	f000 fa61 	bl	8004dfc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	69da      	ldr	r2, [r3, #28]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f042 0208 	orr.w	r2, r2, #8
 8004948:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	69da      	ldr	r2, [r3, #28]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f022 0204 	bic.w	r2, r2, #4
 8004958:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	69d9      	ldr	r1, [r3, #28]
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	691a      	ldr	r2, [r3, #16]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	430a      	orrs	r2, r1
 800496a:	61da      	str	r2, [r3, #28]
      break;
 800496c:	e023      	b.n	80049b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68b9      	ldr	r1, [r7, #8]
 8004974:	4618      	mov	r0, r3
 8004976:	f000 faab 	bl	8004ed0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	69da      	ldr	r2, [r3, #28]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004988:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	69da      	ldr	r2, [r3, #28]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004998:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	69d9      	ldr	r1, [r3, #28]
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	691b      	ldr	r3, [r3, #16]
 80049a4:	021a      	lsls	r2, r3, #8
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	430a      	orrs	r2, r1
 80049ac:	61da      	str	r2, [r3, #28]
      break;
 80049ae:	e002      	b.n	80049b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	75fb      	strb	r3, [r7, #23]
      break;
 80049b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80049be:	7dfb      	ldrb	r3, [r7, #23]
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3718      	adds	r7, #24
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049d2:	2300      	movs	r3, #0
 80049d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d101      	bne.n	80049e4 <HAL_TIM_ConfigClockSource+0x1c>
 80049e0:	2302      	movs	r3, #2
 80049e2:	e0b4      	b.n	8004b4e <HAL_TIM_ConfigClockSource+0x186>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2202      	movs	r2, #2
 80049f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004a02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a0a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68ba      	ldr	r2, [r7, #8]
 8004a12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a1c:	d03e      	beq.n	8004a9c <HAL_TIM_ConfigClockSource+0xd4>
 8004a1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a22:	f200 8087 	bhi.w	8004b34 <HAL_TIM_ConfigClockSource+0x16c>
 8004a26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a2a:	f000 8086 	beq.w	8004b3a <HAL_TIM_ConfigClockSource+0x172>
 8004a2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a32:	d87f      	bhi.n	8004b34 <HAL_TIM_ConfigClockSource+0x16c>
 8004a34:	2b70      	cmp	r3, #112	; 0x70
 8004a36:	d01a      	beq.n	8004a6e <HAL_TIM_ConfigClockSource+0xa6>
 8004a38:	2b70      	cmp	r3, #112	; 0x70
 8004a3a:	d87b      	bhi.n	8004b34 <HAL_TIM_ConfigClockSource+0x16c>
 8004a3c:	2b60      	cmp	r3, #96	; 0x60
 8004a3e:	d050      	beq.n	8004ae2 <HAL_TIM_ConfigClockSource+0x11a>
 8004a40:	2b60      	cmp	r3, #96	; 0x60
 8004a42:	d877      	bhi.n	8004b34 <HAL_TIM_ConfigClockSource+0x16c>
 8004a44:	2b50      	cmp	r3, #80	; 0x50
 8004a46:	d03c      	beq.n	8004ac2 <HAL_TIM_ConfigClockSource+0xfa>
 8004a48:	2b50      	cmp	r3, #80	; 0x50
 8004a4a:	d873      	bhi.n	8004b34 <HAL_TIM_ConfigClockSource+0x16c>
 8004a4c:	2b40      	cmp	r3, #64	; 0x40
 8004a4e:	d058      	beq.n	8004b02 <HAL_TIM_ConfigClockSource+0x13a>
 8004a50:	2b40      	cmp	r3, #64	; 0x40
 8004a52:	d86f      	bhi.n	8004b34 <HAL_TIM_ConfigClockSource+0x16c>
 8004a54:	2b30      	cmp	r3, #48	; 0x30
 8004a56:	d064      	beq.n	8004b22 <HAL_TIM_ConfigClockSource+0x15a>
 8004a58:	2b30      	cmp	r3, #48	; 0x30
 8004a5a:	d86b      	bhi.n	8004b34 <HAL_TIM_ConfigClockSource+0x16c>
 8004a5c:	2b20      	cmp	r3, #32
 8004a5e:	d060      	beq.n	8004b22 <HAL_TIM_ConfigClockSource+0x15a>
 8004a60:	2b20      	cmp	r3, #32
 8004a62:	d867      	bhi.n	8004b34 <HAL_TIM_ConfigClockSource+0x16c>
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d05c      	beq.n	8004b22 <HAL_TIM_ConfigClockSource+0x15a>
 8004a68:	2b10      	cmp	r3, #16
 8004a6a:	d05a      	beq.n	8004b22 <HAL_TIM_ConfigClockSource+0x15a>
 8004a6c:	e062      	b.n	8004b34 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6818      	ldr	r0, [r3, #0]
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	6899      	ldr	r1, [r3, #8]
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	685a      	ldr	r2, [r3, #4]
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	f000 faf1 	bl	8005064 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a90:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68ba      	ldr	r2, [r7, #8]
 8004a98:	609a      	str	r2, [r3, #8]
      break;
 8004a9a:	e04f      	b.n	8004b3c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6818      	ldr	r0, [r3, #0]
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	6899      	ldr	r1, [r3, #8]
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	685a      	ldr	r2, [r3, #4]
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	f000 fada 	bl	8005064 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	689a      	ldr	r2, [r3, #8]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004abe:	609a      	str	r2, [r3, #8]
      break;
 8004ac0:	e03c      	b.n	8004b3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6818      	ldr	r0, [r3, #0]
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	6859      	ldr	r1, [r3, #4]
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	461a      	mov	r2, r3
 8004ad0:	f000 fa4e 	bl	8004f70 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2150      	movs	r1, #80	; 0x50
 8004ada:	4618      	mov	r0, r3
 8004adc:	f000 faa7 	bl	800502e <TIM_ITRx_SetConfig>
      break;
 8004ae0:	e02c      	b.n	8004b3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6818      	ldr	r0, [r3, #0]
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	6859      	ldr	r1, [r3, #4]
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	461a      	mov	r2, r3
 8004af0:	f000 fa6d 	bl	8004fce <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2160      	movs	r1, #96	; 0x60
 8004afa:	4618      	mov	r0, r3
 8004afc:	f000 fa97 	bl	800502e <TIM_ITRx_SetConfig>
      break;
 8004b00:	e01c      	b.n	8004b3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6818      	ldr	r0, [r3, #0]
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	6859      	ldr	r1, [r3, #4]
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	461a      	mov	r2, r3
 8004b10:	f000 fa2e 	bl	8004f70 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2140      	movs	r1, #64	; 0x40
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f000 fa87 	bl	800502e <TIM_ITRx_SetConfig>
      break;
 8004b20:	e00c      	b.n	8004b3c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4619      	mov	r1, r3
 8004b2c:	4610      	mov	r0, r2
 8004b2e:	f000 fa7e 	bl	800502e <TIM_ITRx_SetConfig>
      break;
 8004b32:	e003      	b.n	8004b3c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	73fb      	strb	r3, [r7, #15]
      break;
 8004b38:	e000      	b.n	8004b3c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004b3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3710      	adds	r7, #16
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
	...

08004b58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b085      	sub	sp, #20
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a34      	ldr	r2, [pc, #208]	; (8004c3c <TIM_Base_SetConfig+0xe4>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d00f      	beq.n	8004b90 <TIM_Base_SetConfig+0x38>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b76:	d00b      	beq.n	8004b90 <TIM_Base_SetConfig+0x38>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a31      	ldr	r2, [pc, #196]	; (8004c40 <TIM_Base_SetConfig+0xe8>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d007      	beq.n	8004b90 <TIM_Base_SetConfig+0x38>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a30      	ldr	r2, [pc, #192]	; (8004c44 <TIM_Base_SetConfig+0xec>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d003      	beq.n	8004b90 <TIM_Base_SetConfig+0x38>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a2f      	ldr	r2, [pc, #188]	; (8004c48 <TIM_Base_SetConfig+0xf0>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d108      	bne.n	8004ba2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	68fa      	ldr	r2, [r7, #12]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a25      	ldr	r2, [pc, #148]	; (8004c3c <TIM_Base_SetConfig+0xe4>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d01b      	beq.n	8004be2 <TIM_Base_SetConfig+0x8a>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bb0:	d017      	beq.n	8004be2 <TIM_Base_SetConfig+0x8a>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a22      	ldr	r2, [pc, #136]	; (8004c40 <TIM_Base_SetConfig+0xe8>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d013      	beq.n	8004be2 <TIM_Base_SetConfig+0x8a>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a21      	ldr	r2, [pc, #132]	; (8004c44 <TIM_Base_SetConfig+0xec>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d00f      	beq.n	8004be2 <TIM_Base_SetConfig+0x8a>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a20      	ldr	r2, [pc, #128]	; (8004c48 <TIM_Base_SetConfig+0xf0>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d00b      	beq.n	8004be2 <TIM_Base_SetConfig+0x8a>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a1f      	ldr	r2, [pc, #124]	; (8004c4c <TIM_Base_SetConfig+0xf4>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d007      	beq.n	8004be2 <TIM_Base_SetConfig+0x8a>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a1e      	ldr	r2, [pc, #120]	; (8004c50 <TIM_Base_SetConfig+0xf8>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d003      	beq.n	8004be2 <TIM_Base_SetConfig+0x8a>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a1d      	ldr	r2, [pc, #116]	; (8004c54 <TIM_Base_SetConfig+0xfc>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d108      	bne.n	8004bf4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004be8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	68fa      	ldr	r2, [r7, #12]
 8004c06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	689a      	ldr	r2, [r3, #8]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4a08      	ldr	r2, [pc, #32]	; (8004c3c <TIM_Base_SetConfig+0xe4>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d103      	bne.n	8004c28 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	691a      	ldr	r2, [r3, #16]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	615a      	str	r2, [r3, #20]
}
 8004c2e:	bf00      	nop
 8004c30:	3714      	adds	r7, #20
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	40010000 	.word	0x40010000
 8004c40:	40000400 	.word	0x40000400
 8004c44:	40000800 	.word	0x40000800
 8004c48:	40000c00 	.word	0x40000c00
 8004c4c:	40014000 	.word	0x40014000
 8004c50:	40014400 	.word	0x40014400
 8004c54:	40014800 	.word	0x40014800

08004c58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b087      	sub	sp, #28
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a1b      	ldr	r3, [r3, #32]
 8004c66:	f023 0201 	bic.w	r2, r3, #1
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a1b      	ldr	r3, [r3, #32]
 8004c72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	699b      	ldr	r3, [r3, #24]
 8004c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f023 0303 	bic.w	r3, r3, #3
 8004c8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68fa      	ldr	r2, [r7, #12]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	f023 0302 	bic.w	r3, r3, #2
 8004ca0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	697a      	ldr	r2, [r7, #20]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4a1c      	ldr	r2, [pc, #112]	; (8004d20 <TIM_OC1_SetConfig+0xc8>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d10c      	bne.n	8004cce <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	f023 0308 	bic.w	r3, r3, #8
 8004cba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	697a      	ldr	r2, [r7, #20]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	f023 0304 	bic.w	r3, r3, #4
 8004ccc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a13      	ldr	r2, [pc, #76]	; (8004d20 <TIM_OC1_SetConfig+0xc8>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d111      	bne.n	8004cfa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ce4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	693a      	ldr	r2, [r7, #16]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	699b      	ldr	r3, [r3, #24]
 8004cf4:	693a      	ldr	r2, [r7, #16]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	68fa      	ldr	r2, [r7, #12]
 8004d04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	685a      	ldr	r2, [r3, #4]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	697a      	ldr	r2, [r7, #20]
 8004d12:	621a      	str	r2, [r3, #32]
}
 8004d14:	bf00      	nop
 8004d16:	371c      	adds	r7, #28
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr
 8004d20:	40010000 	.word	0x40010000

08004d24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b087      	sub	sp, #28
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a1b      	ldr	r3, [r3, #32]
 8004d32:	f023 0210 	bic.w	r2, r3, #16
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a1b      	ldr	r3, [r3, #32]
 8004d3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	699b      	ldr	r3, [r3, #24]
 8004d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	021b      	lsls	r3, r3, #8
 8004d62:	68fa      	ldr	r2, [r7, #12]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	f023 0320 	bic.w	r3, r3, #32
 8004d6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	011b      	lsls	r3, r3, #4
 8004d76:	697a      	ldr	r2, [r7, #20]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a1e      	ldr	r2, [pc, #120]	; (8004df8 <TIM_OC2_SetConfig+0xd4>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d10d      	bne.n	8004da0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	011b      	lsls	r3, r3, #4
 8004d92:	697a      	ldr	r2, [r7, #20]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d9e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a15      	ldr	r2, [pc, #84]	; (8004df8 <TIM_OC2_SetConfig+0xd4>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d113      	bne.n	8004dd0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004dae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004db6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	695b      	ldr	r3, [r3, #20]
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	693a      	ldr	r2, [r7, #16]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	699b      	ldr	r3, [r3, #24]
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	693a      	ldr	r2, [r7, #16]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	693a      	ldr	r2, [r7, #16]
 8004dd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	685a      	ldr	r2, [r3, #4]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	621a      	str	r2, [r3, #32]
}
 8004dea:	bf00      	nop
 8004dec:	371c      	adds	r7, #28
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	40010000 	.word	0x40010000

08004dfc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b087      	sub	sp, #28
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a1b      	ldr	r3, [r3, #32]
 8004e0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a1b      	ldr	r3, [r3, #32]
 8004e16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	69db      	ldr	r3, [r3, #28]
 8004e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f023 0303 	bic.w	r3, r3, #3
 8004e32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68fa      	ldr	r2, [r7, #12]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	021b      	lsls	r3, r3, #8
 8004e4c:	697a      	ldr	r2, [r7, #20]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a1d      	ldr	r2, [pc, #116]	; (8004ecc <TIM_OC3_SetConfig+0xd0>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d10d      	bne.n	8004e76 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	021b      	lsls	r3, r3, #8
 8004e68:	697a      	ldr	r2, [r7, #20]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a14      	ldr	r2, [pc, #80]	; (8004ecc <TIM_OC3_SetConfig+0xd0>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d113      	bne.n	8004ea6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	011b      	lsls	r3, r3, #4
 8004e94:	693a      	ldr	r2, [r7, #16]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	011b      	lsls	r3, r3, #4
 8004ea0:	693a      	ldr	r2, [r7, #16]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	693a      	ldr	r2, [r7, #16]
 8004eaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	685a      	ldr	r2, [r3, #4]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	697a      	ldr	r2, [r7, #20]
 8004ebe:	621a      	str	r2, [r3, #32]
}
 8004ec0:	bf00      	nop
 8004ec2:	371c      	adds	r7, #28
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr
 8004ecc:	40010000 	.word	0x40010000

08004ed0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b087      	sub	sp, #28
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a1b      	ldr	r3, [r3, #32]
 8004eea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	69db      	ldr	r3, [r3, #28]
 8004ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004efe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	021b      	lsls	r3, r3, #8
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	031b      	lsls	r3, r3, #12
 8004f22:	693a      	ldr	r2, [r7, #16]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a10      	ldr	r2, [pc, #64]	; (8004f6c <TIM_OC4_SetConfig+0x9c>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d109      	bne.n	8004f44 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	695b      	ldr	r3, [r3, #20]
 8004f3c:	019b      	lsls	r3, r3, #6
 8004f3e:	697a      	ldr	r2, [r7, #20]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	697a      	ldr	r2, [r7, #20]
 8004f48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	685a      	ldr	r2, [r3, #4]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	693a      	ldr	r2, [r7, #16]
 8004f5c:	621a      	str	r2, [r3, #32]
}
 8004f5e:	bf00      	nop
 8004f60:	371c      	adds	r7, #28
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop
 8004f6c:	40010000 	.word	0x40010000

08004f70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b087      	sub	sp, #28
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6a1b      	ldr	r3, [r3, #32]
 8004f80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6a1b      	ldr	r3, [r3, #32]
 8004f86:	f023 0201 	bic.w	r2, r3, #1
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	699b      	ldr	r3, [r3, #24]
 8004f92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	011b      	lsls	r3, r3, #4
 8004fa0:	693a      	ldr	r2, [r7, #16]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	f023 030a 	bic.w	r3, r3, #10
 8004fac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004fae:	697a      	ldr	r2, [r7, #20]
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	693a      	ldr	r2, [r7, #16]
 8004fba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	697a      	ldr	r2, [r7, #20]
 8004fc0:	621a      	str	r2, [r3, #32]
}
 8004fc2:	bf00      	nop
 8004fc4:	371c      	adds	r7, #28
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr

08004fce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fce:	b480      	push	{r7}
 8004fd0:	b087      	sub	sp, #28
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	60f8      	str	r0, [r7, #12]
 8004fd6:	60b9      	str	r1, [r7, #8]
 8004fd8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6a1b      	ldr	r3, [r3, #32]
 8004fde:	f023 0210 	bic.w	r2, r3, #16
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6a1b      	ldr	r3, [r3, #32]
 8004ff0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ff8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	031b      	lsls	r3, r3, #12
 8004ffe:	697a      	ldr	r2, [r7, #20]
 8005000:	4313      	orrs	r3, r2
 8005002:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800500a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	011b      	lsls	r3, r3, #4
 8005010:	693a      	ldr	r2, [r7, #16]
 8005012:	4313      	orrs	r3, r2
 8005014:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	697a      	ldr	r2, [r7, #20]
 800501a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	693a      	ldr	r2, [r7, #16]
 8005020:	621a      	str	r2, [r3, #32]
}
 8005022:	bf00      	nop
 8005024:	371c      	adds	r7, #28
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr

0800502e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800502e:	b480      	push	{r7}
 8005030:	b085      	sub	sp, #20
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
 8005036:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005044:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005046:	683a      	ldr	r2, [r7, #0]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	4313      	orrs	r3, r2
 800504c:	f043 0307 	orr.w	r3, r3, #7
 8005050:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	609a      	str	r2, [r3, #8]
}
 8005058:	bf00      	nop
 800505a:	3714      	adds	r7, #20
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005064:	b480      	push	{r7}
 8005066:	b087      	sub	sp, #28
 8005068:	af00      	add	r7, sp, #0
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	607a      	str	r2, [r7, #4]
 8005070:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800507e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	021a      	lsls	r2, r3, #8
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	431a      	orrs	r2, r3
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	4313      	orrs	r3, r2
 800508c:	697a      	ldr	r2, [r7, #20]
 800508e:	4313      	orrs	r3, r2
 8005090:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	697a      	ldr	r2, [r7, #20]
 8005096:	609a      	str	r2, [r3, #8]
}
 8005098:	bf00      	nop
 800509a:	371c      	adds	r7, #28
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b087      	sub	sp, #28
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	f003 031f 	and.w	r3, r3, #31
 80050b6:	2201      	movs	r2, #1
 80050b8:	fa02 f303 	lsl.w	r3, r2, r3
 80050bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6a1a      	ldr	r2, [r3, #32]
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	43db      	mvns	r3, r3
 80050c6:	401a      	ands	r2, r3
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6a1a      	ldr	r2, [r3, #32]
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	f003 031f 	and.w	r3, r3, #31
 80050d6:	6879      	ldr	r1, [r7, #4]
 80050d8:	fa01 f303 	lsl.w	r3, r1, r3
 80050dc:	431a      	orrs	r2, r3
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	621a      	str	r2, [r3, #32]
}
 80050e2:	bf00      	nop
 80050e4:	371c      	adds	r7, #28
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
	...

080050f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b085      	sub	sp, #20
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005100:	2b01      	cmp	r3, #1
 8005102:	d101      	bne.n	8005108 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005104:	2302      	movs	r3, #2
 8005106:	e050      	b.n	80051aa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2202      	movs	r2, #2
 8005114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800512e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	4313      	orrs	r3, r2
 8005138:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68fa      	ldr	r2, [r7, #12]
 8005140:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a1c      	ldr	r2, [pc, #112]	; (80051b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d018      	beq.n	800517e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005154:	d013      	beq.n	800517e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a18      	ldr	r2, [pc, #96]	; (80051bc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d00e      	beq.n	800517e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a16      	ldr	r2, [pc, #88]	; (80051c0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d009      	beq.n	800517e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a15      	ldr	r2, [pc, #84]	; (80051c4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d004      	beq.n	800517e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a13      	ldr	r2, [pc, #76]	; (80051c8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d10c      	bne.n	8005198 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005184:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	68ba      	ldr	r2, [r7, #8]
 800518c:	4313      	orrs	r3, r2
 800518e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	68ba      	ldr	r2, [r7, #8]
 8005196:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3714      	adds	r7, #20
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr
 80051b6:	bf00      	nop
 80051b8:	40010000 	.word	0x40010000
 80051bc:	40000400 	.word	0x40000400
 80051c0:	40000800 	.word	0x40000800
 80051c4:	40000c00 	.word	0x40000c00
 80051c8:	40014000 	.word	0x40014000

080051cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b085      	sub	sp, #20
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80051d6:	2300      	movs	r3, #0
 80051d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d101      	bne.n	80051e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80051e4:	2302      	movs	r3, #2
 80051e6:	e03d      	b.n	8005264 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	4313      	orrs	r3, r2
 800520a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	4313      	orrs	r3, r2
 8005218:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4313      	orrs	r3, r2
 8005226:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	4313      	orrs	r3, r2
 8005234:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	695b      	ldr	r3, [r3, #20]
 8005240:	4313      	orrs	r3, r2
 8005242:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	69db      	ldr	r3, [r3, #28]
 800524e:	4313      	orrs	r3, r2
 8005250:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005262:	2300      	movs	r3, #0
}
 8005264:	4618      	mov	r0, r3
 8005266:	3714      	adds	r7, #20
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d101      	bne.n	8005282 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e03f      	b.n	8005302 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005288:	b2db      	uxtb	r3, r3
 800528a:	2b00      	cmp	r3, #0
 800528c:	d106      	bne.n	800529c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f7fd f9fc 	bl	8002694 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2224      	movs	r2, #36	; 0x24
 80052a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68da      	ldr	r2, [r3, #12]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 f929 	bl	800550c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	691a      	ldr	r2, [r3, #16]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	695a      	ldr	r2, [r3, #20]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68da      	ldr	r2, [r3, #12]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2220      	movs	r2, #32
 80052f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2220      	movs	r2, #32
 80052fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3708      	adds	r7, #8
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}

0800530a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800530a:	b580      	push	{r7, lr}
 800530c:	b08a      	sub	sp, #40	; 0x28
 800530e:	af02      	add	r7, sp, #8
 8005310:	60f8      	str	r0, [r7, #12]
 8005312:	60b9      	str	r1, [r7, #8]
 8005314:	603b      	str	r3, [r7, #0]
 8005316:	4613      	mov	r3, r2
 8005318:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800531a:	2300      	movs	r3, #0
 800531c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005324:	b2db      	uxtb	r3, r3
 8005326:	2b20      	cmp	r3, #32
 8005328:	d17c      	bne.n	8005424 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d002      	beq.n	8005336 <HAL_UART_Transmit+0x2c>
 8005330:	88fb      	ldrh	r3, [r7, #6]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d101      	bne.n	800533a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e075      	b.n	8005426 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005340:	2b01      	cmp	r3, #1
 8005342:	d101      	bne.n	8005348 <HAL_UART_Transmit+0x3e>
 8005344:	2302      	movs	r3, #2
 8005346:	e06e      	b.n	8005426 <HAL_UART_Transmit+0x11c>
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2200      	movs	r2, #0
 8005354:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2221      	movs	r2, #33	; 0x21
 800535a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800535e:	f7fd faad 	bl	80028bc <HAL_GetTick>
 8005362:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	88fa      	ldrh	r2, [r7, #6]
 8005368:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	88fa      	ldrh	r2, [r7, #6]
 800536e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005378:	d108      	bne.n	800538c <HAL_UART_Transmit+0x82>
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d104      	bne.n	800538c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005382:	2300      	movs	r3, #0
 8005384:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	61bb      	str	r3, [r7, #24]
 800538a:	e003      	b.n	8005394 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005390:	2300      	movs	r3, #0
 8005392:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800539c:	e02a      	b.n	80053f4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	9300      	str	r3, [sp, #0]
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	2200      	movs	r2, #0
 80053a6:	2180      	movs	r1, #128	; 0x80
 80053a8:	68f8      	ldr	r0, [r7, #12]
 80053aa:	f000 f840 	bl	800542e <UART_WaitOnFlagUntilTimeout>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d001      	beq.n	80053b8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80053b4:	2303      	movs	r3, #3
 80053b6:	e036      	b.n	8005426 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d10b      	bne.n	80053d6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	881b      	ldrh	r3, [r3, #0]
 80053c2:	461a      	mov	r2, r3
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	3302      	adds	r3, #2
 80053d2:	61bb      	str	r3, [r7, #24]
 80053d4:	e007      	b.n	80053e6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	781a      	ldrb	r2, [r3, #0]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	3301      	adds	r3, #1
 80053e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	3b01      	subs	r3, #1
 80053ee:	b29a      	uxth	r2, r3
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d1cf      	bne.n	800539e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	9300      	str	r3, [sp, #0]
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	2200      	movs	r2, #0
 8005406:	2140      	movs	r1, #64	; 0x40
 8005408:	68f8      	ldr	r0, [r7, #12]
 800540a:	f000 f810 	bl	800542e <UART_WaitOnFlagUntilTimeout>
 800540e:	4603      	mov	r3, r0
 8005410:	2b00      	cmp	r3, #0
 8005412:	d001      	beq.n	8005418 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005414:	2303      	movs	r3, #3
 8005416:	e006      	b.n	8005426 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2220      	movs	r2, #32
 800541c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005420:	2300      	movs	r3, #0
 8005422:	e000      	b.n	8005426 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005424:	2302      	movs	r3, #2
  }
}
 8005426:	4618      	mov	r0, r3
 8005428:	3720      	adds	r7, #32
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}

0800542e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800542e:	b580      	push	{r7, lr}
 8005430:	b090      	sub	sp, #64	; 0x40
 8005432:	af00      	add	r7, sp, #0
 8005434:	60f8      	str	r0, [r7, #12]
 8005436:	60b9      	str	r1, [r7, #8]
 8005438:	603b      	str	r3, [r7, #0]
 800543a:	4613      	mov	r3, r2
 800543c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800543e:	e050      	b.n	80054e2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005440:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005446:	d04c      	beq.n	80054e2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005448:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800544a:	2b00      	cmp	r3, #0
 800544c:	d007      	beq.n	800545e <UART_WaitOnFlagUntilTimeout+0x30>
 800544e:	f7fd fa35 	bl	80028bc <HAL_GetTick>
 8005452:	4602      	mov	r2, r0
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	1ad3      	subs	r3, r2, r3
 8005458:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800545a:	429a      	cmp	r2, r3
 800545c:	d241      	bcs.n	80054e2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	330c      	adds	r3, #12
 8005464:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005468:	e853 3f00 	ldrex	r3, [r3]
 800546c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800546e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005470:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005474:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	330c      	adds	r3, #12
 800547c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800547e:	637a      	str	r2, [r7, #52]	; 0x34
 8005480:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005482:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005484:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005486:	e841 2300 	strex	r3, r2, [r1]
 800548a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800548c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800548e:	2b00      	cmp	r3, #0
 8005490:	d1e5      	bne.n	800545e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	3314      	adds	r3, #20
 8005498:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	e853 3f00 	ldrex	r3, [r3]
 80054a0:	613b      	str	r3, [r7, #16]
   return(result);
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	f023 0301 	bic.w	r3, r3, #1
 80054a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	3314      	adds	r3, #20
 80054b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054b2:	623a      	str	r2, [r7, #32]
 80054b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b6:	69f9      	ldr	r1, [r7, #28]
 80054b8:	6a3a      	ldr	r2, [r7, #32]
 80054ba:	e841 2300 	strex	r3, r2, [r1]
 80054be:	61bb      	str	r3, [r7, #24]
   return(result);
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d1e5      	bne.n	8005492 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2220      	movs	r2, #32
 80054ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2220      	movs	r2, #32
 80054d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e00f      	b.n	8005502 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	4013      	ands	r3, r2
 80054ec:	68ba      	ldr	r2, [r7, #8]
 80054ee:	429a      	cmp	r2, r3
 80054f0:	bf0c      	ite	eq
 80054f2:	2301      	moveq	r3, #1
 80054f4:	2300      	movne	r3, #0
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	461a      	mov	r2, r3
 80054fa:	79fb      	ldrb	r3, [r7, #7]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d09f      	beq.n	8005440 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005500:	2300      	movs	r3, #0
}
 8005502:	4618      	mov	r0, r3
 8005504:	3740      	adds	r7, #64	; 0x40
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
	...

0800550c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800550c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005510:	b0c0      	sub	sp, #256	; 0x100
 8005512:	af00      	add	r7, sp, #0
 8005514:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	691b      	ldr	r3, [r3, #16]
 8005520:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005528:	68d9      	ldr	r1, [r3, #12]
 800552a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	ea40 0301 	orr.w	r3, r0, r1
 8005534:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800553a:	689a      	ldr	r2, [r3, #8]
 800553c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	431a      	orrs	r2, r3
 8005544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005548:	695b      	ldr	r3, [r3, #20]
 800554a:	431a      	orrs	r2, r3
 800554c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005550:	69db      	ldr	r3, [r3, #28]
 8005552:	4313      	orrs	r3, r2
 8005554:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005564:	f021 010c 	bic.w	r1, r1, #12
 8005568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005572:	430b      	orrs	r3, r1
 8005574:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	695b      	ldr	r3, [r3, #20]
 800557e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005586:	6999      	ldr	r1, [r3, #24]
 8005588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	ea40 0301 	orr.w	r3, r0, r1
 8005592:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	4b8f      	ldr	r3, [pc, #572]	; (80057d8 <UART_SetConfig+0x2cc>)
 800559c:	429a      	cmp	r2, r3
 800559e:	d005      	beq.n	80055ac <UART_SetConfig+0xa0>
 80055a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	4b8d      	ldr	r3, [pc, #564]	; (80057dc <UART_SetConfig+0x2d0>)
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d104      	bne.n	80055b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80055ac:	f7fe f9da 	bl	8003964 <HAL_RCC_GetPCLK2Freq>
 80055b0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80055b4:	e003      	b.n	80055be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80055b6:	f7fe f9c1 	bl	800393c <HAL_RCC_GetPCLK1Freq>
 80055ba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055c2:	69db      	ldr	r3, [r3, #28]
 80055c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055c8:	f040 810c 	bne.w	80057e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80055cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055d0:	2200      	movs	r2, #0
 80055d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80055d6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80055da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80055de:	4622      	mov	r2, r4
 80055e0:	462b      	mov	r3, r5
 80055e2:	1891      	adds	r1, r2, r2
 80055e4:	65b9      	str	r1, [r7, #88]	; 0x58
 80055e6:	415b      	adcs	r3, r3
 80055e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80055ee:	4621      	mov	r1, r4
 80055f0:	eb12 0801 	adds.w	r8, r2, r1
 80055f4:	4629      	mov	r1, r5
 80055f6:	eb43 0901 	adc.w	r9, r3, r1
 80055fa:	f04f 0200 	mov.w	r2, #0
 80055fe:	f04f 0300 	mov.w	r3, #0
 8005602:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005606:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800560a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800560e:	4690      	mov	r8, r2
 8005610:	4699      	mov	r9, r3
 8005612:	4623      	mov	r3, r4
 8005614:	eb18 0303 	adds.w	r3, r8, r3
 8005618:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800561c:	462b      	mov	r3, r5
 800561e:	eb49 0303 	adc.w	r3, r9, r3
 8005622:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005632:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005636:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800563a:	460b      	mov	r3, r1
 800563c:	18db      	adds	r3, r3, r3
 800563e:	653b      	str	r3, [r7, #80]	; 0x50
 8005640:	4613      	mov	r3, r2
 8005642:	eb42 0303 	adc.w	r3, r2, r3
 8005646:	657b      	str	r3, [r7, #84]	; 0x54
 8005648:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800564c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005650:	f7fb f9b8 	bl	80009c4 <__aeabi_uldivmod>
 8005654:	4602      	mov	r2, r0
 8005656:	460b      	mov	r3, r1
 8005658:	4b61      	ldr	r3, [pc, #388]	; (80057e0 <UART_SetConfig+0x2d4>)
 800565a:	fba3 2302 	umull	r2, r3, r3, r2
 800565e:	095b      	lsrs	r3, r3, #5
 8005660:	011c      	lsls	r4, r3, #4
 8005662:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005666:	2200      	movs	r2, #0
 8005668:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800566c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005670:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005674:	4642      	mov	r2, r8
 8005676:	464b      	mov	r3, r9
 8005678:	1891      	adds	r1, r2, r2
 800567a:	64b9      	str	r1, [r7, #72]	; 0x48
 800567c:	415b      	adcs	r3, r3
 800567e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005680:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005684:	4641      	mov	r1, r8
 8005686:	eb12 0a01 	adds.w	sl, r2, r1
 800568a:	4649      	mov	r1, r9
 800568c:	eb43 0b01 	adc.w	fp, r3, r1
 8005690:	f04f 0200 	mov.w	r2, #0
 8005694:	f04f 0300 	mov.w	r3, #0
 8005698:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800569c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80056a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056a4:	4692      	mov	sl, r2
 80056a6:	469b      	mov	fp, r3
 80056a8:	4643      	mov	r3, r8
 80056aa:	eb1a 0303 	adds.w	r3, sl, r3
 80056ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80056b2:	464b      	mov	r3, r9
 80056b4:	eb4b 0303 	adc.w	r3, fp, r3
 80056b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80056bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80056c8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80056cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80056d0:	460b      	mov	r3, r1
 80056d2:	18db      	adds	r3, r3, r3
 80056d4:	643b      	str	r3, [r7, #64]	; 0x40
 80056d6:	4613      	mov	r3, r2
 80056d8:	eb42 0303 	adc.w	r3, r2, r3
 80056dc:	647b      	str	r3, [r7, #68]	; 0x44
 80056de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80056e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80056e6:	f7fb f96d 	bl	80009c4 <__aeabi_uldivmod>
 80056ea:	4602      	mov	r2, r0
 80056ec:	460b      	mov	r3, r1
 80056ee:	4611      	mov	r1, r2
 80056f0:	4b3b      	ldr	r3, [pc, #236]	; (80057e0 <UART_SetConfig+0x2d4>)
 80056f2:	fba3 2301 	umull	r2, r3, r3, r1
 80056f6:	095b      	lsrs	r3, r3, #5
 80056f8:	2264      	movs	r2, #100	; 0x64
 80056fa:	fb02 f303 	mul.w	r3, r2, r3
 80056fe:	1acb      	subs	r3, r1, r3
 8005700:	00db      	lsls	r3, r3, #3
 8005702:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005706:	4b36      	ldr	r3, [pc, #216]	; (80057e0 <UART_SetConfig+0x2d4>)
 8005708:	fba3 2302 	umull	r2, r3, r3, r2
 800570c:	095b      	lsrs	r3, r3, #5
 800570e:	005b      	lsls	r3, r3, #1
 8005710:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005714:	441c      	add	r4, r3
 8005716:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800571a:	2200      	movs	r2, #0
 800571c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005720:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005724:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005728:	4642      	mov	r2, r8
 800572a:	464b      	mov	r3, r9
 800572c:	1891      	adds	r1, r2, r2
 800572e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005730:	415b      	adcs	r3, r3
 8005732:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005734:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005738:	4641      	mov	r1, r8
 800573a:	1851      	adds	r1, r2, r1
 800573c:	6339      	str	r1, [r7, #48]	; 0x30
 800573e:	4649      	mov	r1, r9
 8005740:	414b      	adcs	r3, r1
 8005742:	637b      	str	r3, [r7, #52]	; 0x34
 8005744:	f04f 0200 	mov.w	r2, #0
 8005748:	f04f 0300 	mov.w	r3, #0
 800574c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005750:	4659      	mov	r1, fp
 8005752:	00cb      	lsls	r3, r1, #3
 8005754:	4651      	mov	r1, sl
 8005756:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800575a:	4651      	mov	r1, sl
 800575c:	00ca      	lsls	r2, r1, #3
 800575e:	4610      	mov	r0, r2
 8005760:	4619      	mov	r1, r3
 8005762:	4603      	mov	r3, r0
 8005764:	4642      	mov	r2, r8
 8005766:	189b      	adds	r3, r3, r2
 8005768:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800576c:	464b      	mov	r3, r9
 800576e:	460a      	mov	r2, r1
 8005770:	eb42 0303 	adc.w	r3, r2, r3
 8005774:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005784:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005788:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800578c:	460b      	mov	r3, r1
 800578e:	18db      	adds	r3, r3, r3
 8005790:	62bb      	str	r3, [r7, #40]	; 0x28
 8005792:	4613      	mov	r3, r2
 8005794:	eb42 0303 	adc.w	r3, r2, r3
 8005798:	62fb      	str	r3, [r7, #44]	; 0x2c
 800579a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800579e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80057a2:	f7fb f90f 	bl	80009c4 <__aeabi_uldivmod>
 80057a6:	4602      	mov	r2, r0
 80057a8:	460b      	mov	r3, r1
 80057aa:	4b0d      	ldr	r3, [pc, #52]	; (80057e0 <UART_SetConfig+0x2d4>)
 80057ac:	fba3 1302 	umull	r1, r3, r3, r2
 80057b0:	095b      	lsrs	r3, r3, #5
 80057b2:	2164      	movs	r1, #100	; 0x64
 80057b4:	fb01 f303 	mul.w	r3, r1, r3
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	00db      	lsls	r3, r3, #3
 80057bc:	3332      	adds	r3, #50	; 0x32
 80057be:	4a08      	ldr	r2, [pc, #32]	; (80057e0 <UART_SetConfig+0x2d4>)
 80057c0:	fba2 2303 	umull	r2, r3, r2, r3
 80057c4:	095b      	lsrs	r3, r3, #5
 80057c6:	f003 0207 	and.w	r2, r3, #7
 80057ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4422      	add	r2, r4
 80057d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80057d4:	e106      	b.n	80059e4 <UART_SetConfig+0x4d8>
 80057d6:	bf00      	nop
 80057d8:	40011000 	.word	0x40011000
 80057dc:	40011400 	.word	0x40011400
 80057e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057e8:	2200      	movs	r2, #0
 80057ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80057ee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80057f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80057f6:	4642      	mov	r2, r8
 80057f8:	464b      	mov	r3, r9
 80057fa:	1891      	adds	r1, r2, r2
 80057fc:	6239      	str	r1, [r7, #32]
 80057fe:	415b      	adcs	r3, r3
 8005800:	627b      	str	r3, [r7, #36]	; 0x24
 8005802:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005806:	4641      	mov	r1, r8
 8005808:	1854      	adds	r4, r2, r1
 800580a:	4649      	mov	r1, r9
 800580c:	eb43 0501 	adc.w	r5, r3, r1
 8005810:	f04f 0200 	mov.w	r2, #0
 8005814:	f04f 0300 	mov.w	r3, #0
 8005818:	00eb      	lsls	r3, r5, #3
 800581a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800581e:	00e2      	lsls	r2, r4, #3
 8005820:	4614      	mov	r4, r2
 8005822:	461d      	mov	r5, r3
 8005824:	4643      	mov	r3, r8
 8005826:	18e3      	adds	r3, r4, r3
 8005828:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800582c:	464b      	mov	r3, r9
 800582e:	eb45 0303 	adc.w	r3, r5, r3
 8005832:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005842:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005846:	f04f 0200 	mov.w	r2, #0
 800584a:	f04f 0300 	mov.w	r3, #0
 800584e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005852:	4629      	mov	r1, r5
 8005854:	008b      	lsls	r3, r1, #2
 8005856:	4621      	mov	r1, r4
 8005858:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800585c:	4621      	mov	r1, r4
 800585e:	008a      	lsls	r2, r1, #2
 8005860:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005864:	f7fb f8ae 	bl	80009c4 <__aeabi_uldivmod>
 8005868:	4602      	mov	r2, r0
 800586a:	460b      	mov	r3, r1
 800586c:	4b60      	ldr	r3, [pc, #384]	; (80059f0 <UART_SetConfig+0x4e4>)
 800586e:	fba3 2302 	umull	r2, r3, r3, r2
 8005872:	095b      	lsrs	r3, r3, #5
 8005874:	011c      	lsls	r4, r3, #4
 8005876:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800587a:	2200      	movs	r2, #0
 800587c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005880:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005884:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005888:	4642      	mov	r2, r8
 800588a:	464b      	mov	r3, r9
 800588c:	1891      	adds	r1, r2, r2
 800588e:	61b9      	str	r1, [r7, #24]
 8005890:	415b      	adcs	r3, r3
 8005892:	61fb      	str	r3, [r7, #28]
 8005894:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005898:	4641      	mov	r1, r8
 800589a:	1851      	adds	r1, r2, r1
 800589c:	6139      	str	r1, [r7, #16]
 800589e:	4649      	mov	r1, r9
 80058a0:	414b      	adcs	r3, r1
 80058a2:	617b      	str	r3, [r7, #20]
 80058a4:	f04f 0200 	mov.w	r2, #0
 80058a8:	f04f 0300 	mov.w	r3, #0
 80058ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80058b0:	4659      	mov	r1, fp
 80058b2:	00cb      	lsls	r3, r1, #3
 80058b4:	4651      	mov	r1, sl
 80058b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058ba:	4651      	mov	r1, sl
 80058bc:	00ca      	lsls	r2, r1, #3
 80058be:	4610      	mov	r0, r2
 80058c0:	4619      	mov	r1, r3
 80058c2:	4603      	mov	r3, r0
 80058c4:	4642      	mov	r2, r8
 80058c6:	189b      	adds	r3, r3, r2
 80058c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80058cc:	464b      	mov	r3, r9
 80058ce:	460a      	mov	r2, r1
 80058d0:	eb42 0303 	adc.w	r3, r2, r3
 80058d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80058d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80058e2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80058e4:	f04f 0200 	mov.w	r2, #0
 80058e8:	f04f 0300 	mov.w	r3, #0
 80058ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80058f0:	4649      	mov	r1, r9
 80058f2:	008b      	lsls	r3, r1, #2
 80058f4:	4641      	mov	r1, r8
 80058f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058fa:	4641      	mov	r1, r8
 80058fc:	008a      	lsls	r2, r1, #2
 80058fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005902:	f7fb f85f 	bl	80009c4 <__aeabi_uldivmod>
 8005906:	4602      	mov	r2, r0
 8005908:	460b      	mov	r3, r1
 800590a:	4611      	mov	r1, r2
 800590c:	4b38      	ldr	r3, [pc, #224]	; (80059f0 <UART_SetConfig+0x4e4>)
 800590e:	fba3 2301 	umull	r2, r3, r3, r1
 8005912:	095b      	lsrs	r3, r3, #5
 8005914:	2264      	movs	r2, #100	; 0x64
 8005916:	fb02 f303 	mul.w	r3, r2, r3
 800591a:	1acb      	subs	r3, r1, r3
 800591c:	011b      	lsls	r3, r3, #4
 800591e:	3332      	adds	r3, #50	; 0x32
 8005920:	4a33      	ldr	r2, [pc, #204]	; (80059f0 <UART_SetConfig+0x4e4>)
 8005922:	fba2 2303 	umull	r2, r3, r2, r3
 8005926:	095b      	lsrs	r3, r3, #5
 8005928:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800592c:	441c      	add	r4, r3
 800592e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005932:	2200      	movs	r2, #0
 8005934:	673b      	str	r3, [r7, #112]	; 0x70
 8005936:	677a      	str	r2, [r7, #116]	; 0x74
 8005938:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800593c:	4642      	mov	r2, r8
 800593e:	464b      	mov	r3, r9
 8005940:	1891      	adds	r1, r2, r2
 8005942:	60b9      	str	r1, [r7, #8]
 8005944:	415b      	adcs	r3, r3
 8005946:	60fb      	str	r3, [r7, #12]
 8005948:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800594c:	4641      	mov	r1, r8
 800594e:	1851      	adds	r1, r2, r1
 8005950:	6039      	str	r1, [r7, #0]
 8005952:	4649      	mov	r1, r9
 8005954:	414b      	adcs	r3, r1
 8005956:	607b      	str	r3, [r7, #4]
 8005958:	f04f 0200 	mov.w	r2, #0
 800595c:	f04f 0300 	mov.w	r3, #0
 8005960:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005964:	4659      	mov	r1, fp
 8005966:	00cb      	lsls	r3, r1, #3
 8005968:	4651      	mov	r1, sl
 800596a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800596e:	4651      	mov	r1, sl
 8005970:	00ca      	lsls	r2, r1, #3
 8005972:	4610      	mov	r0, r2
 8005974:	4619      	mov	r1, r3
 8005976:	4603      	mov	r3, r0
 8005978:	4642      	mov	r2, r8
 800597a:	189b      	adds	r3, r3, r2
 800597c:	66bb      	str	r3, [r7, #104]	; 0x68
 800597e:	464b      	mov	r3, r9
 8005980:	460a      	mov	r2, r1
 8005982:	eb42 0303 	adc.w	r3, r2, r3
 8005986:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	663b      	str	r3, [r7, #96]	; 0x60
 8005992:	667a      	str	r2, [r7, #100]	; 0x64
 8005994:	f04f 0200 	mov.w	r2, #0
 8005998:	f04f 0300 	mov.w	r3, #0
 800599c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80059a0:	4649      	mov	r1, r9
 80059a2:	008b      	lsls	r3, r1, #2
 80059a4:	4641      	mov	r1, r8
 80059a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059aa:	4641      	mov	r1, r8
 80059ac:	008a      	lsls	r2, r1, #2
 80059ae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80059b2:	f7fb f807 	bl	80009c4 <__aeabi_uldivmod>
 80059b6:	4602      	mov	r2, r0
 80059b8:	460b      	mov	r3, r1
 80059ba:	4b0d      	ldr	r3, [pc, #52]	; (80059f0 <UART_SetConfig+0x4e4>)
 80059bc:	fba3 1302 	umull	r1, r3, r3, r2
 80059c0:	095b      	lsrs	r3, r3, #5
 80059c2:	2164      	movs	r1, #100	; 0x64
 80059c4:	fb01 f303 	mul.w	r3, r1, r3
 80059c8:	1ad3      	subs	r3, r2, r3
 80059ca:	011b      	lsls	r3, r3, #4
 80059cc:	3332      	adds	r3, #50	; 0x32
 80059ce:	4a08      	ldr	r2, [pc, #32]	; (80059f0 <UART_SetConfig+0x4e4>)
 80059d0:	fba2 2303 	umull	r2, r3, r2, r3
 80059d4:	095b      	lsrs	r3, r3, #5
 80059d6:	f003 020f 	and.w	r2, r3, #15
 80059da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4422      	add	r2, r4
 80059e2:	609a      	str	r2, [r3, #8]
}
 80059e4:	bf00      	nop
 80059e6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80059ea:	46bd      	mov	sp, r7
 80059ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059f0:	51eb851f 	.word	0x51eb851f

080059f4 <memset>:
 80059f4:	4402      	add	r2, r0
 80059f6:	4603      	mov	r3, r0
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d100      	bne.n	80059fe <memset+0xa>
 80059fc:	4770      	bx	lr
 80059fe:	f803 1b01 	strb.w	r1, [r3], #1
 8005a02:	e7f9      	b.n	80059f8 <memset+0x4>

08005a04 <__libc_init_array>:
 8005a04:	b570      	push	{r4, r5, r6, lr}
 8005a06:	4d0d      	ldr	r5, [pc, #52]	; (8005a3c <__libc_init_array+0x38>)
 8005a08:	4c0d      	ldr	r4, [pc, #52]	; (8005a40 <__libc_init_array+0x3c>)
 8005a0a:	1b64      	subs	r4, r4, r5
 8005a0c:	10a4      	asrs	r4, r4, #2
 8005a0e:	2600      	movs	r6, #0
 8005a10:	42a6      	cmp	r6, r4
 8005a12:	d109      	bne.n	8005a28 <__libc_init_array+0x24>
 8005a14:	4d0b      	ldr	r5, [pc, #44]	; (8005a44 <__libc_init_array+0x40>)
 8005a16:	4c0c      	ldr	r4, [pc, #48]	; (8005a48 <__libc_init_array+0x44>)
 8005a18:	f000 f818 	bl	8005a4c <_init>
 8005a1c:	1b64      	subs	r4, r4, r5
 8005a1e:	10a4      	asrs	r4, r4, #2
 8005a20:	2600      	movs	r6, #0
 8005a22:	42a6      	cmp	r6, r4
 8005a24:	d105      	bne.n	8005a32 <__libc_init_array+0x2e>
 8005a26:	bd70      	pop	{r4, r5, r6, pc}
 8005a28:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a2c:	4798      	blx	r3
 8005a2e:	3601      	adds	r6, #1
 8005a30:	e7ee      	b.n	8005a10 <__libc_init_array+0xc>
 8005a32:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a36:	4798      	blx	r3
 8005a38:	3601      	adds	r6, #1
 8005a3a:	e7f2      	b.n	8005a22 <__libc_init_array+0x1e>
 8005a3c:	08005a94 	.word	0x08005a94
 8005a40:	08005a94 	.word	0x08005a94
 8005a44:	08005a94 	.word	0x08005a94
 8005a48:	08005a98 	.word	0x08005a98

08005a4c <_init>:
 8005a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a4e:	bf00      	nop
 8005a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a52:	bc08      	pop	{r3}
 8005a54:	469e      	mov	lr, r3
 8005a56:	4770      	bx	lr

08005a58 <_fini>:
 8005a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a5a:	bf00      	nop
 8005a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a5e:	bc08      	pop	{r3}
 8005a60:	469e      	mov	lr, r3
 8005a62:	4770      	bx	lr
